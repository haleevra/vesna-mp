
#Область ПеременныеМодуля

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат; // Возврат при получении формы для анализа.
	КонецЕсли;
	
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта",
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	ЭтотОбъект.СобытиеДляПоказаПослеЗакрытия = Параметры.СобытиеДляПоказаПослеЗакрытия;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
		Если Не ПустаяСтрока(Параметры.ТекстЗаполнения) Тогда
			ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		КонецЕсли;
				
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
			
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	//УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(ОписаниеОшибкиЗаполнения) Тогда
		
		Если ОписаниеОшибкиЗаполнения = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
					|необходимо подключиться к интернет-поддержке пользователей.
					|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, Новый Структура("ИНН", Объект.ИНН));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибкиЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ЗначениеЗаполнено(СобытиеДляПоказаПослеЗакрытия) Тогда
		ПоказатьЗначение(, СобытиеДляПоказаПослеЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "УстановкаКонтактногоЛица" И Параметр.Контрагент = Объект.Ссылка Тогда
		
		Объект[Параметр.Реквизит] = Параметр.КонтактноеЛицо;
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаРеквизитаВыполнена");
		
	ИначеЕсли ИмяСобытия = "Запись_КонтактноеЛицо" И Параметр.Владелец = Объект.Ссылка Тогда
		
		ЗаполнитьИОбновитьКонтактныеЛица();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеТегов(ТекущийОбъект);
	
	// Заполним основное контактное лицо первым имеющимся
	Если Не ЗначениеЗаполнено(ТекущийОбъект.КонтактноеЛицо) Тогда
		Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
			Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
				ТекущийОбъект.КонтактноеЛицо = ДанныеКЛ.КонтактноеЛицо;
				Прервать;
			ИначеЕсли Не ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
				ТекущийОбъект.КонтактноеЛицо = Справочники.КонтактныеЛица.ПолучитьСсылку();
				ТекущийОбъект.ДополнительныеСвойства.Вставить("НовоеОсновноеКонтактноеЛицо", ТекущийОбъект.КонтактноеЛицо);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним информацию о записываемых контактных лицах для реквизита "ОсновныеСведения"
	МассивСтрок = Новый Массив;
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		
		МассивСтрок.Добавить(ДанныеКЛ.Наименование);
		
 		Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
			Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрок.Добавить(ДанныеКИ.Представление);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним служебный реквизит номера телефонов
	НомераТелефонов = Новый Массив;
	
	Для Каждого СтрокаКИ Из ЭтотОбъект["КонтактнаяИнформация"] Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
			НомераТелефонов.Добавить(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
			МассивСтрок.Добавить(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОсновныеСведенияКонтактныхЛиц", МассивСтрок);
	
	Для Каждого СтрокаКЛ Из ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаКИ Из СтрокаКЛ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				НомераТелефонов.Добавить(СтрокаКИ.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийОбъект.НомерТелефона = СтрСоединить(НомераТелефонов, ", ");
	
	// МедПреды.КонтактнаяИнформация
	КонтактнаяИнформацияМедПреды.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец МедПреды.КонтактнаяИнформация
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеКонтактныхЛиц(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьДанныеПанелиДопИнформации();
	
	Если СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта Тогда
		
		//ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		//ТекущийОбъект.Ссылка,
		//АдресЭП(),
		//УникальныйИдентификатор);
		
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	Оповестить("Запись_Контрагент", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеКонтактныхЛиц(Отказ);
	ПроверитьЗаполнениеКонтактнойИнформацииКонтактныхЛиц(Отказ);
	
	// МедПреды.КонтактнаяИнформация
	КонтактнаяИнформацияМедПреды.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец МедПреды.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОтборРасшифровки = Новый Соответствие;
	ОтборРасшифровки.Вставить("Контрагент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
	Вариант =  СсылкаВариантаОтчета("АктСверки", "АктСверкиКонтекст");
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Вариант, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПродажОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаПродажПоПокупателям");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Период,Контрагент", Новый СтандартныйПериод, Объект.Ссылка));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.Продажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_ПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	//Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
	//	Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	//КонецЕсли;
	
	ОпределитьВидКонтрагента(ЭтотОбъект);
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Объект.НаименованиеПолное = СтрЗаменить(Объект.НаименованиеПолное, Символы.ПС, " ");
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
		Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ОпределитьВидКонтрагента(ЭтотОбъект);
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
		
	УправлениеФормой();
			
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиДублей(ЭтотОбъект);

	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиДублей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПроверкиДанныхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ПоказатьДубли") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИНН", СокрЛП(Объект.ИНН));
		ПараметрыФормы.Вставить("КПП", СокрЛП(Объект.КПП));
		ПараметрыФормы.Вставить("ЭтоЮрЛицо", ЭтоЮрЛицо(Объект.ТипКонтрагента));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", ПараметрыФормы, Элемент,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = ДанныеТегов.НайтиПоИдентификатору(ТегИД);
	ДанныеТегов.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТегов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПоляКонтактногоЛица(Команда)
	
	ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
	
	ЗаполнитьВсегдаВыводимыеВидыКИ(
		ДанныеКЛ.КонтактнаяИнформация,
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	
	ОбновитьЭлементыКонтактныхЛиц();
	ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ)];
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформацииКонтактногоЛица(Команда)
	
	ИндексКонтакта = Число(Сред(ТекущийЭлемент.Имя, СтрДлина("ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_")+1));
	ДанныеКонтакта = ДанныеКонтактныхЛиц[ИндексКонтакта];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКонтакта", ИндексКонтакта);
	ДополнительныеПараметры.Вставить("МножественнаяФормаВладельца", НСтр("ru='контактных лиц'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюКонтактаВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из СвойстваВидовКонтактнойИнформацииКонтактныхЛиц Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или ДанныеКонтакта.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	// 2. Чтение дополнительных данных
	
	ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
	ПрочитатьДанныеТегов();
	ОбновитьЭлементыТегов();
	
	ПрочитатьДанныеПанелиДопИнформации();
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	
	// Заполним список возможных кратких наименований и определим флаг автоматической смены краткого наименования
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено
		Или (ДанныеКонтактныхЛиц.Количество() > 0 И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(ДанныеКонтактныхЛиц[0].Наименование) <> Неопределено);
	
	// МедПреды.КонтактнаяИнформация
	КонтактнаяИнформацияМедПреды.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец МедПреды.КонтактнаяИнформация
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	// Изменяем видимость реквизитов формы в зависимости от вида контрагента
	Если Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ЮридическоеЛицо") Тогда
		
		Элементы.ФИО.Видимость								= Ложь;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= Истина;
		
		Элементы.ИНН.ПодсказкаВвода							= НСтр("ru = '10 цифр'");
		Элементы.ИНН.ОграничениеТипа						= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
		
	ИначеЕсли Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ИндивидуальныйПредприниматель") Тогда
		
		Элементы.ФИО.Видимость								= Истина;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= Ложь;
		
		Элементы.ИНН.ПодсказкаВвода							= НСтр("ru = '12 цифр'");
		Элементы.ИНН.ОграничениеТипа						= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
		
	ИначеЕсли Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ФизическоеЛицо") Тогда
		
		Элементы.ФИО.Видимость								= Истина;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= Ложь;
		
		Элементы.ИНН.ПодсказкаВвода		= НСтр("ru = '12 цифр'");
		Элементы.ИНН.ОграничениеТипа	= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Форма.Автозаголовок = Истина;
		Возврат;
	КонецЕсли;
	
	Форма.Автозаголовок = Ложь;
	ВидыОтношений = Новый Массив;
		
	Заголовок = Объект.Наименование + " (" + НСтр("ru='Контрагент'");
	
	Если ВидыОтношений.Количество() > 0 Тогда
		Заголовок = Заголовок + ": ";
		Для Каждого Вид Из ВидыОтношений Цикл
			Заголовок = Заголовок + Вид + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Заголовок, 2);
	КонецЕсли;
	
	Заголовок = Заголовок + ")";
	
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНаименования(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.Наименование.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		
		СписокВыбора.Добавить(Объект.НаименованиеПолное);
		
	КонецЕсли;
	
	//Если Форма.ДанныеКонтактныхЛиц.Количество() > 0 И Не ПустаяСтрока(Форма.ДанныеКонтактныхЛиц[0].Наименование) Тогда
	//	СписокВыбора.Добавить(Форма.ДанныеКонтактныхЛиц[0].Наименование);
	//КонецЕсли;
	
	Форма.Элементы.Наименование.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыделитьИзНаименованияОПФ(КлассификаторОПФ, знач НаименованиеОрганизации)
	
	НаименованиеОрганизации = СокрЛП(НаименованиеОрганизации);
	Результат = Новый Структура("НаименованиеБезОПФ, КраткаяФорма, ПолнаяФорма", НаименованиеОрганизации, "", "");
	
	// Поиск по полной организационно-правовой форме
	Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
		Если СтрНайти(НаименованиеОрганизации, ДанныеОПФ.ПолнаяФорма) > 0 Тогда
			Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
			Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
			Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, ДанныеОПФ.ПолнаяФорма, "")));
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по краткой организационно-правовой форме
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеОрганизации);
	Для Каждого Слово Из МассивСлов Цикл
		Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
			Если Не ПустаяСтрока(ДанныеОПФ.КраткаяФорма) И ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.КраткаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВидКонтрагента(Форма)
	
	//Если ТипЗнч(Форма.ОрганизационноПравоваяФорма) <> Тип("Структура") 
	//	Или Не Форма.ОрганизационноПравоваяФорма.Свойство("ПолнаяФорма") Тогда
	//	
	//	Возврат;
	//КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	//Если Форма.ОрганизационноПравоваяФорма.ПолнаяФорма = "Индивидуальный предприниматель" Тогда
	//	Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель");
	//ИначеЕсли Не ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.ПолнаяФорма) Тогда
	//	Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СформироватьПредставлениеПроверкиДублей(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(Знач ТекстЗаполнения)
	
	Если (СтрДлина(ТекстЗаполнения) = 10 ИЛИ СтрДлина(ТекстЗаполнения) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстЗаполнения) Тогда
		
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ТипКонтрагента = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.ТипыКонтрагентов.ЮридическоеЛицо,
			Перечисления.ТипыКонтрагентов.ИндивидуальныйПредприниматель);
		ТекстЗаполнения = Неопределено;
		
		ОписаниеОшибкиЗаполнения = "";
		
		УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
		
	Иначе
		
		Объект.НаименованиеПолное = ТекстЗаполнения;
		ТекущийЭлемент = Элементы.НаименованиеПолное;
		
		ФормироватьНаименованиеАвтоматически = Истина;
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
		Если Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
			Объект.Наименование = Элементы.Наименование.СписокВыбора[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ВидКонтакта = "Контрагент" Тогда
		
		Объект.Наименование = КонтактКакСвязаться.Контакт;
		Объект.НаименованиеПолное = КонтактКакСвязаться.Контакт;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ЭтотОбъект.КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		СтрокаКИ.ЗначенияПолей = КонтактКакСвязаться.КакСвязаться;
		СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		
	КонецЕсли;
	
	Если КонтактКакСвязаться.ВидКонтакта = "КонтактноеЛицо" Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = КонтактКакСвязаться.Контакт;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ФИО) Тогда
			Объект.ФИО = КонтактКакСвязаться.Контакт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеКонтактныхЛиц[0].Наименование) Тогда
			ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
			ЗаполнитьВсегдаВыводимыеВидыКИ(
			ДанныеКЛ.КонтактнаяИнформация,
			СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
			ОбновитьЭлементыКонтактныхЛиц();
			ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ)];
		Иначе
			ДанныеКЛ = ДанныеКонтактныхЛиц[0];
		КонецЕсли;
		
		ДанныеКЛ.Наименование = КонтактКакСвязаться.Контакт;
		
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
		СтрокаКИ.ЗначенияПолей = КонтактКакСвязаться.КакСвязаться;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиИлиДобавитьНовуюСтрокуКИ(КонтактнаяИнформация, ТипКонтактнойИнформации)
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(
	Новый Структура("Тип,ЗначенияПолей", ТипКонтактнойИнформации, ""));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новую строку КИ с группировкой по типу КИ
	КоличествоЭлементовКоллекции = КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если КонтактнаяИнформация[ТекущийИндекс].Тип = ТипКонтактнойИнформации Тогда
			ИндексВставки = ТекущийИндекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = КонтактнаяИнформация.Вставить(ИндексВставки);
	Результат.Тип = ТипКонтактнойИнформации;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВсегдаВыводимыеВидыКИ(КИ, СвойстваВидовКонтактнойИнформацииКонтактныхЛиц)
	
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("ВыводитьВФормеВсегда", Истина));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрокаКИ = КИ.Добавить();
		НоваяСтрокаКИ.Вид = НайденнаяСтрока.Вид;
		НоваяСтрокаКИ.Тип = НайденнаяСтрока.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СсылкаВариантаОтчета(ИмяОтчета, КлючВарианта)
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет." + ИмяОтчета);
	Возврат ВариантыОтчетов.ПолучитьСсылку(Отчет, КлючВарианта);
	
КонецФункции

&НаСервере
Функция АдресЭП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = ДанныеКонтактныхЛиц[0].КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].ЗначенияПолей;
	
КонецФункции

#КонецОбласти

#Область КонтактныеЛица

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", КонтактнаяИнформацияМедПреды.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИОбновитьКонтактныеЛица()
	
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц()
		
	ДанныеКонтактныхЛиц.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛица.Наименование КАК Наименование,
		|	КонтактныеЛица.РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ втКонтакты
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Недействителен = ЛОЖЬ
		|	И КонтактныеЛица.Владелец = &Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтакты.КонтактноеЛицо,
		|	втКонтакты.Наименование КАК Наименование
		|ИЗ
		|	втКонтакты КАК втКонтакты
		|
		|УПОРЯДОЧИТЬ ПО
		|	втКонтакты.РеквизитДопУпорядочивания,
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПорядокТипов.Тип,
		|	ПорядокТипов.Порядок
		|ПОМЕСТИТЬ втПорядокТипов
		|ИЗ
		|	&ПорядокТипов КАК ПорядокТипов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтакты.КонтактноеЛицо КАК КонтактноеЛицо,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.Тип КАК Тип,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК ПорядокВидов,
		|	втПорядокТипов.Порядок КАК ПорядокТипов
		|ПОМЕСТИТЬ втВсегдаВыводимыеВиды
		|ИЗ
		|	втКонтакты КАК втКонтакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|			ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
		|			ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыКонтактнойИнформации.Ссылка В(&ВсегдаВыводимыеВиды)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо,
		|	Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВладелецКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		|	ВладелецКонтактнаяИнформация.Вид КАК Вид,
		|	ВладелецКонтактнаяИнформация.Тип,
		|	ВладелецКонтактнаяИнформация.Представление,
		|	ВладелецКонтактнаяИнформация.ЗначенияПолей,
		|	ВладелецКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ПорядокВидов,
		|	втПорядокТипов.Порядок КАК ПорядокТипов
		|ПОМЕСТИТЬ втДанныеКИ
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК ВладелецКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
		|		ПО ВладелецКонтактнаяИнформация.Тип = втПорядокТипов.Тип
		|ГДЕ
		|	ВладелецКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				втКонтакты.КонтактноеЛицо
		|			ИЗ
		|				втКонтакты)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо,
		|	Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втДанныеКИ.КонтактноеЛицо, втВсегдаВыводимыеВиды.КонтактноеЛицо) КАК КонтактноеЛицо,
		|	ЕСТЬNULL(втДанныеКИ.Вид, втВсегдаВыводимыеВиды.Вид) КАК Вид,
		|	ЕСТЬNULL(втДанныеКИ.Тип, втВсегдаВыводимыеВиды.Тип) КАК Тип,
		|	ЕСТЬNULL(втДанныеКИ.Представление, """") КАК Представление,
		|	ЕСТЬNULL(втДанныеКИ.ЗначенияПолей, """") КАК ЗначенияПолей,
		|	ЕСТЬNULL(втДанныеКИ.ПорядокТипов, втВсегдаВыводимыеВиды.ПорядокТипов) КАК ПорядокТипов,
		|	ЕСТЬNULL(втДанныеКИ.ПорядокВидов, втВсегдаВыводимыеВиды.ПорядокВидов) КАК ПорядокВидов
		|ИЗ
		|	втВсегдаВыводимыеВиды КАК втВсегдаВыводимыеВиды
		|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеКИ КАК втДанныеКИ
		|		ПО втВсегдаВыводимыеВиды.Вид = втДанныеКИ.Вид
		|			И втВсегдаВыводимыеВиды.КонтактноеЛицо = втДанныеКИ.КонтактноеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокТипов,
		|	ПорядокВидов";
	
	Запрос.УстановитьПараметр("Владелец",				Объект.Ссылка);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицо",	Объект.КонтактноеЛицо);
	Запрос.УстановитьПараметр("ПорядокТипов",			КонтактнаяИнформацияМедПреды.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ВсегдаВыводимыеВиды",
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Выгрузить(Новый Структура("ВыводитьВФормеВсегда", Истина), "Вид"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКонтакты = МассивРезультатов[1].Выбрать();
	ВыборкаКонтактнаяИнформация = МассивРезультатов[5].Выбрать();
	Отбор = Новый Структура("КонтактноеЛицо");
	
	Пока ВыборкаКонтакты.Следующий() Цикл
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеКЛ, ВыборкаКонтакты, "КонтактноеЛицо,Наименование");
		
		ВыборкаКонтактнаяИнформация.Сбросить();
		Отбор.КонтактноеЛицо = ВыборкаКонтакты.КонтактноеЛицо;
		
		Пока ВыборкаКонтактнаяИнформация.НайтиСледующий(Отбор) Цикл
			
			ДанныеКИ = ДанныеКЛ.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеКИ, ВыборкаКонтактнаяИнформация, "Тип,Вид,Представление,ЗначенияПолей");
			ДанныеКИ.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ВыборкаКонтактнаяИнформация.ЗначенияПолей);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Всегда есть поля для заполнения одного контактного лица
	Если ДанныеКонтактныхЛиц.Количество() = 0 Тогда
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьВсегдаВыводимыеВидыКИ(
			ДанныеКЛ.КонтактнаяИнформация,
			СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтактныхЛиц()
	
	Элементы.Переместить(Элементы.ДобавитьПоляКонтактногоЛица, Элементы.КомандыДобавленияКонтакт_0);
	Элементы.КомандыДобавленияРастяжение_0.МаксимальнаяШирина = 41;
	
	УдаляемыеЭлементы = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ВсеКонтакты.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ВсеКонтакты.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого ГруппаКИ Из Элементы.КонтактнаяИнформацияКонтакт_0.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаКИ);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ШиринаВидаКИ = 8;
	ШиринаПоляКомментария = 11;
	
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКонтакта = ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица);
		
		// Для первого контактного лица элементы формы созданы в конфигураторе
		Если ИндексКонтакта > 0 Тогда
			
			ГруппаКонтактногоЛица = Элементы.Добавить("Контакт_" + ИндексКонтакта, Тип("ГруппаФормы"), Элементы.ВсеКонтакты);
			ГруппаКонтактногоЛица.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКонтактногоЛица.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаКонтактногоЛица.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаКонтактногоЛица.ОтображатьЗаголовок = Ложь;
			
			ПолеНаименование = Элементы.Добавить("НаименованиеКонтакт_" + ИндексКонтакта, Тип("ПолеФормы"), ГруппаКонтактногоЛица);
			ПолеНаименование.Вид = ВидПоляФормы.ПолеВвода;
			ПолеНаименование.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].Наименование";
			ПолеНаименование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеНаименование.ПодсказкаВвода = НСтр("ru='Имя Фамилия'");
			ПолеНаименование.АвтоМаксимальнаяШирина = Ложь;
			ПолеНаименование.МаксимальнаяШирина = 52;
			
			ПолеНаименование.УстановитьДействие("АвтоПодбор", "НаименованиеКонтакт_АвтоПодбор");
			ПолеНаименование.УстановитьДействие("ОбработкаВыбора", "НаименованиеКонтакт_ОбработкаВыбора");
			
			ГруппаКИ = Элементы.Добавить("КонтактнаяИнформацияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаКИ.ОтображатьЗаголовок = Ложь;
			
			ГруппаДобавление = Элементы.Добавить("КомандыДобавленияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаДобавление.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДобавление.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаДобавление.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаДобавление.ОтображатьЗаголовок = Ложь;
			
			ДекорацияРастяжение = Элементы.Добавить("КомандыДобавленияРастяжение_" + ИндексКонтакта, Тип("ДекорацияФормы"), ГруппаДобавление);
			ДекорацияРастяжение.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияРастяжение.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияРастяжение.МаксимальнаяШирина = 41;
			ДекорацияРастяжение.РастягиватьПоГоризонтали = Истина;
			
			Кнопка = Элементы.Добавить("ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_" + ИндексКонтакта, Тип("КнопкаФормы"), ГруппаДобавление);
			Кнопка.ИмяКоманды = "ДобавитьПолеКонтактнойИнформацииКонтактногоЛица";
			Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			
		Иначе
			
			ГруппаКИ = Элементы.КонтактнаяИнформацияКонтакт_0;
			
		КонецЕсли;
		
		Отбор = Новый Структура("Вид");
		
		Для Каждого ДанныеКИ Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			ИндексКИ = ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(ДанныеКИ);
			Отбор.Вид = ДанныеКИ.Вид;
			НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			
			ГруппаЗначениеКИ = Элементы.Добавить("Контакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ГруппаФормы"), ГруппаКИ);
			ГруппаЗначениеКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗначениеКИ.Заголовок = ДанныеКИ.Вид;
			ГруппаЗначениеКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗначениеКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЗначениеКИ.ОтображатьЗаголовок = Ложь;
			
			ДекорацияДействие = Элементы.Добавить("ДействиеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ДекорацияФормы"), ГруппаЗначениеКИ);
			ДекорацияДействие.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияДействие.Картинка = КонтактнаяИнформацияМедПреды.КартинкаДействияПоТипуКонтактнойИнформации(ДанныеКИ.Тип);
			ДекорацияДействие.Гиперссылка = Истина;
			ДекорацияДействие.Ширина = 2;
			ДекорацияДействие.Высота = 1;
			ДекорацияДействие.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ДекорацияДействие.УстановитьДействие("Нажатие", "Подключаемый_ДействиеКИКонтактаНажатие");
			
			ПолеВид = Элементы.Добавить("ВидКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеВид.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеВид.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Вид";
			ПолеВид.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВид.Ширина = ШиринаВидаКИ;
			ПолеВид.РастягиватьПоГоризонтали = Ложь;
			
			ДоступноРедактированиеВДиалоге = КонтактнаяИнформацияМедПреды.ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ДанныеКИ.Тип);
			
			ПолеПредставление = Элементы.Добавить("ПредставлениеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеПредставление.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПредставление.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Представление";
			ПолеПредставление.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПредставление.КнопкаВыбора = ДоступноРедактированиеВДиалоге;
			ПолеПредставление.АвтоОтметкаНезаполненного = СвойстваВида.ОбязательноеЗаполнение;
			ПолеПредставление.ШиринаВыпадающегоСписка = 40;
			ПолеПредставление.УстановитьДействие("ПриИзменении", "Подключаемый_ПредставлениеКИКонтактаПриИзменении");
			ПолеПредставление.УстановитьДействие("Очистка", "Подключаемый_ПредставлениеКИКонтактаОчистка");
			Если СвойстваВида.РедактированиеТолькоВДиалоге Тогда
				ПолеПредставление.РедактированиеТекста = Ложь;
				ПолеПредставление.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Если ДоступноРедактированиеВДиалоге Тогда
				ПолеПредставление.УстановитьДействие("НачалоВыбора", "Подключаемый_ПредставлениеКИКонтактаНачалоВыбора");
			КонецЕсли;
			Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				ПолеПредставление.МногострочныйРежим = Истина;
				ПолеПредставление.Высота = 2;
				ПолеПредставление.РастягиватьПоВертикали = Ложь;
			КонецЕсли;
			
			Если КонтактнаяИнформацияМедПреды.ДляТипаКонтактнойИнформацииДоступенВводКомментария(ДанныеКИ.Тип) Тогда
				
				ПолеПредставление.АвтоМаксимальнаяШирина = Ложь;
				ПолеПредставление.МаксимальнаяШирина = 27;
				
				ПолеКомментарий = Элементы.Добавить("КомментарийКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
				ПолеКомментарий.Вид = ВидПоляФормы.ПолеВвода;
				ПолеКомментарий.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Комментарий";
				ПолеКомментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПолеКомментарий.ПропускатьПриВводе = Истина;
				ПолеКомментарий.ПодсказкаВвода = НСтр("ru='Прим.'");
				ПолеКомментарий.АвтоМаксимальнаяШирина = Ложь;
				ПолеКомментарий.МаксимальнаяШирина = ШиринаПоляКомментария;
				ПолеКомментарий.УстановитьДействие("ПриИзменении", "Подключаемый_КомментарийКИКонтактаПриИзменении");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	
	ИндексПоследнегоКЛ = ДанныеКонтактныхЛиц.Количество()-1;
	КомандаДобавленияКИ = Элементы["ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_" + ИндексПоследнегоКЛ];
	Элементы.Переместить(Элементы.ДобавитьПоляКонтактногоЛица, КомандаДобавленияКИ.Родитель, КомандаДобавленияКИ);
	Элементы["КомандыДобавленияРастяжение_" + ИндексПоследнегоКЛ].МаксимальнаяШирина = 34;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактныхЛиц(Отказ)
	
	// Проверка на заполненность ФИО контактного лица, если введена контактная информация
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если Не ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ДанныеКонтактныхЛиц[" + ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "].Наименование";
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			Если Не ПустаяСтрока(СтрокаТаблицы.ЗначенияПолей) Или Не ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ФИО контакта не заполнено.'"),,,ИмяРеквизита, Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКонтактныхЛиц(Отказ)
	
	ЕстьОшибки = Ложь;
	Отбор = Новый Структура("Вид");
	
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКонтактногоЛица = ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица);
		
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			Индекс = ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
			ИмяРеквизита = "ДанныеКонтактныхЛиц["+ИндексКонтактногоЛица+"].КонтактнаяИнформация["+Индекс+"].Представление";
			
			Если СвойстваВида.ОбязательноеЗаполнение И ПустаяСтрока(СтрокаТаблицы.Представление)
				И Не ЕстьДругиеЗаполненныеСтрокиВидаКИ(ДанныеКонтактногоЛица, СтрокаТаблицы, СтрокаТаблицы.Вид) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Вид контактной информации ""%1"" не заполнен.'"), СвойстваВида.ПредставлениеВида),,, ИмяРеквизита);
				
			ИначеЕсли СвойстваВида.ПроверятьКорректность И Не ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				
				ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаТаблицы.ЗначенияПолей, СтрокаТаблицы.Вид);
				Если СтрокаТаблицы.Комментарий <> Неопределено Тогда
					ОбъектКИ.Комментарий = СтрокаТаблицы.Комментарий;
				КонецЕсли;
				ОбъектКИ.Представление = СтрокаТаблицы.Представление;
				
				// Проверка
				Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Если Не КонтактнаяИнформацияМедПреды.ЭлектроннаяПочтаКорректна(ОбъектКИ, ИмяРеквизита) Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					Если УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(СтрокаТаблицы.Представление, СтрокаТаблицы.ЗначенияПолей, СтрокаТаблицы.Вид, СтрокаТаблицы.Тип, ИмяРеквизита) > 0 Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					//Результат = УправлениеНебольшойФирмойКлиентСервер.ПреобразоватьНомерДляОтправкиSMS(СтрокаТаблицы.Представление);
					//Если Не Результат.НомерКорректен Тогда
					//	ЕстьОшибки = Истина;
					//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке,,, ИмяРеквизита);
					//КонецЕсли;
				Иначе
					// Остальные типы контактной информации не проверяем
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДругиеЗаполненныеСтрокиВидаКИ(Знач ДанныеКонтактногоЛица, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = ДанныеКонтактногоЛица.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока И Не ПустаяСтрока(СтрокаВида.Представление) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеКонтактныхЛиц(ТекущийОбъект)
	
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
			КонтактноеЛицоОбъект = ДанныеКЛ.КонтактноеЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Или КонтактноеЛицоОбъект = Неопределено Тогда
			
			// Создание
			КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
			КонтактноеЛицоОбъект.Заполнить(ТекущийОбъект.Ссылка);
			НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(КонтактноеЛицоОбъект, Ложь);
			
			// Установим ссылку нового по переданной ссылке основного контактного лица
			Если ТекущийОбъект.ДополнительныеСвойства.Свойство("НовоеОсновноеКонтактноеЛицо") Тогда
				КонтактноеЛицоОбъект.УстановитьСсылкуНового(ТекущийОбъект.ДополнительныеСвойства.НовоеОсновноеКонтактноеЛицо);
				ТекущийОбъект.ДополнительныеСвойства.Удалить("НовоеОсновноеКонтактноеЛицо");
			КонецЕсли;
			
		КонецЕсли;
		
		// Внесение изменений
		ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, ДанныеКЛ, "Наименование");
		КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
		Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.ЗначенияПолей, ДанныеКИ.Вид, ДанныеКИ.Тип);
		КонецЦикла;
		
		// Запись объекта
		КонтактноеЛицоОбъект.Записать();
		
		// Сохранение ссылки на созданный объект
		ДанныеКЛ.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(Форма) Экспорт
	
	МассивАдресов = Новый Массив;
	Отбор = Новый Структура("Вид");
	
	Для Каждого ДанныеКонтактногоЛица Из Форма.ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Если СтрокаТаблицы.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаТаблицы.Представление)
				И МассивАдресов.Найти(СтрокаТаблицы.Представление) = Неопределено Тогда
				
				МассивАдресов.Добавить(СтрокаТаблицы.Представление);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ДанныеКонтактногоЛица Из Форма.ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Если СтрокаТаблицы.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = "ПредставлениеКонтакт_" + Форма.ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "_КИ_" + ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
			ПолеПредставление = Форма.Элементы[ИмяПоля];
			ПолеПредставление.СписокВыбора.ЗагрузитьЗначения(МассивАдресов);
			
			ПолеПредставление.КнопкаВыпадающегоСписка = ПолеПредставление.СписокВыбора.Количество() > 0;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюКонтактаВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюКонтактаВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Возможность ввода ""%1"" будет добавлена для всех %2.
			|Продолжить?'"), ВыбранныйЭлемент.Значение, ДополнительныеПараметры.МножественнаяФормаВладельца);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, ЗаголовокВопроса);
		
	Иначе
		
		ДобавитьКонтактнуюИнформациюКонтактаСервер(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.ИндексКонтакта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюКонтактаВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюКонтактаСервер(ДополнительныеПараметры.ДобавляемыйВид, ДополнительныеПараметры.ИндексКонтакта, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюКонтактаСервер(ДобавляемыйВид, ИндексКонтакта, УстановитьВыводВФормеВсегда = Ложь)
	
	ДобавляемыйТип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	ДанныеКонтакта = ДанныеКонтактныхЛиц[ИндексКонтакта];
	
	КоличествоЭлементовКоллекции = ДанныеКонтакта.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ДанныеКонтакта.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = ДанныеКонтакта.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ДобавляемыйТип;
	
	Если УстановитьВыводВФормеВсегда Тогда
		
		КонтактнаяИнформацияМедПреды.УстановитьФлагВыводитьВФормеВсегда(ДобавляемыйВид);
		
		НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("Вид", ДобавляемыйВид));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ВыводитьВФормеВсегда = Истина;
		КонецЕсли;
		
		Для ТекущийИндекс = 0 По ДанныеКонтактныхЛиц.Количество()-1 Цикл
			
			Если ТекущийИндекс = ИндексКонтакта Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеКИ = ДанныеКонтактныхЛиц[ТекущийИндекс].КонтактнаяИнформация.Добавить();
			ДанныеКИ.Вид = ДобавляемыйВид;
			ДанныеКИ.Тип = ДобавляемыйТип;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьЭлементыКонтактныхЛиц();
	ТекущийЭлемент = Элементы["ПредставлениеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексВставки];
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИКонтактаНажатие(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		
		ДополнительныеПараметры = Новый Структура("ЛогинSkype");
		ДополнительныеПараметры.ЛогинSkype = ДанныеКИ.Представление;
		Список = Новый СписокЗначений;
		Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"));
		Список.Добавить("НачатьЧат", НСтр("ru = 'Начать чат'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораИзМенюSkype", УправлениеКонтактнойИнформациейКлиент, ДополнительныеПараметры);
		ЭтотОбъект.ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
		Возврат;
		
	КонецЕсли;
	
	ОснованиеЗаполнения = Новый Структура("Контакт", ДанныеКонтактныхЛиц[ИндексКЛ].КонтактноеЛицо);
	
	ЗначенияЗаполнения = Новый Структура("ТипСобытия,ОснованиеЗаполнения", 
		КонтактнаяИнформацияМедПредыКлиент.ТипСобытияПоТипуКонтактнойИнформации(ДанныеКИ.Тип),
		ОснованиеЗаполнения);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаПриИзменении(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
		ДанныеКИ.ЗначенияПолей = "";
	Иначе
		ДанныеКИ.ЗначенияПолей = КонтактнаяИнформацияМедПредыВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ДанныеКИ.Представление, ДанныеКИ.Вид);
	КонецЕсли;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если ДанныеКИ.Представление <> Элемент.ТекстРедактирования Тогда
		ДанныеКИ.Представление = Элемент.ТекстРедактирования;
		Подключаемый_ПредставлениеКИКонтактаПриИзменении(Элемент);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
						ДанныеКИ.Вид,
						ДанныеКИ.ЗначенияПолей,
						ДанныеКИ.Представление,
						ДанныеКИ.Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКЛ", ИндексКЛ);
	ДополнительныеПараметры.Вставить("ИндексКИ", ИндексКИ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаОчистка(Элемент, СтандартнаяОбработка)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	ДанныеКИ.ЗначенияПолей = "";
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИКонтактаПриИзменении(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	ОжидаемыйВид = ?(ПустаяСтрока(ДанныеКИ.ЗначенияПолей), ДанныеКИ.Вид, Неопределено);
	КонтактнаяИнформацияМедПредыВызовСервера.УстановитьКомментарийКонтактнойИнформации(ДанныеКИ.ЗначенияПолей, ДанныеКИ.Комментарий, ОжидаемыйВид);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ДополнительныеПараметры.ИндексКЛ].КонтактнаяИнформация[ДополнительныеПараметры.ИндексКИ];
	
	ДанныеКИ.Представление	= РезультатЗакрытия.Представление;
	ДанныеКИ.ЗначенияПолей	= РезультатЗакрытия.КонтактнаяИнформация;
	ДанныеКИ.Комментарий	= РезультатЗакрытия.Комментарий;
	
	Модифицированность = Истина;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаСервере
Процедура ПрочитатьДанныеТегов()
	
	ДанныеТегов.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыТеги.Тег КАК Тег,
		|	КонтрагентыТеги.Тег.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтрагентыТеги.Тег.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Контрагенты.Теги КАК КонтрагентыТеги
		|ГДЕ
		|	КонтрагентыТеги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыеДанныеТега = ДанныеТегов.Добавить();
		НавигационнаяСсылкаФС = "Тег_" + НовыеДанныеТега.ПолучитьИдентификатор();
		
		НовыеДанныеТега.Тег = Выборка.Тег;
		НовыеДанныеТега.ПометкаУдаления = Выборка.ПометкаУдаления;
		НовыеДанныеТега.ПредставлениеТега = ФорматированнаяСтрокаПредставленияТега(Выборка.Наименование, Выборка.ПометкаУдаления, НавигационнаяСсылкаФС);
		НовыеДанныеТега.ДлинаТега = СтрДлина(Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТегов()
	
	ФС = ДанныеТегов.Выгрузить(, "ПредставлениеТега").ВыгрузитьКолонку("ПредставлениеТега");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоТегов.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	Элементы.ОблакоТегов.Видимость	= ФС.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеТегов(ТекущийОбъект)
	
	ТекущийОбъект.Теги.Загрузить(ДанныеТегов.Выгрузить(,"Тег"));
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьТегНаСервере(Тег)
	
	Если ДанныеТегов.НайтиСтроки(Новый Структура("Тег", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Тег, "Наименование, ПометкаУдаления");
	
	СтрокаТегов = ДанныеТегов.Добавить();
	НавигационнаяСсылкаФС = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.Тег = Тег;
	СтрокаТегов.ПометкаУдаления = ДанныеТега.ПометкаУдаления;
	СтрокаТегов.ПредставлениеТега = ФорматированнаяСтрокаПредставленияТега(ДанныеТега.Наименование, ДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаТегов.ДлинаТега = СтрДлина(ДанныеТега.Наименование);
	
	ОбновитьЭлементыТегов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьТегНаСервере(знач ЗаголовокТега)
	
	Тег = НайтиСоздатьТег(ЗаголовокТега);
	ПрикрепитьТегНаСервере(Тег);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьТег(Знач ЗаголовокТега)
	
	Тег = Справочники.Теги.НайтиПоНаименованию(ЗаголовокТега, Истина);
	
	Если Тег.Пустая() Тогда
		
		ТегОбъект = Справочники.Теги.СоздатьЭлемент();
		ТегОбъект.Наименование = ЗаголовокТега;
		ТегОбъект.Записать();
		Тег = ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Тег;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ОбычныйШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеТега + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		ПрикрепитьТегНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьТегНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаТега;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиКонтрагента

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьВсеПроверки(Форма)
	
	СформироватьПредставлениеПроверкиДублей(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиДублей(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		
		
		МассивДублей = ПолучитьДублиКонтрагентаСервер(СокрЛП(Объект.ИНН), СокрЛП(Объект.КПП), Объект.Ссылка);
		
		КоличествоДублей = МассивДублей.Количество();
		
		Если КоличествоДублей > 0 Тогда
			
			СтруктураПараметровСообщенияОДублях = Новый Структура;
			СтруктураПараметровСообщенияОДублях.Вставить("ИННиКПП", ?(ЭтоЮрЛицо(Объект.ТипКонтрагента), НСтр("ru = 'ИНН и КПП'"), НСтр("ru = 'ИНН'")));
			
			Если КоличествоДублей = 1 Тогда
				СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", НСтр("ru = 'один'"));
				СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
			ИначеЕсли КоличествоДублей < 5 Тогда
				СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", КоличествоДублей);
				СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
			Иначе
				СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", КоличествоДублей);
				СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
			КонецЕсли;
			
			ОписаниеОшибки = НСтр("ru = 'С таким [ИННиКПП] есть [КоличествоДублей] [СклонениеКонтрагентов]'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ОписаниеОшибки, СтруктураПараметровСообщенияОДублях);
			
		КонецЕсли;
	КонецЕсли;
	
	Форма.ПредставлениеПроверкиДублей = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоКонтрагента, , "ПоказатьДубли");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДублиКонтрагентаСервер(ИНН, КПП, ИсключаяСсылку)
	
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИННКПП(ИНН, КПП, ИсключаяСсылку);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(ВидКонтрагента)
	
	Возврат ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ЮридическоеЛицо");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагентов(Форма)
	
	Объект = Форма.Объект;
	
	Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		(Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ЮридическоеЛицо"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаголовкиСвернутогоОтображенияГрупп

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЮридическихДанных(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ЮридическоеЛицо") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Юр.лицо'"));
	ИначеЕсли Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ИндивидуальныйПредприниматель") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ИП'"));
	ИначеЕсли Объект.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.ФизическоеЛицо") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Физ.лицо'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН'") + " " + Объект.ИНН);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН...'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ЮридическиеДанные", ДинамическиеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДополнительнойИнформации

&НаСервере
Процедура ПрочитатьДанныеПанелиДопИнформации()
	
	Элементы.ПанельДополнительнойИнформации.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	КрупныйШрифт = Новый Шрифт(,11);
	МелкийШрифт  = Новый Шрифт(,8);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	// 4. Последнее событие
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Визиты.Ссылка КАК Событие,
	               |	Визиты.Дата КАК Дата
	               |ИЗ
	               |	Документ.Визит КАК Визиты
	               |ГДЕ
	               |	Визиты.Контрагент = &Контрагент
	               |	И Визиты.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Визиты.Ссылка.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		НавСсылка = ПолучитьНавигационнуюСсылку(Выборка.Событие);
	Иначе
		Дата = '00010101';
		НавСсылка = "";
	КонецЕсли;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(НСтр("ru='Последнее событие'") + " ");
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Формат(Дата, "Л=ru_RU; ДЛФ=D; ДП=<нет>"), , , , НавСсылка));
	
	Элементы.ПоследнееСобытие.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, КрупныйШрифт, ЦветаСтиля.ТекстВторостепеннойНадписи);
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияКонтрагентаМедПреды

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияМедПреды.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияМедПредыКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияМедПредыКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияМедПредыКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияМедПредыКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияМедПредыКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияМедПредыВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияМедПредыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
