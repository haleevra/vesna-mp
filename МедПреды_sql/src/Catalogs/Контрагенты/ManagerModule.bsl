#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// При положительном значении реквизита формы ПоддержкаGoogle.ЗагружатьКонтактыИзGoogle
// логика данного обработчика переопределяется вызовом "ОбменСGoogleВызовСервера.СписокАвтоПодбораКонтакта()"
// См. также описание "ОбменСGoogleКлиент.Подключаемый_АвтоПодбор"
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Группы Тогда
		
		Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
			Параметры.Отбор.Вставить("Недействителен", Ложь);
		КонецЕсли;
		
	Иначе
		
		Для Каждого КлючИЗначение Из Параметры.Отбор Цикл
			НайденныйРеквизит = Метаданные.Справочники.Контрагенты.Реквизиты.Найти(КлючИЗначение.Ключ);
			Если НайденныйРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НайденныйРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Параметры.Отбор.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ГруппаДоступа");
	РедактируемыеРеквизиты.Добавить("ДатаСоздания");
	РедактируемыеРеквизиты.Добавить("Недействителен");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#КонецОбласти

#Область ПроверкаДублей

//Функция определяет наличие дублей у контрагента.
// ИНН - ИНН проверяемого контрагента, Тип - Строка(12)
// КПП - КПП проверяемого контрагента, Тип - Строка(9)
// Ссылка - Сам проверяемый контрагент, Тип - СправочникСсылка.Контрагенты
Функция ПроверитьДублиСправочникаКонтрагентыПоИННКПП(Знач ИНН, Знач КПП, ИсключаяСсылку = Неопределено, ПроверкаПриЗаписи = Ложь) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	//Если записываем элемент, то сначала проверим наличие дублей
	//в регистре. Операция выполняется только при событии объекта ПередЗаписью
	//В интерактивной проверке дублей не применяется, 
	//т.к. на регистр устанавливаются исключительные блокировки.
	Если ПроверкаПриЗаписи Тогда
		Дубли = ЕстьЗаписиВРегистреДублей(ИНН, КПП, ИсключаяСсылку);
	КонецЕсли;
	
	//Если при записи элемента ничего не нашлось в регистре дублей, 
	//или при интерактивной проверке выполним поиск дублей по справочнику Контрагенты
	Если Дубли.Количество() = 0 Тогда
		
		Запрос.Текст = 	"ВЫБРАТЬ
		               	|	Контрагенты.Ссылка
		               	|ИЗ
		               	|	Справочник.Контрагенты КАК Контрагенты
		               	|ГДЕ
		               	|	НЕ Контрагенты.ЭтоГруппа
		               	|	И НЕ Контрагенты.Ссылка = &Ссылка
		               	|	И Контрагенты.ИНН = &ИНН
		               	|	И Контрагенты.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
		Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
		Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДублей = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока ВыборкаДублей.Следующий() Цикл
			Дубли.Добавить(ВыборкаДублей.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Дубли;
	
КонецФункции

// Процедура возвращает массив дублей по записям в регистре Наличие дублей контрагентов
//На вход получает ИНН, КПП и ссылку на контрагента
Функция ЕстьЗаписиВРегистреДублей(ИНН, КПП, ИсключаяСсылку = Неопределено) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
	Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
	Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.Контрагент КАК Ссылка
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|ГДЕ
	|	НЕ НаличиеДублейУКонтрагентов.Контрагент = &Ссылка
	|	И НаличиеДублейУКонтрагентов.КПП = &КПП
	|	И НаличиеДублейУКонтрагентов.ИНН = &ИНН";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДублей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДублей.Следующий() Цикл
		Дубли.Добавить(ВыборкаДублей.Ссылка);
	КонецЦикла;
	
	Возврат Дубли;
	
КонецФункции

// Процедура делает движения в регистре дублей
// Ссылка - ссылка на эелемнт справочника Контрагенты
// ИНН - ИНН записываемого контрагента
// КПП - КПП записываемого контрагента
// НужноУдалить:
//				Истина - удалить запись по переданному контрагенту
//				Ложь   - сделать запись по переданному контрагенту
Процедура ВыполнитьДвиженияПоРегиструДублей(Ссылка, ИНН = "", КПП = "", НужноУдалить) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НаличиеДублейУКонтрагентов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Контрагент = Ссылка;
	МенеджерЗаписи.ИНН        = ИНН;
	МенеджерЗаписи.КПП        = КПП;
	
	МенеджерЗаписи.Прочитать();
	
	ЗаписьСуществует = МенеджерЗаписи.Выбран();
	
	Если НужноУдалить И ЗаписьСуществует Тогда
		МенеджерЗаписи.Удалить();
	ИначеЕсли Не НужноУдалить И НЕ ЗаписьСуществует Тогда
		
		МенеджерЗаписи.Контрагент = Ссылка;
		МенеджерЗаписи.ИНН        = ИНН;
		МенеджерЗаписи.КПП        = КПП;
		
		МенеджерЗаписи.Активность = Истина;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КонтактнаяИнформация";
	КомандаПечати.Представление = НСтр("ru = 'Контактная информация'");
	КомандаПечати.Порядок = 1;
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонтактнойИнформации";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли