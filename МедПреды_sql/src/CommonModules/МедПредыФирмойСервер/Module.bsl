
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередДобавлениемПодсистемы(Описание) Экспорт
	
	Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмойБазовая") Тогда
		
		Описание.Имя = "УправлениеНебольшойФирмойБазовая";
		
	Иначе
		
		Описание.Имя = "УправлениеНебольшойФирмой";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует параметр сеанса ЭтоПервыйЗапуск
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	
	
КонецПроцедуры //УстановкаПараметровСеанса_ЭтоПервыйЗапуск()

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииУсловногоОформления

// Процедура устанавливает условное оформление в динамических списках
// для колонки "Дата"
//
Процедура УстановитьОформлениеКолонкиДата(ДинСписок) Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата"
			ИЛИ ЭлементУсловногоОформления.Представление = "Формат поля Дата (сегодня - только время)" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементОформления = ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "Формат поля Дата (сегодня - только время)";
	ЭлементОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата";
	
	ЭлементОформления.Использование = Истина;
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=Ч:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	
КонецПроцедуры // УстановитьОформлениеКолонкиДата()

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ОбъектСОшибкой, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь, МассивСообщений = Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		// Платформа 8.2.15
		
	Иначе
		
		Если ИмяТабличнойЧасти <> Неопределено Тогда
			Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
		ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
			Сообщение.Поле = Поле;
		КонецЕсли;
		
		Сообщение.УстановитьДанные(ОбъектСОшибкой);
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
	// Розница.ОтрицательныеОстатки
	Если МассивСообщений <> Неопределено Тогда
		МассивСообщений.Добавить(Новый Структура("Текст, Поле", Сообщение.Текст, Сообщение.Поле));
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибке()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокументаПоСсылке(ИмяРеквизита, СсылкаНаДокумент) Экспорт

	МетаданныеДокумента = СсылкаНаДокумент.Метаданные();
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	ПорядковыйНомер = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ПорядковыйНомер <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Процедура записывает новую настройку пользователя.
//
Процедура УстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		
		Пользователь = Пользователи.АвторизованныйПользователь();
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Пользователь.Использование	= Истина;
	НаборЗаписей.Отбор.Пользователь.Значение		= Пользователь;
	НаборЗаписей.Отбор.Настройка.Использование		= Истина;
	НаборЗаписей.Отбор.Настройка.Значение			= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];

	Запись = НаборЗаписей.Добавить();

	Запись.Пользователь	= Пользователь;
	Запись.Настройка	= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];
	Запись.Значение		= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки].ТипЗначения.ПривестиЗначение(ЗначениеНастройки);
	
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // УстановитьНастройкуПользователя()

// Функция возвращает связанных Сотрудников пользователя для переданной записи
//
// Пользователь - (Справочник.Пользователи) Пользователь, для которого получаем таблицы значений с записями
//
Функция ПолучитьСотрудниковПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПользователя.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
		|ГДЕ
		|	СотрудникиПользователя.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиПользователя.Сотрудник.Наименование";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат Результат;
	
КонецФункции // ПолучитьСотрудниковПользователя()

// Процедура устанавливает условное оформление.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	
	ШрифтВыделения = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтВыделения);
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = "Выделение основного элемента";
	
КонецПроцедуры

// Функция получает наибольший общий делитель двух чисел.
//
Функция ПолучитьНОД(а, б)
	
	Возврат ?(б = 0, а, ПолучитьНОД(б, а % б));
	
КонецФункции // ПолучитьНОД()

// Функция получает наибольший общий делитель для массива.
//
Функция ПолучитьНОДДляМассива(МассивЧисел, Кратность) Экспорт
	
	Если МассивЧисел.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	НОД = МассивЧисел[0] * Кратность;
	
	Для каждого Сч Из МассивЧисел Цикл
		НОД = ПолучитьНОД(НОД, Сч * Кратность);
	КонецЦикла;
	
	Возврат НОД;
	
КонецФункции // ПолучитьНОДДляМассива()

// Функция проверяет установлен ли пользователю профиль.
//
Функция ПользователюУстановленПрофиль(Пользователь = Неопределено, ИдентификаторПрофиля = "", Профиль = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;

	Если Профиль = Неопределено Тогда
		Профиль = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПрофиля));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Профиль", Профиль);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	(НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь
	|	И (ГруппыДоступаПользователи.Ссылка.Профиль = &Профиль
	|			ИЛИ ГруппыДоступаПользователи.Ссылка.Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПользователюУстановленПрофиль()

// Функция проверяет административные права пользователей
//
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	// Используется как замена:
	// УправлениеНебольшойФирмойСервер.ПользователюУстановленПрофиль(, , ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор"))
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь, ПроверятьПраваАдминистрированияСистемы, УчитыватьПривилегированныйРежим);
	
КонецФункции //ЭтоПолноправныйПользователь()

// Процедура добавляет значения структуры в список значений
//
// СписокЗначений - список значений, в который будут добавлены значения структуры;
// СтруктураСоЗначениями - структура значения которой будут добавлены в список значений;
// ДобавлятьДубликаты - флаг, который регулирует добавление 
//
Процедура ЗначенияСтруктурыВСписокЗначений(СписокЗначений, СтруктураСоЗначениями, ДобавлятьДубликаты = Ложь) Экспорт
	
	Для каждого ЭлементСтруктуры Из СтруктураСоЗначениями Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСтруктуры.Значение) ИЛИ 
			(НЕ ДобавлятьДубликаты И НЕ СписокЗначений.НайтиПоЗначению(ЭлементСтруктуры.Значение) = Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокЗначений.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры // ЗначенияСтруктурыВСписокЗначений()

// По указанному контрагенту получает контактные лица этого контрагента
//
Функция ПолучитьКонтактныеЛицаКонтрагента(Контрагент) Экспорт
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	Запрос = Новый Запрос("Выбрать * Из Справочник.КонтактныеЛица Как КонтактныеЛица Где КонтактныеЛица.Владелец = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокКонтактныхЛиц.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СписокКонтактныхЛиц;
	
КонецФункции // ПолучитьКонтактныеЛицаКонтрагента()

// Подписка на события при копировании документа.
//
Процедура ПриКопированииОбъекта(Источник) Экспорт
	
	Если НЕ ПустаяСтрока(Источник.Комментарий) Тогда
		Источник.Комментарий = "";
	КонецЕсли;
	
КонецПроцедуры // ПриКопированииОбъекта()

// Получает текст представления строки ТЧ для отображении в поле Содержание.
//
Функция ПолучитьТекстСодержания(Номенклатура, Характеристика = Неопределено) Экспорт
	
	ШаблонСодержание = МедПредыФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						?(ЗначениеЗаполнено(Номенклатура.НаименованиеПолное), Номенклатура.НаименованиеПолное, Номенклатура.Наименование),
						Характеристика, Номенклатура.Артикул);
	
	Возврат ШаблонСодержание;
	
КонецФункции // ПолучитьДанныеСодержаниеНачалоВыбора()

// Получает текст разделителя для формирования пакетного запроса.
//
Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

// Возвращает массив заказов, полученных из указанных документов
Функция МассивЗаказов(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктВыполненныхРаботРаботыИУслуги.ЗаказПокупателя КАК Заказ
	|ПОМЕСТИТЬ Вт_Заказы
	|ИЗ
	|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
	|ГДЕ
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервированиеЗапасов.ЗаказПокупателя
	|ИЗ
	|	Документ.РезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	РезервированиеЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетПереработчика.ДокументОснование
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|ГДЕ
	|	ОтчетПереработчика.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вт_Заказы.Заказ
	|ИЗ
	|	Вт_Заказы КАК Вт_Заказы");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ") Цикл
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Функция - Ссылка на двоичные данные файла.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, который
//                       используется при получении двоичных данных файла.
// 
// Возвращаемое значение:
//   - Строка - адрес во временном хранилище; 
//   - Неопределено, если не удалось получить данные.
//
Функция СсылкаНаДвоичныеДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // СсылкаНаДвоичныеДанныеФайла()

// Функция возвращает двоичные данные используя API БСП.
//
// Назначение функции:
//  проглот ВызватьИсключение, рекомендуется использовать в тех случаях,
//  когда отсутствие файла не должно блокировать работу систему. 
//
//  Например, если нет данных картинки для номенклатуры, 
//  Формирование прайс-листа останавливаться не должно.
//
Функция ПолучитьДвоичныеДанныеФайла(ФайлКартинки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Возврат ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинки);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ПолучитьДвоичныеДанныеФайла()

#КонецОбласти

#Область ПроцедурыИФункции

// Функция получает таблицу из временной таблицы.
//
Функция ТаблицаИзВременнойТаблицы(МенеджерВременныхТаблиц, Таблица) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ *
	|	ИЗ " + Таблица + " КАК Таблица");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ТаблицаИзВременнойТаблицы()

// Функция в зависимости от признака ведения учета по компании
// компанию-организацию или организацию документа.
//
// Параметры:
//	Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  СправочникСсылка.Организация - ссылка на организацию.
//
Функция ПолучитьОрганизацию(Организация) Экспорт
	
	Возврат ?(Константы.УчетПоКомпании.Получить(), Константы.Компания.Получить(), Организация);
	
КонецФункции // ПолучитьОрганизацию()

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которой определяется система налогообложения
//	Дата - Дата определения системы налогообложения
//
Функция НалогообложениеНДС(Организация, Склад = Неопределено, Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Запрос.УстановитьПараметр("Дата",Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
	|ГДЕ
	|	Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)";
	
	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НалогообложениеНДС = Выборка.НалогообложениеНДС;
	КонецЕсли;
	
	Возврат НалогообложениеНДС;
	
КонецФункции // НалогообложениеНДС()

//Процедура устанавливает функциональную опцию ФункциональнаяОпцияУчетПоНесколькимСкладам и ФункциональнаяОпцияУчетПоНесколькимПодразделениям 
// при записи второго склада / подразделения в форме объекта или списка справочника СтруктурныеЕдиницы
Процедура ПроверитьУстановитьФОУчетПоНесколькимСкладамПодразделениям(ТипСтруктурнойЕдиницы) Экспорт
	
	Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		//Установим ФО УчетПоНесколькимПодразделениям, если записано больше одного подразделения
		ТекущееЗначениеНесколькоПодразделений = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
		Если НЕ ТекущееЗначениеНесколькоПодразделений Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК КоличествоПодразделений
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
			|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.КоличествоПодразделений > 1 Тогда
				Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Установить(Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Установим ФО УчетПоНесколькимСкладам, если записано больше одного подразделения
		ТекущееЗначениеНесколькоСкладов = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
		Если НЕ ТекущееЗначениеНесколькоСкладов Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК КоличествоСкладов
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
			|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.КоличествоСкладов > 1 Тогда
				Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ИнформационнаяПанель

// Получает необходимые данные для вывода в информационную панель списка.
//
Функция ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели) Экспорт
	
	СписокПолейКИ = "";
	ТекстЗапроса = "";
	
	Запрос = Новый Запрос;
	ПорядокЗапроса = 0;
	Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
		
		СписокПолейКИ = "Телефон,ЭлПочта,Факс,ФактАдрес,ЮрАдрес,ПочтовыйАдрес,АдресДоставки,ДругаяИнформация";
		СформироватьТекстЗапросаКонтрагентыИнфПанель(ТекстЗапроса);
		
		ПорядокЗапроса = ПорядокЗапроса + 1;
		ПараметрыИнфПанели.Контрагент = ПорядокЗапроса;
		
		Запрос.УстановитьПараметр("Контрагент", ТекущийРеквизитКИ);
		
		Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
			
			СписокПолейКИ = СписокПолейКИ + ",Долг,НашДолг";
			СформироватьТекстЗапросаВзаиморасчетыИнфПанель(ТекстЗапроса);
			
			ПорядокЗапроса = ПорядокЗапроса + 1;
			ПараметрыИнфПанели.Взаиморасчеты = ПорядокЗапроса;
			
			ПараметрыВзаиморасчетов = ИнформационнаяПанельПолучитьПараметрыВзаиморасчетов();
			Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыВзаиморасчетов.СписокОрганизаций);
			Запрос.УстановитьПараметр("СписокТиповРасчетов", ПараметрыВзаиморасчетов.СписокТиповРасчетов);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
		
		СписокПолейКИ = ?(ПустаяСтрока(СписокПолейКИ), "ТелефонКЛ,ЭлПочтаКЛ", СписокПолейКИ + ",ТелефонКЛ,ЭлПочтаКЛ");
		СформироватьТекстЗапросаКонтактныеЛицаИнфПанель(ТекстЗапроса);
		
		ПорядокЗапроса = ПорядокЗапроса + 1;
		ПараметрыИнфПанели.КонтактноеЛицо = ПорядокЗапроса;
		
		Если ТипЗнч(ТекущийРеквизитКИ) = Тип("СправочникСсылка.Контрагенты") Тогда
			Запрос.УстановитьПараметр("КонтактноеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРеквизитКИ, "КонтактноеЛицо"));
		Иначе
			Запрос.УстановитьПараметр("КонтактноеЛицо", ТекущийРеквизитКИ);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеИП = Новый Структура(СписокПолейКИ);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
		
		ВыборкаКИ = Результат[ПараметрыИнфПанели.Контрагент - 1].Выбрать();
		ДанныеИП = ПолучитьДанныеКонтрагентыИнфПанель(ВыборкаКИ, ДанныеИП);
						
	КонецЕсли;
	
	Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
		ВыборкаКИ = Результат[ПараметрыИнфПанели.КонтактноеЛицо - 1].Выбрать();
		ДанныеИП = ПолучитьДанныеКонтактныеЛицаИнфПанель(ВыборкаКИ, ДанныеИП);
	КонецЕсли;
	
	Возврат ДанныеИП;
	
КонецФункции // ИнформационнаяПанельПолучитьДанные()

// Процедура формирует текст запроса по КИ контрагента.
//
Процедура СформироватьТекстЗапросаКонтрагентыИнфПанель(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВидыКИ.Ссылка КАК ВидКИ,
	|	ЕСТЬNULL(КонтрагентыКИ.Представление, """") КАК ПредставлениеКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКИ
	|		ПО (КонтрагентыКИ.Ссылка = &Контрагент)
	|			И ВидыКИ.Ссылка = КонтрагентыКИ.Вид
	|ГДЕ
	|	ВидыКИ.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
	|	И ВидыКИ.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентыКИ.НомерСтроки";
	
КонецПроцедуры // СформироватьТекстЗапросаКонтрагентыИнфПанель()

// Процедура формирует текст запроса по КИ контактного лица.
//
Процедура СформироватьТекстЗапросаКонтактныеЛицаИнфПанель(ТекстЗапроса)
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса +
		";
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВидыКИ.Ссылка КАК ВидКИ,
	|	ЕСТЬNULL(КонтактныеЛицаКИ.Представление, """") КАК ПредставлениеКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКИ
	|		ПО (КонтактныеЛицаКИ.Ссылка = &КонтактноеЛицо)
	|			И ВидыКИ.Ссылка = КонтактныеЛицаКИ.Вид
	|ГДЕ
	|	ВидыКИ.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛица)
	|	И ВидыКИ.Предопределенный";
	
КонецПроцедуры // СформироватьТекстЗапросаКонтактныеЛицаИнфПанель()

// Процедура формирует текст запроса по взаиморасчетам контрагента.
//
Процедура СформироватьТекстЗапросаВзаиморасчетыИнфПанель(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	";
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаОстаток + РасчетыСПокупателямиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКонтрагента,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаОстаток + РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ТипРасчетов В (&СписокТиповРасчетов)
	|				И Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки,
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ТипРасчетов В (&СписокТиповРасчетов)
	|				И Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки";
	
КонецПроцедуры // СформироватьТекстЗапросаВзаиморасчетыИнфПанель()

// Функция фозвращает необходимые параметры для расчета взаиморасчетов в инф. панели.
//
Функция ИнформационнаяПанельПолучитьПараметрыВзаиморасчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Организация");
	
	МассивТиповРасчетов = Новый Массив;
	МассивТиповРасчетов.Добавить(Перечисления.ТипыРасчетов.Аванс);
	МассивТиповРасчетов.Добавить(Перечисления.ТипыРасчетов.Долг);
	
	Возврат Новый Структура("СписокОрганизаций,СписокТиповРасчетов", МассивОрганизаций, МассивТиповРасчетов);
	
КонецФункции // ИнформационнаяПанельПолучитьПараметрыВзаиморасчетов()

// Получает необходимые данные о КИ контрагента.
//
Функция ПолучитьДанныеКонтрагентыИнфПанель(ВыборкаКИ, ДанныеИП)
	
	Пока ВыборкаКИ.Следующий() Цикл
		
		ПредставлениеКИ = СокрЛП(ВыборкаКИ.ПредставлениеКИ);
		Если ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента") Тогда
			ДанныеИП.Телефон = ?(ПустаяСтрока(ДанныеИП.Телефон), ПредставлениеКИ, ДанныеИП.Телефон + ", "+ ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента") Тогда
			ДанныеИП.ЭлПочта = ?(ПустаяСтрока(ДанныеИП.ЭлПочта), ПредставлениеКИ, ДанныеИП.ЭлПочта + ", "+ ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФаксКонтрагента") Тогда
			ДанныеИП.Факс = ?(ПустаяСтрока(ДанныеИП.Факс), ПредставлениеКИ, ДанныеИП.Факс + ", "+ ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента") Тогда
			ДанныеИП.ФактАдрес = ?(ПустаяСтрока(ДанныеИП.ФактАдрес), ПредставлениеКИ, ДанныеИП.ФактАдрес + Символы.ПС + ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента") Тогда
			ДанныеИП.ЮрАдрес = ?(ПустаяСтрока(ДанныеИП.ЮрАдрес), ПредставлениеКИ, ДанныеИП.ЮрАдрес + Символы.ПС + ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента") Тогда
			ДанныеИП.ПочтовыйАдрес = ?(ПустаяСтрока(ДанныеИП.ПочтовыйАдрес), ПредставлениеКИ, ДанныеИП.ПочтовыйАдрес + Символы.ПС + ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета") Тогда
			ДанныеИП.АдресДоставки = ?(ПустаяСтрока(ДанныеИП.АдресДоставки), ПредставлениеКИ, ДанныеИП.АдресДоставки + Символы.ПС + ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента") Тогда
			ДанныеИП.ДругаяИнформация = ?(ПустаяСтрока(ДанныеИП.ДругаяИнформация), ПредставлениеКИ, ДанныеИП.ДругаяИнформация + Символы.ПС + ПредставлениеКИ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеИП;
	
КонецФункции // ПолучитьДанныеКонтрагентыИнфПанель()

// Получает необходимые данные о КИ контактного лица.
//
Функция ПолучитьДанныеКонтактныеЛицаИнфПанель(ВыборкаКИ, ДанныеИП)
	
	Пока ВыборкаКИ.Следующий() Цикл
		
		ПредставлениеКИ = СокрЛП(ВыборкаКИ.ПредставлениеКИ);
		Если ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица") Тогда
			ДанныеИП.ТелефонКЛ = ?(ПустаяСтрока(ДанныеИП.ТелефонКЛ), ПредставлениеКИ, ДанныеИП.ТелефонКЛ + ", "+ ПредставлениеКИ);
		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица") Тогда
			ДанныеИП.ЭлПочтаКЛ = ?(ПустаяСтрока(ДанныеИП.ЭлПочтаКЛ), ПредставлениеКИ, ДанныеИП.ЭлПочтаКЛ + ", "+ ПредставлениеКИ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеИП;
	
КонецФункции // ПолучитьДанныеКонтактныеЛицаИнфПанель()

// Получает необходимые данные о взаиморасчетах контрагента.
//
Функция ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель(ВыборкаДолги, ДанныеИП)
	
	ВыборкаДолги.Следующий();
	
	ДанныеИП.Долг = ВыборкаДолги.ДолгКонтрагента;
	ДанныеИП.НашДолг = ВыборкаДолги.НашДолг;
	
	Возврат ДанныеИП;
	
КонецФункции // ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель()

// Получает необходимые данные о проценте скидки по дисконтной карте контрагента.
//
Функция ПолучитьЗаполнитьДанныеПроцентСкидкиПоДисконтнойКартеИнфПанель(ПроцентСкидкиПоДисконтнойКарте, СуммаПродажПоДисконтнойКарте, ПредставлениеПериода, ДанныеИП)
	
	ДанныеИП.ПроцентСкидкиПоДисконтнойКарте = ПроцентСкидкиПоДисконтнойКарте;
	ДанныеИП.СуммаПродажПоДисконтнойКарте = СуммаПродажПоДисконтнойКарте;
	ДанныеИП.ПредставлениеПериода = ПредставлениеПериода;
		
	Возврат ДанныеИП;
	
КонецФункции // ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель()

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСПолнотекстовымПоиском

// Функция определяет актуальность индекса поиска для справочника Контрагенты.
//
Функция ИндексПоискаОбновитьАвтоматичестки() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Возврат ((ТекущаяДата() - ПолнотекстовыйПоиск.ДатаАктуальности()) < 2*60*60);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ИндексПоискаОбновитьАвтоматичестки()

// Функция возвращает результат полнотекстового поиска.
//
Функция НайтиКонтрагентовПолнотекстовыйПоиск(Форма) Экспорт
	
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
	ТаблицаОснований = Форма.РеквизитФормыВЗначение("Основания");
	
	// Получить результаты поиска
	ТекстОшибки = НайтиКонтрагентов(Форма.СтрокаПолнотекстовогоПоиска, ТаблицаОснований);
	Если ТекстОшибки = Неопределено Тогда
		
		ОбновитьСписокВыбора(Форма.Элементы.СтрокаПолнотекстовогоПоиска.СписокВыбора, Форма.СтрокаПолнотекстовогоПоиска, 100);
		
		Сохранить("ИсторияПоискаКонтрагентов", Форма.Элементы.СтрокаПолнотекстовогоПоиска.СписокВыбора);
		
		// Вернуть таблицу оснований.
		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		
		// Установить отбор по списку найденных контрагентов
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.Список.Отбор,
			"Поиск",
			ТаблицаОснований.ВыгрузитьКолонку("Контрагент"),
			ВидСравненияКомпоновкиДанных.ВСписке,, Истина
		);
		
		Форма.Элементы.СтрокаПолнотекстовогоПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"Поиск",
		Справочники.Контрагенты.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,, Истина
	);
	
	Форма.Элементы.СтрокаПолнотекстовогоПоиска.ЦветФона = ЦветаСтиля.СобытиеОтказ;
	
	Возврат ТекстОшибки;
	
КонецФункции // НайтиКонтрагентовПолнотекстовыйПоиск()

// Осуществляет расширенный поиск контрагентов.
//
Функция НайтиКонтрагентов(СтрокаПоиска, СписокКонтрагентов)
	
	// Настроить параметры поиска
	ОбластьПоиска = Новый Массив;
	РазмерПорции = 100;
	СтрокаПоискаРасширенная = ?(ПустаяСтрока(СтрокаПоиска), СтрокаПоиска, СтрокаПоиска + "*");
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоискаРасширенная, РазмерПорции);
	ОбластьПоиска.Добавить(Метаданные.Справочники.Контрагенты);
	ОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛица);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ФизическиеЛица);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	ОбластьПоиска.Добавить(Метаданные.Справочники.БанковскиеСчета);
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	
	СписокПоиска.ПерваяЧасть();
	
	// Возврат, если поиск не результативен.
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	КонецЕсли;

	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	//сформировать список найденных контрагентов.
	СписокКонтрагентов.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;
	
	//Обработать по порциям результаты ППД
	Пока ЕстьСледующаяПорция Цикл
		
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			
			// Сформировать элемент результата
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			Основание = Элемент.Метаданные.ПредставлениеОбъекта + " """ +
			Элемент.Представление + """ - " + Элемент.Описание;
			
			// Контрагенты
			Если Элемент.Метаданные = Метаданные.Справочники.Контрагенты Тогда
				
				Контрагент = Элемент.Значение;
				Основание = НСтр("ru = 'Найдено: Контрагент - '") + Элемент.Описание;
				
			// Контактные лица
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.КонтактныеЛица Тогда
				
				Контрагент = Элемент.Значение.Владелец;
				ШаблонОснования = НСтр("ru = 'Найдено: Контактное лицо ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
				
			// Физические лица
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ФизическиеЛица Тогда
				
				ТаблицаНайденныхКонтрагентов = ПолучитьКонтрагентовПоФизЛицу(Элемент.Значение);
				Если ТаблицаНайденныхКонтрагентов <> Неопределено Тогда
					
					Для каждого СтрокаТаблицы Из ТаблицаНайденныхКонтрагентов Цикл
						ШаблонОснования = НСтр("ru = 'Найдено: Физическое лицо ""%1"" контактного лица ""%2"" - %3'");
						Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, СтрокаТаблицы.Представление, Элемент.Описание);
						Если НЕ ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском(СписокКонтрагентов, СтрокаТаблицы.Контрагент, Основание, ЭлементСсылка) Тогда
							Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			// Договоры
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ДоговорыКонтрагентов Тогда
				
				Контрагент = Элемент.Значение.Владелец;
				ШаблонОснования =  НСтр("ru = 'Найдено: Договор ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
				
			// Банковские счета
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.БанковскиеСчета Тогда
				
				Контрагент = Элемент.Значение.Владелец;
				ШаблонОснования =  НСтр("ru = 'Найдено: Банковский счет ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
				
			ИначеЕсли Не ЗначениеЗаполнено(Элемент.Значение.Контрагент) Тогда
				
				Продолжить;
				Контрагент = Элемент.Значение.Контрагент;
				
			КонецЕсли;
			
			Если НЕ Элемент.Метаданные = Метаданные.Справочники.ФизическиеЛица Тогда
				Если НЕ ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском(СписокКонтрагентов, Контрагент, Основание, ЭлементСсылка) Тогда
					Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	Если СписокКонтрагентов.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НайтиКонтрагентов()

// Получает массив контрагентов по физическому лицу, в массив попадают контрагенты,
// у которых физическое лицо указано в качестве контактного лица, а также все контрагенты,
// для которого физическое лицо указано в качестве контрагента.
//
// Параметры
//	Физлицо - Справочник.ФизическиеЛица - физлицо, для которого выполняется поиск
//
// Возвращаемое значение:
//	Массив - массив найденных по физлицу контрагентов.
//
Функция ПолучитьКонтрагентовПоФизЛицу(ФизЛицо)
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактныеЛица.Владелец КАК Контрагент,
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Представление
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Физлицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();
	
КонецФункции // ПолучитьКонтрагентовПоФизЛицу()

// Функция добавляет в список найденных полнотекстовым поиском контрагентов.
//
Функция ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском(СписокКонтрагентов, Контрагент, Основание, ЭлементСсылка)
	
	// Добавить элемент, если контрагента еще нет в списке найденных
	НайденнаяСтрока = СписокКонтрагентов.Найти(Контрагент, "Контрагент");
	Если НайденнаяСтрока = Неопределено Тогда
		
		//Ограничить количество возвращаемых контрагентов
		Если СписокКонтрагентов.Количество() > 100 Тогда
			Возврат Ложь;
		Иначе 
			Запись = СписокКонтрагентов.Добавить();
			Запись.Контрагент = Контрагент;
			Запись.Основание = Основание;
			Запись.Ссылка = ЭлементСсылка;
		КонецЕсли;
		
	Иначе
		
		Если (ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.КонтактныеЛица")
			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица")
			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета"))
			И ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		
			НайденнаяСтрока.Контрагент = Контрагент;
			НайденнаяСтрока.Основание = Основание;
			НайденнаяСтрока.Ссылка = ЭлементСсылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском()

// Обновляет индекс полнотекстового поиска.
//
Процедура ОбновитьИндексаПолнотекстовогоПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры // ОбновитьИндексаПолнотекстовогоПоиска()

// Процедура загружает историю поиска контрагентов.
//
Процедура Загрузить(ИмяНастройки, СписокВыбора) Экспорт
	
	ИсторияПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, "");
	Если ИсторияПоиска <> Неопределено Тогда
		СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
	КонецЕсли;
	
КонецПроцедуры // Загрузить()

// Процедура сохраняет историю поиска контрагентов.
//
Процедура Сохранить(ИмяНастройки, СписокВыбора)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, "", СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // Сохранить()

// Процедура обновляет список выбора поиска.
//
Процедура ОбновитьСписокВыбора(СписокВыбора, СтрокаПоиска, РазмерСпискаВыбора = 1000)
	
	// Удалим элемент из истории поиска если он там был
	НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		СписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	КонецЦикла;
	
	// И поставим его на первое место
	СписокВыбора.Вставить(0, СтрокаПоиска);
	Пока СписокВыбора.Количество() > РазмерСпискаВыбора Цикл
		СписокВыбора.Удалить(СписокВыбора.Количество() - 1);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокВыбора()

#КонецОбласти

#Область УправлениеПроведением

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + " КАК Организация,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
		
	// Установка организации в случае ведения учета по компании.
	СтруктураДополнительныеСвойства.ДляПроведения.Организация = МедПредыФирмойСервер.ПолучитьОрганизацию(СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	// Запрос, получающий данные учетной политики.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Константы.ФункциональнаяОпцияУчетПоПроектам КАК УчетПоПроектам,
	|	Константы.ФункциональнаяОпцияУчетПоЯчейкам КАК УчетПоЯчейкам,
	|	Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов КАК КассовыйМетодУчетаДоходовИРасходов,
	|	Константы.ФункциональнаяОпцияИспользоватьПартии КАК ИспользоватьПартии,
	|	Константы.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	Константы.ФункциональнаяОпцияИспользоватьТехоперации КАК ИспользоватьТехоперации,
	|	Константы.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	Константы.КонтрольОстатковСерийныхНомеров КАК ОстаткиСерийныхНомеров
	|ИЗ
	|	Константы КАК Константы");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные учетной политики.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.УчетнаяПолитика.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные учетной политики.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.УчетнаяПолитика, ВыборкаИзРезультатаЗапроса);
	
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				Если СтруктураОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи") Тогда
					НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("РежимЗаписи", СтруктураОбъект.ДополнительныеСвойства.РежимЗаписи);
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
			
		Иначе
				
			МетаданныеНабора = НаборЗаписей.Метаданные();
			Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеНабора)
				И ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение(МетаданныеНабора.ПолноеИмя()) Тогда
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеНабора.ПолноеИмя());
				МенеджерОбъекта.СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение(ПолноеИмяРегистра)
	
	РегистрыСПроцедурой = Новый Массив;
	
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ВнеоборотныеАктивы.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредства.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДоходыИРасходыНераспределенные.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДоходыИРасходыОтложенные.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводство.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗаказыПокупателей.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.Запасы.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыВРазрезеГТД.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыКПоступлениюНаСклады.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыКРасходуСоСкладов.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыНаСкладах.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыПереданные.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыПринятые.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.НДФЛДоходы.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ПотребностьВЗапасах.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ПримененныеВычетыПоНДФЛ.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РазмещениеЗаказов.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыПоНалогам.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыПоЭквайрингу.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПерсоналом.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПодотчетниками.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПокупателями.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСФондамиПоСтраховымВзносам.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СтраховыеВзносыДоходы.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СтраховыеВзносыПереданныеВПФР.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СуммовойУчетВРознице.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СерийныеНомера.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыВРемонте.ПолноеИмя());
	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыПереданныеВРемонте.ПолноеИмя());
	
	Возврат РегистрыСПроцедурой.Найти(ПолноеИмяРегистра) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияДвиженийРегистров

// Функция возвращает значение константы КонтролироватьОстаткиПриПроведении.
// 
Функция ВыполнитьКонтрольОстатков() Экспорт
	
	Возврат Константы.КонтролироватьОстаткиПриПроведении.Получить();
	
КонецФункции // ВыполнитьКонтрольОстатков()

// Выполняет движения регистра накопления ДенежныеСредства.
//
Процедура ОтразитьДенежныеСредства(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредства;
	
	Если Отказ
	 ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредства;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыСПодотчетниками.
//
Процедура ОтразитьРасчетыСПодотчетниками(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыСПодотчетниками = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПодотчетниками;
	
	Если Отказ
	 ИЛИ ТаблицаРасчетыСПодотчетниками.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыСПодотчетниками = Движения.РасчетыСПодотчетниками;
	ДвиженияРасчетыСПодотчетниками.Записывать = Истина;
	ДвиженияРасчетыСПодотчетниками.Загрузить(ТаблицаРасчетыСПодотчетниками);
	
КонецПроцедуры // ВыполнитьРасходПоРасчетамСПодотчетнымиЛицами()

// Выполняет движения регистра накопления РасчетыСКонтрагентами.
//
Процедура ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыСПокупателями = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
	
	Если Отказ
	 ИЛИ ТаблицаРасчетыСПокупателями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыСПокупателями = Движения.РасчетыСПокупателями;
	ДвиженияРасчетыСПокупателями.Записывать = Истина;
	ДвиженияРасчетыСПокупателями.Загрузить(ТаблицаРасчетыСПокупателями);
	
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыСКонтрагентами.
//
Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыСПоставщиками = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	
	Если Отказ
	 ИЛИ ТаблицаРасчетыСПоставщиками.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыСПоставщиками = Движения.РасчетыСПоставщиками;
	ДвиженияРасчетыСПоставщиками.Записывать = Истина;
	ДвиженияРасчетыСПоставщиками.Загрузить(ТаблицаРасчетыСПоставщиками);
	
КонецПроцедуры

// Выполняет движения регистра накопления Платежный календарь.
//
// Параметры:
//  ДокументОбъект - Текущий документ
//  Отказ - Булево - Флаг отказа проведения документа.
//
Процедура ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПлатежныйКалендарь = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлатежныйКалендарь;
	
	Если Отказ
	 ИЛИ ТаблицаПлатежныйКалендарь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПлатежныйКалендарь = Движения.ПлатежныйКалендарь;
	ДвиженияПлатежныйКалендарь.Записывать = Истина;
	ДвиженияПлатежныйКалендарь.Загрузить(ТаблицаПлатежныйКалендарь);
	
КонецПроцедуры // ОтразитьПлатежныйКалендарь()

// Выполняет движения регистра накопления Оплата счетов.
//
// Параметры:
//  ДокументОбъект - Текущий документ
//  Отказ - Булево - Флаг отказа проведения документа.
//
Процедура ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОплатаСчетовИЗаказов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаСчетовИЗаказов;
	
	Если Отказ
	 ИЛИ ТаблицаОплатаСчетовИЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОплатаСчетовИЗаказов = Движения.ОплатаСчетовИЗаказов;
	ДвиженияОплатаСчетовИЗаказов.Записывать = Истина;
	ДвиженияОплатаСчетовИЗаказов.Загрузить(ТаблицаОплатаСчетовИЗаказов);
	
КонецПроцедуры // ОтразитьОплатаСчетовИЗаказов()

// Процедура выполняет движения регистра накопления ДоходыИРасходыКассовыйМетод.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходыКассовыйМетод = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыКассовыйМетод;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходыКассовыйМетод.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыКассовыйМетод = Движения.ДоходыИРасходыКассовыйМетод;
	ДоходыИРасходыКассовыйМетод.Записывать = Истина;
	ДоходыИРасходыКассовыйМетод.Загрузить(ТаблицаДоходыИРасходыКассовыйМетод);
	
КонецПроцедуры // ОтразитьДоходыИРасходыКассовыйМетод()

// Процедура выполняет движения регистра накопления ДоходыИРасходыНераспределенные.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходыНераспределенные = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыНераспределенные;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходыНераспределенные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыНераспределенные = Движения.ДоходыИРасходыНераспределенные;
	ДоходыИРасходыНераспределенные.Записывать = Истина;
	ДоходыИРасходыНераспределенные.Загрузить(ТаблицаДоходыИРасходыНераспределенные);
	
КонецПроцедуры // ОтразитьДоходыИРасходыНераспределенные()

// Процедура выполняет движения регистра накопления ДоходыИРасходыОтложенные.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходыОтложенные = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыОтложенные;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходыОтложенные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыОтложенные = Движения.ДоходыИРасходыОтложенные;
	ДоходыИРасходыОтложенные.Записывать = Истина;
	ДоходыИРасходыОтложенные.Загрузить(ТаблицаДоходыИРасходыОтложенные);
	
КонецПроцедуры // ОтразитьДоходыИРасходыОтложенные()

// Выполняет движения регистра накопления НачисленияИУдержания.
//
Процедура ОтразитьНачисленияИУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаНачисленияИУдержания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачисленияИУдержания;
	
	Если Отказ
	 ИЛИ ТаблицаНачисленияИУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНачисленияИУдержания = Движения.НачисленияИУдержания;
	ДвиженияНачисленияИУдержания.Записывать = Истина;
	ДвиженияНачисленияИУдержания.Загрузить(ТаблицаНачисленияИУдержания);
	
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыСПерсоналом.
//
Процедура ОтразитьРасчетыСПерсоналом(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыСПерсоналом = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПерсоналом;
	
	Если Отказ
	 ИЛИ ТаблицаРасчетыСПерсоналом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыСПерсоналом = Движения.РасчетыСПерсоналом;
	ДвиженияРасчетыСПерсоналом.Записывать = Истина;
	ДвиженияРасчетыСПерсоналом.Загрузить(ТаблицаРасчетыСПерсоналом);
	
КонецПроцедуры

// Выполняет движения регистра сведений ПлановыеНачисленияИУдержания.
//
Процедура ОтразитьПлановыеНачисленияИУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПлановыеНачисленияИУдержания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеНачисленияИУдержания;
	
	Если Отказ
	 ИЛИ ТаблицаПлановыеНачисленияИУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПлановыеНачисленияИУдержания = Движения.ПлановыеНачисленияИУдержания;
	ДвиженияПлановыеНачисленияИУдержания.Записывать = Истина;
	ДвиженияПлановыеНачисленияИУдержания.Загрузить(ТаблицаПлановыеНачисленияИУдержания);
	
КонецПроцедуры

// Выполняет движения регистра сведений Сотрудники.
//
Процедура ОтразитьСотрудники(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСотрудники = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСотрудники;
	
	Если Отказ
	 ИЛИ ТаблицаСотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСотрудники = Движения.Сотрудники;
	ДвиженияСотрудники.Записывать = Истина;
	ДвиженияСотрудники.Загрузить(ТаблицаСотрудники);
	
КонецПроцедуры

// Выполняет движения регистра накопления Табель.
//
Процедура ОтразитьТабель(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаТабель = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТабель;
	
	Если Отказ
	 ИЛИ ТаблицаТабель.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТабель = Движения.Табель;
	ДвиженияТабель.Записывать = Истина;
	ДвиженияТабель.Загрузить(ТаблицаТабель);
	
КонецПроцедуры

// Выполняет движения регистра накопления ДоходыИРасходы.
//
Процедура ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДоходыИРасходы = Движения.ДоходыИРасходы;
	ДвиженияДоходыИРасходы.Записывать = Истина;
	ДвиженияДоходыИРасходы.Загрузить(ТаблицаДоходыИРасходы);
	
КонецПроцедуры

// Выполняет движения регистра накопления СуммовойУчетВРознице.
//
Процедура ОтразитьСуммовойУчетВРознице(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСуммовойУчетВРознице = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСуммовойУчетВРознице;
	
	Если Отказ
	 ИЛИ ТаблицаСуммовойУчетВРознице.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСуммовойУчетВРознице = Движения.СуммовойУчетВРознице;
	ДвиженияСуммовойУчетВРознице.Записывать = Истина;
	ДвиженияСуммовойУчетВРознице.Загрузить(ТаблицаСуммовойУчетВРознице);
	
КонецПроцедуры // ОтразитьСуммовойУчетВРознице()

// Выполняет движения регистра накопления РасчетыПоНалогам.
//
Процедура ОтразитьРасчетыПоНалогам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыПоНалогам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоНалогам;
	
	Если Отказ
	 ИЛИ ТаблицаРасчетыПоНалогам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыПоНалогам = Движения.РасчетыПоНалогам;
	ДвиженияРасчетыПоНалогам.Записывать = Истина;
	ДвиженияРасчетыПоНалогам.Загрузить(ТаблицаРасчетыПоНалогам);
	
КонецПроцедуры

// Выполняет движения регистра накопления ЗапасыКПоступлениюНаСклады.
//
Процедура ОтразитьЗапасыКПоступлениюНаСклады(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыКПоступлениюНаСклады = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыКПоступлениюНаСклады.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасыКПоступлениюНаСклады = Движения.ЗапасыКПоступлениюНаСклады;
	ДвиженияЗапасыКПоступлениюНаСклады.Записывать = Истина;
	ДвиженияЗапасыКПоступлениюНаСклады.Загрузить(ТаблицаЗапасыКПоступлениюНаСклады);
	
КонецПроцедуры

// Выполняет движения регистра накопления ЗапасыКРасходуСоСкладов.
//
Процедура ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыКРасходуСоСкладов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыКРасходуСоСкладов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасыКРасходуСоСкладов = Движения.ЗапасыКРасходуСоСкладов;
	ДвиженияЗапасыКРасходуСоСкладов.Записывать = Истина;
	ДвиженияЗапасыКРасходуСоСкладов.Загрузить(ТаблицаЗапасыКРасходуСоСкладов);
	
КонецПроцедуры

// Выполняет движения регистра накопления ЗапасыНаСкладах.
//
Процедура ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыНаСкладах = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыНаСкладах.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасыНаСкладах = Движения.ЗапасыНаСкладах;
	ДвиженияЗапасыНаСкладах.Записывать = Истина;
	ДвиженияЗапасыНаСкладах.Загрузить(ТаблицаЗапасыНаСкладах);
	
КонецПроцедуры // ОтразитьЗапасыНаСкладах()

// Выполняет движения регистра накопления ДенежныеСредстваВКассахККМ.
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДенежныеСредстваВКассахККМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ
	 ИЛИ ТаблицаДенежныеСредстваВКассахККМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредстваВКассахККМ = Движения.ДенежныеСредстваВКассахККМ;
	ДвиженияДенежныеСредстваВКассахККМ.Записывать = Истина;
	ДвиженияДенежныеСредстваВКассахККМ.Загрузить(ТаблицаДенежныеСредстваВКассахККМ);
	
КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

// Выполняет движения регистра накопления Запасы.
//
Процедура ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.Запасы;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаЗапасы);
	
КонецПроцедуры

// Выполняет движения по регистру Планы продаж.
//
Процедура ОтразитьПланыПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПланыПродаж = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыПродаж;
	
	Если Отказ
	 ИЛИ ТаблицаПланыПродаж.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПланыПродаж = Движения.ПланыПродаж;
	ДвиженияПланыПродаж.Записывать = Истина;
	ДвиженияПланыПродаж.Загрузить(ТаблицаПланыПродаж);
	
КонецПроцедуры // ОтразитьПланыПродаж()

// Выполняет движения по регистру ДенежныеСредстваПрогноз.
//
Процедура ОтразитьДенежныеСредстваПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДенежныеСредстваПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваПрогноз;
	
	Если Отказ
	 ИЛИ ТаблицаДенежныеСредстваПрогноз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБюджетДенежныеСредстваПрогноз = Движения.ДенежныеСредстваПрогноз;
	ДвиженияБюджетДенежныеСредстваПрогноз.Записывать = Истина;
	ДвиженияБюджетДенежныеСредстваПрогноз.Загрузить(ТаблицаДенежныеСредстваПрогноз);
	
КонецПроцедуры // ОтразитьДенежныеСредстваПрогноз()

// Выполняет движения регистра накопления ДоходыИРасходыПрогноз.
//
Процедура ОтразитьДоходыИРасходыПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходыПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыПрогноз;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходыПрогноз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДоходыИРасходыПрогноз = Движения.ДоходыИРасходыПрогноз;
	ДвиженияДоходыИРасходыПрогноз.Записывать = Истина;
	ДвиженияДоходыИРасходыПрогноз.Загрузить(ТаблицаДоходыИРасходыПрогноз);
	
КонецПроцедуры

// Выполняет движения регистра накопления ДоходыИРасходыПоЗаказамПрогноз.
//
Процедура ОтразитьДоходыИРасходыПоЗаказамПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходыПоЗаказамПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыПоЗаказамПрогноз;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходыПоЗаказамПрогноз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДоходыИРасходыПоЗаказамПрогноз = Движения.ДоходыИРасходыПоЗаказамПрогноз;
	ДвиженияДоходыИРасходыПоЗаказамПрогноз.Записывать = Истина;
	ДвиженияДоходыИРасходыПоЗаказамПрогноз.Загрузить(ТаблицаДоходыИРасходыПоЗаказамПрогноз);
	
КонецПроцедуры

// Выполняет движения по регистру ФинансовыйРезультатПрогноз.
//
Процедура ОтразитьФинансовыйРезультатПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаФинансовыйРезультатПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультатПрогноз;
	
	Если Отказ
	 ИЛИ ТаблицаФинансовыйРезультатПрогноз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияФинансовыйРезультатПрогноз = Движения.ФинансовыйРезультатПрогноз;
	ДвиженияФинансовыйРезультатПрогноз.Записывать = Истина;
	ДвиженияФинансовыйРезультатПрогноз.Загрузить(ТаблицаФинансовыйРезультатПрогноз);
	
КонецПроцедуры // ОтразитьФинансовыйРезультатПрогноз()

// Выполняет движения по регистру Закупки.
//
Процедура ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗакупки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗакупки;
	
	Если Отказ
	 ИЛИ ТаблицаЗакупки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗакупки = Движения.Закупки;
	ДвиженияЗакупки.Записывать = Истина;
	ДвиженияЗакупки.Загрузить(ТаблицаЗакупки);
	
КонецПроцедуры // ОтразитьЗакупки()

// Выполняет движения по регистру Запасы переданные.
//
Процедура ОтразитьЗапасыПереданные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыПереданные = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПереданные;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыПереданные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасыПереданные = Движения.ЗапасыПереданные;
	ДвиженияЗапасыПереданные.Записывать = Истина;
	ДвиженияЗапасыПереданные.Загрузить(ТаблицаЗапасыПереданные);
	
КонецПроцедуры // ОтразитьЗапасыПереданные()

// Выполняет движения по регистру Запасы принятые.
//
Процедура ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыПринятые = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПринятые;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыПринятые.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасыПринятые = Движения.ЗапасыПринятые;
	ДвиженияЗапасыПринятые.Записывать = Истина;
	ДвиженияЗапасыПринятые.Загрузить(ТаблицаЗапасыПринятые);
	
КонецПроцедуры // ОтразитьЗапасыПринятые()

// Выполняет движения по регистру Размещение заказов.
//
Процедура ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРазмещениеЗаказов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов;
	
	Если Отказ
	 ИЛИ ТаблицаРазмещениеЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРазмещениеЗаказов = Движения.РазмещениеЗаказов;
	ДвиженияРазмещениеЗаказов.Записывать = Истина;
	ДвиженияРазмещениеЗаказов.Загрузить(ТаблицаРазмещениеЗаказов);
	
КонецПроцедуры // ОтразитьРазмещениеЗаказов()

// Выполняет движения по регистру Продажи.
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПродажи = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ
	 ИЛИ ТаблицаПродажи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПродажи = Движения.Продажи;
	ДвиженияПродажи.Записывать = Истина;
	ДвиженияПродажи.Загрузить(ТаблицаПродажи);
	
КонецПроцедуры // ОтразитьПродажи()

// Выполняет движения по регистру Заказы покупателей.
//
Процедура ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗаказыПокупателей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПокупателей;
	
	Если Отказ
	 ИЛИ ТаблицаЗаказыПокупателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПокупателей = Движения.ЗаказыПокупателей;
	ДвиженияЗаказыПокупателей.Записывать = Истина;
	ДвиженияЗаказыПокупателей.Загрузить(ТаблицаЗаказыПокупателей);
	
КонецПроцедуры // ОтразитьЗаказыПокупателей()

// Выполняет движения по регистру ГрафикДвиженияЗапасов.
//
Процедура ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаГрафикДвиженияЗапасов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГрафикДвиженияЗапасов;
	
	Если Отказ
	 ИЛИ ТаблицаГрафикДвиженияЗапасов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияГрафикДвиженияЗапасов = Движения.ГрафикДвиженияЗапасов;
	ДвиженияГрафикДвиженияЗапасов.Записывать = Истина;
	ДвиженияГрафикДвиженияЗапасов.Загрузить(ТаблицаГрафикДвиженияЗапасов);
	
КонецПроцедуры // ОтразитьГрафикДвиженияЗапасов()

// Выполняет движения по регистру ЗаказыНаПроизводство.
//
Процедура ОтразитьЗаказыНаПроизводство(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗаказыНаПроизводство = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПроизводство;
	
	Если Отказ 
	 ИЛИ ТаблицаЗаказыНаПроизводство.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыНаПроизводство = Движения.ЗаказыНаПроизводство;
	ДвиженияЗаказыНаПроизводство.Записывать = Истина;
	ДвиженияЗаказыНаПроизводство.Загрузить(ТаблицаЗаказыНаПроизводство);
	
КонецПроцедуры // ОтразитьЗаказыНаПроизводство()

// Выполняет движения по регистру ПотребностьВЗапасах.
//
Процедура ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПотребностьВЗапасах = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах;
	
	Если Отказ 
	 ИЛИ ТаблицаПотребностьВЗапасах.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПотребностьВЗапасах = Движения.ПотребностьВЗапасах;
	ДвиженияПотребностьВЗапасах.Записывать = Истина;
	ДвиженияПотребностьВЗапасах.Загрузить(ТаблицаПотребностьВЗапасах);
	
КонецПроцедуры // ОтразитьПотребностьВЗапасах()

// Выполняет движения по регистру Заказы поставщикам.
//
Процедура ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗаказыПоставщикам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПоставщикам;
	
	Если Отказ
	 ИЛИ ТаблицаЗаказыПоставщикам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПоставщикам = Движения.ЗаказыПоставщикам;
	ДвиженияЗаказыПоставщикам.Записывать = Истина;
	ДвиженияЗаказыПоставщикам.Загрузить(ТаблицаЗаказыПоставщикам);
	
КонецПроцедуры // ОтразитьЗаказыПоставщикам()

// Выполняет движения по регистру Заказы поставщикам.
//
Процедура ОтразитьВыработкаВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыработкаВнеоборотныхАктивов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкаВнеоборотныхАктивов;
	
	Если Отказ
	 ИЛИ ТаблицаВыработкаВнеоборотныхАктивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработкаВнеоборотныхАктивов = Движения.ВыработкаВнеоборотныхАктивов;
	ДвиженияВыработкаВнеоборотныхАктивов.Записывать = Истина;
	ДвиженияВыработкаВнеоборотныхАктивов.Загрузить(ТаблицаВыработкаВнеоборотныхАктивов);
	
КонецПроцедуры // ОтразитьВыработкаВнеоборотныхАктивов()

// Выполняет движения регистра сведений СостоянияВнеоборотныхАктивов.
//
Процедура ОтразитьСостоянияВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСостоянияВнеоборотныхАктивов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияВнеоборотныхАктивов;
	
	Если Отказ
	 ИЛИ ТаблицаСостоянияВнеоборотныхАктивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостоянияВнеоборотныхАктивов = Движения.СостоянияВнеоборотныхАктивов;
	ДвиженияСостоянияВнеоборотныхАктивов.Записывать = Истина;
	ДвиженияСостоянияВнеоборотныхАктивов.Загрузить(ТаблицаСостоянияВнеоборотныхАктивов);
	
КонецПроцедуры

// Выполняет движения регистра сведений ПервоначальныеСведенияПараметрыАмортизации.
//
Процедура ОтразитьПараметрыВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПараметрыВнеоборотныхАктивов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыВнеоборотныхАктивов;
	
	Если Отказ
	 ИЛИ ТаблицаПараметрыВнеоборотныхАктивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПараметрыВнеоборотныхАктивов = Движения.ПараметрыВнеоборотныхАктивов;
	ДвиженияПараметрыВнеоборотныхАктивов.Записывать = Истина;
	ДвиженияПараметрыВнеоборотныхАктивов.Загрузить(ТаблицаПараметрыВнеоборотныхАктивов);
	
КонецПроцедуры

// Выполняет движения регистра сведений ОшибкиЗакрытияМесяца.
//
Процедура ОтразитьОшибкиЗакрытияМесяца(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОшибкиЗакрытияМесяца = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОшибкиЗакрытияМесяца;
	
	Если Отказ
	 ИЛИ ТаблицаОшибкиЗакрытияМесяца.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОшибкиЗакрытияМесяца = Движения.ОшибкиЗакрытияМесяца;
	ДвиженияОшибкиЗакрытияМесяца.Записывать = Истина;
	ДвиженияОшибкиЗакрытияМесяца.Загрузить(ТаблицаОшибкиЗакрытияМесяца);
	
КонецПроцедуры

// Выполняет движения регистра накопления АмортизацияВнеоборотныхАктивов.
//
Процедура ОтразитьВнеоборотныеАктивы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВнеоборотныеАктивы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВнеоборотныеАктивы;
	
	Если Отказ
	 ИЛИ ТаблицаВнеоборотныеАктивы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВнеоборотныеАктивы = Движения.ВнеоборотныеАктивы;
	ДвиженияВнеоборотныеАктивы.Записывать = Истина;
	ДвиженияВнеоборотныеАктивы.Загрузить(ТаблицаВнеоборотныеАктивы);
	
КонецПроцедуры

// Выполняет движения по регистру ЗаданияНаРаботу.
//
Процедура ОтразитьЗаданияНаРаботу(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗаданияНаРаботу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаданияНаРаботу;
	
	Если Отказ
	 ИЛИ ТаблицаЗаданияНаРаботу.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаданияНаРаботу = Движения.ЗаданияНаРаботу;
	ДвиженияЗаданияНаРаботу.Записывать = Истина;
	ДвиженияЗаданияНаРаботу.Загрузить(ТаблицаЗаданияНаРаботу);
	
КонецПроцедуры // ОтразитьРабочиеЗадания()

// Выполняет движения по регистру СдельныеНаряды.
//
Процедура ОтразитьСдельныеНаряды(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСдельныеНаряды = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСдельныеНаряды;
	
	Если Отказ
	 ИЛИ ТаблицаСдельныеНаряды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСдельныеНаряды = Движения.СдельныеНаряды;
	ДвиженияСдельныеНаряды.Записывать = Истина;
	ДвиженияСдельныеНаряды.Загрузить(ТаблицаСдельныеНаряды);
	
КонецПроцедуры // ОтразитьРабочиеЗадания()

// Выполняет движения по регистру ВыпускПродукции.
//
Процедура ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыпускПродукции = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыпускПродукции;
	
	Если Отказ
	 ИЛИ ТаблицаВыпускПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыпускПродукции = Движения.ВыпускПродукции;
	ДвиженияВыпускПродукции.Записывать = Истина;
	ДвиженияВыпускПродукции.Загрузить(ТаблицаВыпускПродукции);
	
КонецПроцедуры // ОтразитьВыпускПродукции()

// Выполняет движения регистра накопления АмортизацияВнеоборотныхАктивов.
//
Процедура ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыВРазрезеГТД = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыВРазрезеГТД;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыВРазрезеГТД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасыВРазрезеГТД = Движения.ЗапасыВРазрезеГТД;
	ДвиженияЗапасыВРазрезеГТД.Записывать = Истина;
	ДвиженияЗапасыВРазрезеГТД.Загрузить(ТаблицаЗапасыВРазрезеГТД);
	
КонецПроцедуры

// Выполняет движения регистра бухгалтерии Управленческий.
//
Процедура ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмойБазовая") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоОрганизаций > 2 Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ограничение базовой версии. В информационной базе могут быть введены только две организации.'"));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаУправленческий = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий;
	
	Если Отказ
	 ИЛИ ТаблицаУправленческий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУправленческий = Движения.Управленческий;
	ДвиженияУправленческий.Записывать = Истина;
	
	Для каждого СтрокаТаблицаУправленческий Из ТаблицаУправленческий Цикл
		ДвижениеУправленческий = ДвиженияУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеУправленческий, СтрокаТаблицаУправленческий);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения регистра накопления ЗакупкиДляКУДиР.
//
Процедура ОтразитьЗакупкиДляКУДиР(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗакупкиДляКУДиР = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗакупкиДляКУДиР;
	
	Если Отказ
	 ИЛИ ТаблицаЗакупкиДляКУДиР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗакупкиДляКУДиР = Движения.ЗакупкиДляКУДиР;
	ДвиженияЗакупкиДляКУДиР.Записывать = Истина;
	ДвиженияЗакупкиДляКУДиР.Загрузить(ТаблицаЗакупкиДляКУДиР);
	
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыСКонтрагентами.
//
Процедура ОтразитьРублевыеСуммыДокументовВВалюте(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРублевыеСуммыДокументовВВалюте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРублевыеСуммыДокументовВВалюте;
	
	Если Отказ
	 ИЛИ ТаблицаРублевыеСуммыДокументовВВалюте.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРублевыеСуммыДокументовВВалюте = Движения.РублевыеСуммыДокументовВВалюте;
	ДвиженияРублевыеСуммыДокументовВВалюте.Записывать = Истина;
	ДвиженияРублевыеСуммыДокументовВВалюте.Загрузить(ТаблицаРублевыеСуммыДокументовВВалюте);
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Выполняет движения по регистру ПродажиПоДисконтнымКартам.
//
Процедура ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПродажиПоДисконтнойКарте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоДисконтнойКарте;
	
	Если Отказ
	 ИЛИ ТаблицаПродажиПоДисконтнойКарте.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПродажиПоДисконтнойКарте = Движения.ПродажиПоДисконтнымКартам;
	ДвиженияПродажиПоДисконтнойКарте.Записывать = Истина;
	ДвиженияПродажиПоДисконтнойКарте.Загрузить(ТаблицаПродажиПоДисконтнойКарте);
	
КонецПроцедуры // ОтразитьПродажи()

# КонецОбласти

#Область РаботаССерийнымиНомерами

Процедура ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСерийныеНомераГарантии = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСерийныеНомераГарантии;
	
	Если Отказ
	 ИЛИ ТаблицаСерийныеНомераГарантии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСерийныеНомераГарантии = Движения.СерийныеНомераГарантии;
	ДвиженияСерийныеНомераГарантии.Записывать = Истина;
	ДвиженияСерийныеНомераГарантии.Загрузить(ТаблицаСерийныеНомераГарантии);
	
КонецПроцедуры

Процедура ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСерийныеНомераОстатки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСерийныеНомераОстатки;
	
	Если Отказ
	 ИЛИ ТаблицаСерийныеНомераОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСерийныеНомераОстатки = Движения.СерийныеНомера;
	ДвиженияСерийныеНомераОстатки.Записывать = Истина;
	ДвиженияСерийныеНомераОстатки.Загрузить(ТаблицаСерийныеНомераОстатки);
	
КонецПроцедуры // ОтразитьПродажи()

# КонецОбласти

#Область ТоварыВРемонте

Процедура ОтразитьТоварыВРемонте(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыВРемонте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыВРемонте;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыВРемонте.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТаблицаТоварыВРемонте = Движения.ЗапасыВРемонте;
	ДвиженияТаблицаТоварыВРемонте.Записывать = Истина;
	ДвиженияТаблицаТоварыВРемонте.Загрузить(ТаблицаЗапасыВРемонте);
	
КонецПроцедуры

Процедура ОтразитьТоварыПереданныеВРемонте(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасыПереданныеВРемонте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПереданныеВРемонте;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасыПереданныеВРемонте.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТаблицаТоварыПереданныеВРемонте = Движения.ЗапасыПереданныеВРемонте;
	ДвиженияТаблицаТоварыПереданныеВРемонте.Записывать = Истина;
	ДвиженияТаблицаТоварыПереданныеВРемонте.Загрузить(ТаблицаЗапасыПереданныеВРемонте);
	
КонецПроцедуры

# КонецОбласти

#Область АвтоматическиеСкидки

// Выполняет движения по регистру ПредоставленныеАвтоматическиеСкидки.
//
Процедура ОтразитьПредоставленныеАвтоматическиеСкидки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПредоставленныеАвтоматическиеСкидки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПредоставленныеАвтоматическиеСкидки;
	
	Если Отказ
	 ИЛИ ТаблицаПредоставленныеАвтоматическиеСкидки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПредоставленныеАвтоматическиеСкидки = Движения.ПредоставленныеАвтоматическиеСкидки;
	ДвиженияПредоставленныеАвтоматическиеСкидки.Записывать = Истина;
	ДвиженияПредоставленныеАвтоматическиеСкидки.Загрузить(ТаблицаПредоставленныеАвтоматическиеСкидки);
	
КонецПроцедуры // ОтразитьПродажи()

#КонецОбласти

#Область Биллинг

// Проверяет, возможно ли проведение указанной позиции в рамках договора обслуживания.
//
// Параметры:
//  Договор						 - СправочникСсылка.ДоговорыКонтрагентов - Договор обслуживания, по которому производится продажа.
//  ОбъектДоговораОбслуживания	 - СправочникСсылка.Номенклатура, ПланСчетовСсылка.Управленческий - Объект договора обслуживания, который проверяется.
//  Характеристика				 - СправочникСсылка.ХарактеристикиНоменклатуры - Характерситика проверяемой номенклатуры.
//                                 (по умолчанию = Неопределено)
// 
// Возвращаемое значение:
//   - Булево
//
Функция РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, ОбъектДоговораОбслуживания, Характеристика = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ Договор.ЭтоДоговорОбслуживания Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТарифныйПлан = Договор.ДоговорОбслуживанияТарифныйПлан;
	
	Если ТипЗнч(ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если Характеристика = Неопределено Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Строки = ТарифныйПлан.УчетНоменклатуры.НайтиСтроки(
			Новый Структура("Номенклатура,Характеристика", ОбъектДоговораОбслуживания, Характеристика)
		);
		
		НезапланированныеПозицииЗапрещать = ТарифныйПлан.НезапланированныеПозицииЗапрещать;
		
	ИначеЕсли ТипЗнч(ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий") Тогда
		
		Строки = ТарифныйПлан.УчетЗатрат.НайтиСтроки(
			Новый Структура("СтатьяЗатрат", ОбъектДоговораОбслуживания)
		);
		
		НезапланированныеПозицииЗапрещать = ТарифныйПлан.НезапланированныеЗатратыЗапрещать;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если Строки.Количество() <> 0 Тогда
		// Позиция явно запланирована к оказанию.
		Возврат Истина;
	КонецЕсли;
	
	// Это незапланированная позиция.
	
	Если НезапланированныеПозицииЗапрещать Тогда
		// Установлен запрет на проведение незапланированных позиций.
		Возврат Ложь;
	КонецЕсли;
	
	// Запрет на проведение незапланированных позиций не установлен.
	Возврат Истина;
	
КонецФункции

// Выполняет движения по регистру ВыполнениеДоговоровОбслуживания.
//
Процедура ОтразитьВыполнениеДоговораОбслуживания(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Если НЕ ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаВыполнениеДоговораОбслуживания") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыполнениеДоговораОбслуживания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыполнениеДоговораОбслуживания;
	
	Если Отказ ИЛИ ТаблицаВыполнениеДоговораОбслуживания.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДвиженияВыполнениеДоговоровОбслуживания = Движения.ВыполнениеДоговоровОбслуживания;
	ДвиженияВыполнениеДоговоровОбслуживания.Записывать = Истина;
	ДвиженияВыполнениеДоговоровОбслуживания.Загрузить(ТаблицаВыполнениеДоговораОбслуживания);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормирующиеТекстыСообщенийОбОшибкахПроведения

// Формирует строку представления контрагента.
//
// Параметры:
//  НоменклатураПредставление - Строка - представление номенклатуры.
//  ВидУчетаТовараПредставление - Строка - представление вида номенклатуры.
//  ХарактеристикаПредставление - Строка - представление характеристики.
//  СерияПредставление - Строка - представление серии.
//  СтадияПредставление - Строка - представление захода.
//
// Возвращаемое значение:
//  Строка - строка с представлением номенклатуры.
//
Функция ПредставлениеКонтрагента(КонтрагентПредставление,
	                             ДоговорПредставление = "",
	                             ДокументПредставление = "",
	                             ЗаказПредставление = "",
	                             ВидРасчетовПредставление = "") Экспорт
	
	СтрПредставление = СокрЛП(КонтрагентПредставление);
	
	Если ЗначениеЗаполнено(ДоговорПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДоговорПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДокументПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ЗаказПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРасчетовПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ВидРасчетовПредставление);
	КонецЕсли;
	
	Возврат СтрПредставление;
	
КонецФункции // ПредставлениеКонтрагента()

// Формирует строку представления кассы.
//
// Параметры:
//  НоменклатураПредставление - Строка - представление номенклатуры.
//  ВидУчетаТовараПредставление - Строка - представление вида номенклатуры.
//  ХарактеристикаПредставление - Строка - представление характеристики.
//  СерияПредставление - Строка - представление серии.
//  СтадияПредставление - Строка - представление захода.
//
// Возвращаемое значение:
//  Строка - строка с представлением номенклатуры.
//
Функция ПредставлениеПодотчетногоЛица(ПодотчетноеЛицоПредставление,
	                       			  ВалютаПредставление = "",
									  ДокументПредставление = "") Экспорт
	
	СтрПредставление = СокрЛП(ПодотчетноеЛицоПредставление);
	
	Если ЗначениеЗаполнено(ВалютаПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ВалютаПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДокументПредставление);
	КонецЕсли;    
	
	Возврат СтрПредставление;
	
КонецФункции // ПредставлениеНоменклатуры()

// Функция возвращает паспортные данные физического лица строкой, используемые
// в печатных формах.
//
// Параметры
//  СтруктураДанных – Структура – ссылка на ФизЛицо и дата
//                 
// Возвращаемое значение:
//   Строка      – Строка, содержащая паспортные данные
//
Функция ПолучитьПаспортныеДанныеСтрокой(СтруктураДанных) Экспорт

	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ФизЛицо) Тогда
		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	                      |	ДокументыФизическихЛицСрезПоследних.Серия,
	                      |	ДокументыФизическихЛицСрезПоследних.Номер,
	                      |	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	                      |	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
	                      |	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
	                      |ИЗ
	                      |	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	                      |			&НаДату,
	                      |			Физлицо = &Физлицо
	                      |				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних");
	
	Запрос.УстановитьПараметр("НаДату", СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("Физлицо", СтруктураДанных.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
	Иначе
		ПаспортныеДанные = РезультатЗапроса.Выгрузить()[0];
		ВидДокумента       = ПаспортныеДанные.ВидДокумента;
		Серия              = ПаспортныеДанные.Серия;
		Номер              = ПаспортныеДанные.Номер;
		ДатаВыдачи         = ПаспортныеДанные.ДатаВыдачи;
		КемВыдан           = ПаспортныеДанные.КемВыдан;
		НомерПодразделения = ПаспортныеДанные.КодПодразделения;
		
		Если НЕ (НЕ ЗначениеЗаполнено(ДатаВыдачи)
			И НЕ ЗначениеЗаполнено(ВидДокумента)
			И НЕ ЗначениеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда

			СтрокаПаспортныеДанные = НСтр("ru = '%ВидДокумента% Серия: %Серия%, № %Номер%, Выдан: %ДатаВыдачи% года, %КемВыдан%; № подр. %НомерПодразделения%'");
			
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%ВидДокумента%", ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", "));
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%Серия%", Серия);
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%Номер%", Номер);
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%ДатаВыдачи%", Формат(ДатаВыдачи,"ДЛФ=DD"));
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%КемВыдан%", КемВыдан);
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%НомерПодразделения%", НомерПодразделения);
			
			Возврат СтрокаПаспортныеДанные;

		Иначе
			Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

#КонецОбласти

#Область ПроцедурыИФункцииФормированияПечатныхФорм

// Процедура заполняет ФИО по наименованию сотрудника
//
Процедура ФамилияИнициалыПоНаименованию(ФИО, Наименование) Экспорт
	
	Если ПустаяСтрока(Наименование) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, " ");
	Фамилия		= МассивПодстрок[0];
	Имя 		= ?(МассивПодстрок.Количество() > 1, МассивПодстрок[1], "");
	Отчество	= ?(МассивПодстрок.Количество() > 2, МассивПодстрок[2], "");
	
	ФИО = МедПредыФирмойСервер.ПолучитьФамилиюИмяОтчество(Фамилия, Имя, Отчество, Истина);
	
КонецПроцедуры // ФИОНаименованиеСотрудника()

// Функция возвращает представление номенклатуры для печати.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика = Неопределено, Артикул = "", СерийныеНомера="")  Экспорт

	ДопХарактеристики = "";
	Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() И ЗначениеЗаполнено(Характеристика) Тогда
		Если ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			ПредставлениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "НаименованиеДляПечати");
		Иначе
			ПредставлениеХарактеристики = СокрЛП(Характеристика);
		КонецЕсли;
		ДопХарактеристики = ДопХарактеристики + ПредставлениеХарактеристики;
	КонецЕсли;
	
	АртикулНоменклатурыВСодержание = Константы.АртикулНоменклатурыВСодержание.Получить();
	Если АртикулНоменклатурыВСодержание Тогда
		
		СтрокаАртикул = СокрЛП(Артикул);
		Если ЗначениеЗаполнено(СтрокаАртикул) Тогда
			
			СтрокаАртикул = ", " + СтрокаАртикул;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаАртикул = "";
		
	КонецЕсли;
	
	ТекстВСкобках = "";
	Если ДопХарактеристики <> "" И СерийныеНомера<>"" Тогда
		ТекстВСкобках =  " (" + ДопХарактеристики + " "+СерийныеНомера + ")";
	ИначеЕсли ДопХарактеристики <> "" Тогда
		ТекстВСкобках =  " (" + ДопХарактеристики + ")";
	ИначеЕсли СерийныеНомера<>"" Тогда
		ТекстВСкобках =  " (" + СерийныеНомера + ")";
	КонецЕсли;
	
 	Если ТекстВСкобках<>"" ИЛИ ЗначениеЗаполнено(СтрокаАртикул) Тогда
		Возврат СокрЛП(Номенклатура) + ТекстВСкобках + СтрокаАртикул;
	Иначе
    	Возврат СокрЛП(Номенклатура);
	КонецЕсли;	 

КонецФункции // ПолучитьПредставлениеНоменклатурыДляПечати()

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ     - (ДокументСсылка), документ, чей номер надо получить для
//                 печати.
//
// Возвращаемое значение.
//  Строка       - номер документа для печати
//
Функция ПолучитьНомерНаПечать(НомерДокумента, Префикс) Экспорт

	Если НЕ ЗначениеЗаполнено(НомерДокумента) Тогда 
		Возврат 0;
	КонецЕсли;

	Номер = СокрЛП(НомерДокумента);
	
	// удаление префикса из номера документа
	Если СтрНайти(Номер, Префикс)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(Префикс)+1);
	КонецЕсли;
	
	ПрефиксОбмен = "";
			
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")
		И ЗначениеЗаполнено(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) Тогда		
		ПрефиксОбмен = СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());		
	КонецЕсли;
	
	// удаление префикса из номера документа
	Если СтрНайти(Номер, ПрефиксОбмен)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(ПрефиксОбмен)+1);
	КонецЕсли;
	
	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;

	Возврат Номер;

КонецФункции // ПолучитьНомерНаПечать()

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("КПП",						" КПП ");
	СоответствиеПараметров.Вставить("РегистрационныйНомер",		" ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("ПочтовыйАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("Факс",						" факс: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",						" в банке ");
	СоответствиеПараметров.Вставить("БИК",						" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",					" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",				" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = СтрНайти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ТипЗнч(СтрокаДополнения) = Тип("СправочникСсылка.Банки") Тогда
					СтрокаДополнения = СтрокаДополнения.Наименование;
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[СокрЛП(ИмяПараметра)];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ", ";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;

			Исключение

				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Не удалось определить значение параметра организации: '") + ИмяПараметра;
				Сообщение.Сообщить();

			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Стандартная функция форматирования прописи количества.
//
// Параметры:
//  Количество   - число, которое мы хотим форматировать.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
   	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
    КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо    - организация или физическое лицо, о котором собираются
//                 сведения
//  ДатаПериода  - дата, на которую выбираются сведения о ЮрФизЛице
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и
//                 отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, Факс, ЮридическийАдрес, Банк, БИК, КоррСчет, ТекстКорреспондента, НомерСчета, АдресБанка, ЭлектроннаяПочта");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.БанковскийСчетПоУмолчанию;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
	Если ТекБанковскийСчет.БанкРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкРасчетов";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,";
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,";
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда	
	
		Запрос.Текст = Запрос.Текст + "
		|	Организации.РегистрационныйНомер,
		|	Организации.СтранаРегистрации,";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	""""                          КАК НомерСчета,
		|	""""                          КАК ТекстКорреспондента,
		|	""""                          КАК Банк,
		|	""""                          КАК БИК,
		|	""""                          КАК КоррСчет,
		|	""""                          КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
		
	КонецЕсли;
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Сведения.Вставить("КодПоОКПО", 		"");
	Сведения.Вставить("КПП",       		"");
	Сведения.Вставить("Свидетельство",	"");
	
	Если НЕ (ЮрФизЛицо.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено) Тогда

		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		
		Если ЮрФизЛицо.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
			Сведения.КПП = Данные.КПП;
			
		ИначеЕсли ИмяСправочника = "Организации" Тогда
			
			Сведения.Свидетельство = НСтр("ru='свидетельство'") + " " + Данные.СвидетельствоСерияНомер + " " + НСтр("ru='от'") + " " + Формат(Данные.СвидетельствоДатаВыдачи, "ДЛФ=D");
			Сведения.Вставить("СвидетельствоСерияНомер", Данные.СвидетельствоСерияНомер);
			Сведения.Вставить("СвидетельствоДатаВыдачи", Данные.СвидетельствоДатаВыдачи);
			
		КонецЕсли;

	ИначеЕсли ИмяСправочника = "Организации" Или ИмяСправочника = "Контрагенты" Тогда
		
		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		Сведения.КПП       = Данные.КПП;
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда

		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			Факс = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
			
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
			Факс = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЭлПочта = Неопределено;
			
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			Факс = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			
		Иначе
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			Факс = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЭлПочта = Неопределено;
			
		КонецЕсли;
		
		Сведения.Вставить("Представление",	Данные.Наименование);
		Сведения.Вставить("ИНН",			Данные.ИНН);
		Сведения.Вставить("Телефоны",		ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Телефон));
		Сведения.Вставить("Факс", 			ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Факс));
		Сведения.Вставить("НомерСчета",		Данные.НомерСчета);
		Сведения.Вставить("Банк",			Данные.Банк);
		Сведения.Вставить("БИК",			Данные.БИК);
		Сведения.Вставить("АдресБанка",		Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",		Данные.КоррСчет);
		Сведения.Вставить("ТекстКорреспондента", Данные.ТекстКорреспондента);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЮрАдрес));
		Сведения.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ФактАдрес));
		Сведения.Вставить("ПочтовыйАдрес",	ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ПочтАдрес));
		
		Если ЗначениеЗаполнено(ЭлПочта) Тогда
			
			Сведения.Вставить("ЭлектроннаяПочта", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЭлПочта));
			
		КонецЕсли;
		
		Если ИмяСправочника = "Контрагенты" Тогда
			Сведения.Вставить("СтранаРегистрации",	Данные.СтранаРегистрации);
			Если ЗначениеЗаполнено(Данные.СтранаРегистрации) 
				И Данные.СтранаРегистрации<>Справочники.СтраныМира.Россия Тогда
				
				Сведения.Вставить("РегистрационныйНомер", Данные.РегистрационныйНомер);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			
			Сведения.ПолноеНаименование = Сведения.Представление;
			
		КонецЕсли;

	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект       - СправочникСсылка, объект контактной информации
//  ТипАдреса    - тип контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
	
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
		
		ТаблицаИсточник = "Организации";
		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ТаблицаИсточник = "ФизическиеЛица";
		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТаблицаИсточник = "Контрагенты";
		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		ТаблицаИсточник = "СтруктурныеЕдиницы";
		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ТаблицаИсточник = "Пользователи";
		
	Иначе 
		
		Возврат "";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Вид",	ВидИнформации);
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Ссылка = &Объект";

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), "", РезультатЗапроса.Выгрузить()[0].Представление);

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Стандартная для данной конфигурации функция форматирования сумм.
//
// Параметры: 
//  Сумма        - число, которое мы хотим форматировать 
//  Валюта       - ссылка на элемент справочника валют, если задан, то к в
//                 результирующую строку будет добавлено представление валюты
//  ЧН           - строка, представляющая нулевое значение числа
//  ЧРГ          - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Функция формирует представление суммы прописью в указанной валюте.
//
// Возвращаемое значение:
//  Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, , Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма        - число - реквизит, который надо отформатировать
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПлатежногоДокумента()

// Форматирует сумму прописью банковского платежного документа.
//
// Параметры:
//  Сумма        - число - реквизит, который надо представить прописью 
//  Валюта       - СправочникСсылка.Валюты - валюта, в которой нужно представить
//                 сумму
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописиНаРусском;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

// Устанавливает для элемента формы с типом табличный документ состояние Длительная операция
//
Процедура СостояниеТабличногоДокументаДлительнаяОперация(ЭлементФормы, ТекстСостояния = "") Экспорт
	
	ОтображениеСостояния = ЭлементФормы.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	ОтображениеСостояния.Текст = ТекстСостояния;
	
КонецПроцедуры // СостояниеТабличногоДокументаДлительнаяОперация()

// Устанавливает для элемента формы с типом табличный документ состояние Длительная операция
//
Процедура СостояниеТабличногоДокументаНеактуален(ЭлементФормы, ТекстСостояния = "") Экспорт
	
	ОтображениеСостояния = ЭлементФормы.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка = Новый Картинка;
	ОтображениеСостояния.Текст = ТекстСостояния;
	
КонецПроцедуры // СостояниеТабличногоДокументаДлительнаяОперация()

// Устанавливает для элемента формы с типом табличный документ состояние Длительная операция
//
Процедура СостояниеТабличногоДокументаАктуален(ЭлементФормы) Экспорт
	
	ОтображениеСостояния = ЭлементФормы.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка = Новый Картинка;
	ОтображениеСостояния.Текст = "";
	
КонецПроцедуры // СостояниеТабличногоДокументаДлительнаяОперация()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСТр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)'"),
			УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

// Подсчет количества листов с документе
//
Функция ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент = Ложь) Экспорт
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции // ПроверитьВыводСчетаФактурыНаСтраницу()

Процедура ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент = Ложь) Экспорт
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.Дата = ДатаСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процерка корректности печати УПД
//
//
Процедура ПроверитьВидОперации(ПараметрКоманды, Ошибки) Экспорт
	
	Счетчик = 0;
	
	Пока Счетчик <= ПараметрКоманды.Количество()-1 Цикл
		
		ДокументСсылка = ПараметрКоманды[Счетчик];
		
		Если ДокументСсылка.Дата < Дата('20130101') Тогда 
			
			ТекстСообщения = Нстр("ru = '__________________
										|Печать универсального передаточного документа доступна c 1 января 2013. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ДокументСсылка.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			
			ТекстСообщения = НСтр("ru = 'Нельзя напечатать универсальный передаточный документ 
											|%1, 
											|т.к. действие доступно только для заказ-нарядов!'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументСсылка.Контрагент) Тогда 
			
			ТекстСообщения = Нстр("ru = '__________________
										|Для печати универсального передаточного документа необходимо заполнить контрагента. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		Иначе
			
			Счетчик = Счетчик + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВидОперации()

Процедура ПроверитьВозможностьПечатиУКД(ПараметрКоманды, Ошибки) Экспорт
	
	Счетчик = 0;
	
	Пока Счетчик <= ПараметрКоманды.Количество()-1 Цикл
		
		ДокументСсылка = ПараметрКоманды[Счетчик];
		
		Если ДокументСсылка.Дата < Дата('20130101') Тогда 
			
			ТекстСообщения = Нстр("ru = '__________________
										|Печать универсального корректировочного документа доступна c 1 января 2013. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументСсылка.Контрагент) Тогда 
			
			ТекстСообщения = Нстр("ru = '__________________
										|Для печати универсального корректировочного документа необходимо заполнить контрагента. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		Иначе
			
			Счетчик = Счетчик + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВидОперации()

// Функция подготовки данных для печати этикетов и ценников.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(МассивДокументов, ЭтоЦенники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугТовары.Партия КАК Партия,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия,
	|	СУММА(ПеремещениеЗапасовЗапасы.Количество)
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОприходованиеЗапасовЗапасы.Номенклатура,
	|	ОприходованиеЗапасовЗапасы.Характеристика,
	|	ОприходованиеЗапасовЗапасы.Партия,
	|	СУММА(ОприходованиеЗапасовЗапасы.Количество)
	|ИЗ
	|	Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
	|ГДЕ
	|	ОприходованиеЗапасовЗапасы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОприходованиеЗапасовЗапасы.Номенклатура,
	|	ОприходованиеЗапасовЗапасы.Характеристика,
	|	ОприходованиеЗапасовЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПоступлениеТоваровУслуг.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеЗапасов.Организация,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОприходованиеЗапасов.Организация,
	|	ОприходованиеЗапасов.СтруктурнаяЕдиница,
	|	ОприходованиеЗапасов.ВидЦен
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
	|ГДЕ
	|	ОприходованиеЗапасов.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов	= МассивРезультатов[1].Выгрузить();
	МассивОрганизаций			= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов				= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СтруктурнаяЕдиница").ВыгрузитьКолонку(0);
	МассивВидовЦен				= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦен").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати этикеток и ценников
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦен", ?(МассивВидовЦен.Количество() = 1,МассивВидовЦен[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	Если ЭтоЦенники Тогда
		
		СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
		СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
		
	Иначе
		
		СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
		СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
		
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати этикеток и ценников
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Запасы", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов()

// Функция возвращает договор переданного документа.
//
Функция ПолучитьДоговорДокумента(Документ) Экспорт
	
	Возврат Документ.Договор;
	
КонецФункции // ПолучитьДоговорДокумента

// Функция возвращает список макетов для печати счетов-фактур,
//перечисленных через запятую.
//
Функция ПолучитьСписокМакетовСчетовФактур(СчетаФактуры) Экспорт
	
	СписокМакетов = "";
	ЕстьСчетФактура = Ложь;
	ЕстьКорректировочныйСчетФактура = Ложь;
	
	Для Каждого Объект Из СчетаФактуры Цикл
		
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактура") Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактураКорректировочный", ",СчетФактураКорректировочный");
					ЕстьКорректировочныйСчетФактура = Истина;
				КонецЕсли;
				
			Иначе
				Если НЕ ЕстьСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
					ЕстьСчетФактура = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактураКорректировочный", ",СчетФактураКорректировочный");
					ЕстьКорректировочныйСчетФактура = Истина;
				КонецЕсли;
				
			Иначе
				Если НЕ ЕстьСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
					ЕстьСчетФактура = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокМакетов;
	
КонецФункции

// Возвращает ссылку на Организацию, указанную в первом документе параметра команды.
//
// Параметры:
//  ПараметрКоманды	 - Массив - массив ссылок на документы для печати.
// 
// Возвращаемое значение:
//  СправочникСсылка.Организация - организация, для которой вызывается печатная форма.
//  В случае если печать вызывается для форм разных организаций - возвращается пустая ссылка.
//
Функция ОрганизацияИзПараметраКоманды(ПараметрКоманды) Экспорт
	
	Результат = Справочники.Организации.ПустаяСсылка();
	
	Если ТипЗнч(ПараметрКоманды) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрКоманды Цикл
		
		Если ТипЗнч(ПараметрКоманды[0]) <> ТипЗнч(ТекПараметр) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекПараметр) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ТекПараметр.Метаданные()) Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияРеквизитаОбъектов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПараметрКоманды, "Организация");
	
	Для Каждого КлючИЗначение Из ЗначенияРеквизитаОбъектов Цикл
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Результат = КлючИЗначение.Значение;
		КонецЕсли;
		Если Результат <> КлючИЗначение.Значение Тогда
			Возврат Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСоСчетамиФактурами

// Функция возвращает ссылку на подчиненный счет-фактуру
//
Функция ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Полученный = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Полученный Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактура.Ссылка,
		|	СчетФактура.Номер,
		|	СчетФактура.Дата
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактура
		|ГДЕ
		|	СчетФактура.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактура.ПометкаУдаления";
		
	Иначе
		
		// Для исходящих СФ документы основания хранятся в ТЧ ДокументыОснования
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.Ссылка,
		|	СчетФактураДокументыОснования.Ссылка.Номер,
		|	СчетФактураДокументыОснования.Ссылка.Дата
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ссылка", Выборка.Ссылка);
	СтруктураВозврата.Вставить("Номер", Выборка.Номер);
	СтруктураВозврата.Вставить("Дата", Выборка.Дата);
	
	Возврат СтруктураВозврата;

КонецФункции // ПолучитьПодчиненныйСчетФактуру()
 
// Устанавливает надпись гиперссылки на Счет-фактуру
//
Процедура УстановитьТекстПроСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт

	НайденныйСчетФактура = МедПредыФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		ТекстПроСчетФактуру = НСтр("ru = '№ %Номер% от %Дата% г.'");
		ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Номер%", НайденныйСчетФактура.Номер);
		ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Дата%", Формат(НайденныйСчетФактура.Дата, "ДФ=dd.MM.yyyy"));
		ФормаДокумента.СчетФактураТекст = ТекстПроСчетФактуру;	
	Иначе
	    ФормаДокумента.СчетФактураТекст = "Ввести счет-фактуру";
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

//При изменении документа основания правим подчиненную Счет-фактуру
//Параметры:
//ДокументОснование - документ основания, для которого ищем и правим счет фактуру
Процедура ИзменитьПодчиненнуюСчетФактуру(ДокументОснование, Полученный = Ложь) Экспорт
	
	СчетФактура = МедПредыФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Полученный);
	
	Если СчетФактура <> Неопределено Тогда
		
		СчетФактураОбъект = СчетФактура.Ссылка.ПолучитьОбъект();
		СчетФактураОбъект.Заполнить(ДокументОснование);
		СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет описание счет фактуры для оповещения открытых форм.
// 
// При оповещении будет актуализирована надпись-гиперссылка в подвале формы.
//
// ДоументОснование - тип ДокументСсылка, используется при идентификации открытый формы;
// СчетФактура - тип ДокументСсылка, счет-фактура ссылка которого является источником данных для оповещения;
// Описание - тип Массив. Заполняемый массив с описанием оповещения. Если не передан, создается новый массив;
//
Процедура ДобавитьОписаниеСозданнойСчетФактуры(ДокументОснование, СчетФактура, Описание)
	
	Если ТипЗнч(Описание) <> Тип("Массив") Тогда
		
		Описание = Новый Массив;
		
	КонецЕсли;
	
	ОписаниеНовойСчетФактуры = Новый Массив(3);
	
	ОписаниеНовойСчетФактуры[0] = ДокументОснование;
	ОписаниеНовойСчетФактуры[1] = СчетФактура.Номер;
	ОписаниеНовойСчетФактуры[2] = СчетФактура.Дата;
	
	Описание.Добавить(ОписаниеНовойСчетФактуры);
	
КонецПроцедуры // ДобавитьОписаниеСозданнойСчетФактуры()

// Процедура определяет источники, которые необходимо использовать в качестве менеджера печати
//
// Если система налогооблажения общая, обязательна необходима счет-фактура, которая будет использоваться в роли источника,
// иначе можно сформировать макет непосредствено из текущего документа
//
Процедура ОпределитьИсточникиПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю)
	
	МассивСчетФактура = Новый Массив;
	МассивДокументовРеализаций = Новый Массив;
	
	Для каждого ДокументПечати Из ПараметрКоманды Цикл
		
		ЕстьНДС = Ложь;
		
		// Поскольку в УНФ не ограничевается выписка счетов-фактур для организаций 
		// с упращенной системой налогооблажения, мы устанавливаем источник печати не только по наличию НДС в документе,
		// но и по наличию самого документа счет-фактура.
		СчетФактураВыданный = МедПредыФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументПечати, Ложь);
		
		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.ЗаказПокупателя";
			ПодразделениеДокумента = ДокументПечати.СтруктурнаяЕдиницаРезерв;
			ЕстьНДС = (ДокументПечати.Работы.Итог("СуммаНДС") <> 0) ИЛИ (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.РасходнаяНакладная";
			ПодразделениеДокумента = ДокументПечати.СтруктурнаяЕдиница;
			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный)
				ИЛИ ДокументПечати.СуммаНДСДоставки > 0;
			
		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.АктВыполненныхРабот";
			ПодразделениеДокумента = ДокументПечати.Подразделение;
			ЕстьНДС = (ДокументПечати.РаботыИУслуги.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.КорректировкаРеализации";
			ПодразделениеДокумента = ДокументПечати.Подразделение;
			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		КонецЕсли;
		
		Если ЕстьНДС Тогда
			
			СчетФактура = ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументПечати, СообщенияПользователю);
			МассивСчетФактура.Добавить(СчетФактура);
			
		Иначе
			
			МассивДокументовРеализаций.Добавить(ДокументПечати);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСчетФактура.Количество() > 0 Тогда
		
		ИсточникиПечати.СчетФактура = МассивСчетФактура;
		
	КонецЕсли;
	
	Если МассивДокументовРеализаций.Количество() > 0 Тогда
		
		ИсточникиПечати.ДокументыРеализации = МассивДокументовРеализаций;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИсточникиПечатиУПД()

// Процедура заполняет параметры для формирования печатной формы Универсального передаточного документа
//
Процедура ЗаполнитьПараметрыПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю) Экспорт
	
	ОпределитьИсточникиПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
КонецПроцедуры // ЗаполнитьПараметрыПечатиУПД()

// Процедура определяет источники, которые необходимо использовать в качестве менеджера печати
//
// Если система налогооблажения общая, обязательна необходима счет-фактура, которая будет использоваться в роли источника,
// иначе можно сформировать макет непосредствено из текущего документа
//
Процедура ОпределитьИсточникиПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю)
	
	МассивСчетовФактур = Новый Массив;
	МассивДокументовРеализаций = Новый Массив;
	
	Для каждого ДокументПечати Из ПараметрКоманды Цикл
		
		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.СчетФактура") Тогда
			МассивСчетовФактур.Добавить(ДокументПечати);
			Продолжить;
		КонецЕсли;
		
		ЕстьНДС = Ложь;
		
		// Поскольку в УНФ не ограничивается выписка счетов-фактур для организаций 
		// с упрощенной системой налогооблажения, мы устанавливаем источник печати не только по наличию НДС в документе,
		// но и по наличию самого документа счет-фактура.
		СчетФактураВыданный = МедПредыФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументПечати, Ложь);
		
		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.КорректировкаРеализации";
			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		КонецЕсли;
		
		Если ЕстьНДС Тогда
			
			ВидОперацииСФ = Перечисления.ВидыОперацийСчетФактура.Корректировка;
			СчетФактура = ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументПечати, СообщенияПользователю, ВидОперацииСФ);
			МассивСчетовФактур.Добавить(СчетФактура);
			
		Иначе
			
			МассивДокументовРеализаций.Добавить(ДокументПечати);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСчетовФактур.Количество() > 0 Тогда
		
		ИсточникиПечати.СчетФактура = МассивСчетовФактур;
		
	КонецЕсли;
	
	Если МассивДокументовРеализаций.Количество() > 0 Тогда
		
		ИсточникиПечати.ДокументыРеализации = МассивДокументовРеализаций;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИсточникиПечатиУПД()

// Процедура заполняет параметры для формирования печатной формы Универсального корректировочного документа
//
Процедура ЗаполнитьПараметрыПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю) Экспорт
	
	ОпределитьИсточникиПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
КонецПроцедуры // ЗаполнитьПараметрыПечатиУПД()

// Функция проверяет наличие счет-фактуры выданной
// 
// В случае ее отсутствия документ СФ (выданная) будет создан.
//
Функция ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументРеализации, СообщенияПользователю, ВидОперации = Неопределено)
	
	СчетФактураВыданный = МедПредыФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументРеализации, Ложь);
	
	Если СчетФактураВыданный = Неопределено Тогда
		
		НовыйСчетФактура = Документы.СчетФактура.СоздатьДокумент();
		НовыйСчетФактура.Заполнить(ДокументРеализации);
		НовыйСчетФактура.Дата = ТекущаяДатаСеанса();
		
		Если ЗначениеЗаполнено(ВидОперации) Тогда
			НовыйСчетФактура.ВидОперации = ВидОперации;
		КонецЕсли;
		
		Попытка 
			
			// При расчетах в у.е. нужно распределять сумму аванса по ТЧ Запасы. Это выполняется при проведении документа.
			Если ДокументРеализации.Проведен И ДокументРеализации.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить()
				И ДокументРеализации.Предоплата.Количество() > 0 Тогда
				НовыйСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				НовыйСчетФактура.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = 'Сформирован подчиненный документ Cчет-фактура № %1 от %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НовыйСчетФактура.Номер, НовыйСчетФактура.Дата);
			
			СчетФактураВыданный = НовыйСчетФактура.Ссылка;
			
			ДобавитьОписаниеСозданнойСчетФактуры(ДокументРеализации, НовыйСчетФактура.Ссылка, ИсточникиПечати.СозданныеСчетаФактуры);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать подчиненный документ Счет-фактура для документа %1. Для формирования счёт-фактуры нажмите на гиперссылку ""Создать"" внизу.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументРеализации);
			
		КонецПопытки;
		
		// Выводить сообщения сразу неэффективно, так как окно документа прячется за окном ОФ "Печать"
		СообщенияПользователю.Добавить(ТекстСообщения);
		
	Иначе
		
		СчетФактураВыданный = СчетФактураВыданный.Ссылка;
		
	КонецЕсли;
	
	Возврат СчетФактураВыданный;
	
КонецФункции // ПроверитьВыпискуСчетовФактур()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСРабочимКалендарем

// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения) Экспорт
	
	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 
	
	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

// Функция возвращает наименование дня недели по его номеру
//
// Параметры
//  НомерДняНедели - Число, номер дня недели
//
// Возвращаемое значение:
//   Строка, наименование дня недели
//
Функция ОпределитьДеньНедели(НомерДняНедели) Экспорт
	
	Если НомерДняНедели = 1 Тогда
		Возврат "Пн";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вт";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Ср";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Чт";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пт";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Сб";
	Иначе
		Возврат "Вс";
	КонецЕсли;
	
КонецФункции

// Функция определяет следующую дату за текущей в зависимости от
//  настроенного количества дней в недели для отображения в календаре
//
// Параметры
//  ТекущаяДата - Дата, текущая дата
//
// Возвращаемое значение:
//   Дата - следующая дата
//
Функция ОпределитьСледующуюДата(ТекущаяДата, КоличествоДнейНедели) Экспорт
	
	Если КоличествоДнейНедели = "7" Тогда
		Возврат ТекущаяДата + 60*60*24;
	ИначеЕсли КоличествоДнейНедели = "6" Тогда
		Если ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	ИначеЕсли КоличествоДнейНедели = "5" Тогда
		Если ДеньНедели(ТекущаяДата) = 5 Тогда
			Возврат ТекущаяДата + 60*60*24*3;
		ИначеЕсли ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // ОпределитьСледующуюДата()

#КонецОбласти

#Область процедурыИФункцииДляРаботыСПодбором

// Процедура устанавливает (сбрасывает) настройки подбора для указанного пользователя
// 
Процедура УстановитьСтандартныеНастройкиПодбора(ТекущийПользователь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		Нстр("ru= 'Неуказан пользователь, для которого устанавливаются настройки подбора по умолчанию.'")
		);
		
		Возврат;
		
	КонецЕСли;
	
	НастройкиПодбораПоУмолчанию = НастройкиПодбораПоУмолчанию();
	
	Для каждого Настройка Из НастройкиПодбораПоУмолчанию Цикл
		
		УстановитьНастройкуПользователя(Настройка.Значение, Настройка.Ключ, ТекущийПользователь);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьСтандартныеНастройкиПодбора()

// Возвращает соответствие настроек по умолчанию.
//
Функция НастройкиПодбораПоУмолчанию()
	
	НастройкиПодбораПоУмолчанию = Новый Соответствие;
	
	НастройкиПодбораПоУмолчанию.Вставить("ГруппаОтбора", 				Справочники.Номенклатура.ПустаяСсылка());
	НастройкиПодбораПоУмолчанию.Вставить("ЗапоминатьТекущуюИерархию", 	Ложь);
	НастройкиПодбораПоУмолчанию.Вставить("ЗапрашиватьКоличествоИЦену",	Ложь);
	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьОстатки", 			Истина);
	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьРезерв", 			Ложь);
	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьСвободныйОстаток",	Ложь);
	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьЦены", 				Истина);
	НастройкиПодбораПоУмолчанию.Вставить("СпособВыводаОстатков", 		Перечисления.СпособВыводаОстатковВПодборе.ВТаблице);
	НастройкиПодбораПоУмолчанию.Вставить("ИспользоватьНовыйМеханизмПодбора", Истина);
	НастройкиПодбораПоУмолчанию.Вставить("ВыводитьСоветВернутьсяКНоменклатуре", Истина);
	НастройкиПодбораПоУмолчанию.Вставить("ВыводитьСоветИспользоватьПредыдущийПодбор", Истина);
	НастройкиПодбораПоУмолчанию.Вставить("ВыводитьСоветУслугиВПриходныхДокументах", Истина);
	
	Возврат НастройкиПодбораПоУмолчанию;
	
КонецФункции // НастройкиПодбораПоУмолчанию()

// Процедура инициализирует установку пользовательских настроек подбора
// Актуальна для новых пользователей
//
Процедура УстановкаПользовательскихНастроекПодбораПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СсылкаПользователя = Источник.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПользователя) Тогда
		
		СсылкаПользователя = Источник.ПолучитьСсылкуНового();
		
		Если НЕ ЗначениеЗаполнено(СсылкаПользователя) Тогда 
			
			СсылкаПользователя = Справочники.Пользователи.ПолучитьСсылку();
			Источник.УстановитьСсылкуНового(СсылкаПользователя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтандартныеНастройкиПодбора(СсылкаПользователя);
	
КонецПроцедуры // УстановкаПользовательскихНастроекПодбораПриЗаписи()

#КонецОбласти

#Область ПроцедурыИФункцииОтправкиЭлектронныхПисем

// Процедура заполняет параметры отправки электронного письма при печати документов.
// Параметры совпадают с параметрами передаваемыми в процедуру Печать() модулей менеджеров документов.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм) Экспорт
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		
		Получатели = Новый СписокЗначений;
		ТипыМетаданныхСодержащиеПартнерскиеEmail = МедПредыКонтактнаяИнформацияСервер.ПолучитьТипыМетаданныхСодержащиеПартнерскиеEmail();
		
		Для каждого ОбъектМассива Из МассивОбъектов Цикл
			
			Если НЕ ЗначениеЗаполнено(ОбъектМассива) Тогда 
				
				Продолжить; 
				
			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.Контрагенты") Тогда 
				
				// Актуально для печати из справочника, например, прайс-лист из Справочники.Контрагенты
				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива));
				Продолжить;
				
			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива.Владелец));
				Продолжить;
				
			КонецЕсли;
			
			МатаданныеОбъекта = ОбъектМассива.Метаданные();
			
			ИменаРеквизитовСодержащиеEmail = Новый Массив;
			
			// Проверим все реквизиты переданного объекта
			Для каждого ЭлементМетаданных Из МатаданныеОбъекта.Реквизиты Цикл
				
				ОбъектСодержитьEmail(ЭлементМетаданных, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail);
				
			КонецЦикла;
			
			Если ИменаРеквизитовСодержащиеEmail.Количество() > 0 Тогда
				
				ЗначенияСтруктурыВСписокЗначений(
					Получатели,
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектМассива, ИменаРеквизитовСодержащиеEmail)
					);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОтправки.Получатель = МедПредыКонтактнаяИнформацияСервер.ПодготовитьЭлектронныеАдресаПолучателей(Получатели, Истина);
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	ПараметрыОтправки.Вставить("Отправитель", ?(ДоступныеУчетныеЗаписи.Количество() > 0, ДоступныеУчетныеЗаписи[0].Ссылка, Неопределено));
	
	ЗаполнитьТемуТекстОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры //ЗаполнитьПараметрыОтправки()

// Иницировать получение доступных учетных записей электронной почты
// Параметры:
// ДляОтправки - Булево - Если установлено Истина, то будут выбирать только записи, с которых можно отправлять почту
// ДляПолучения   - Булево - Если установлено Истина, то будут выбирать только записи, по которым можно получать почту
// ВключатьСистемнуюУчетнуюЗапись - Булево - включать системную учетную запись, если доступна
//
// Возвращаемое значение:
// ДоступныеУчетныеЗаписи - ТаблицаЗначений - С колонками:
//    Ссылка       - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Ссылка на учетную запись
//    Наименование - Строка - Наименование учетной записи
//    Адрес        - Строка - Адрес электронной почты
//
Функция ПолучитьДоступнуюУчетнуюЗапись(знач ДляОтправки = Неопределено, знач ДляПолучения  = Неопределено, знач ВключатьСистемнуюУчетнуюЗапись = Истина) Экспорт

	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(ДляОтправки, ДляПолучения, ВключатьСистемнуюУчетнуюЗапись);
	
	Возврат ?(ДоступныеУчетныеЗаписи.Количество() > 0, ДоступныеУчетныеЗаписи[0].Ссылка, Неопределено);
	
КонецФункции

// Добавляет в массив имя метаданных содержащих e-mail
//
Процедура ОбъектСодержитьEmail(МатаданныеОбъектаРеквизита, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail)
	
	Если НЕ ТипыМетаданныхСодержащиеПартнерскиеEmail.НайтиПоЗначению(МатаданныеОбъектаРеквизита.Тип) = Неопределено Тогда
		
		ИменаРеквизитовСодержащиеEmail.Добавить(МатаданныеОбъектаРеквизита.Имя);
		
	КонецЕсли;
	
КонецПроцедуры //ОбъектСодержитьEmail()

// Процедура заполняет тему и текст параметров отправки электронного письма при печати документов.
// Параметры совпадают с параметрами передаваемыми в процедуру Печать() модулей менеджеров документов.
Процедура ЗаполнитьТемуТекстОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм)
	
	Тема  = "";
	Текст = "";
	
	ПредставлениеЗаголовкаДокумента = "";
	ПредставлениеДляКого = "";
	ПредставлениеОтКого = "";
	
	ПечатаютсяДокументы = МассивОбъектов.Количество() > 0 И ОбщегоНазначения.ВидОбъектаПоСсылке(МассивОбъектов[0]) = "Документ";
	
	Если ПечатаютсяДокументы Тогда
		Если МассивОбъектов.Количество() = 1 Тогда
			ПредставлениеЗаголовкаДокумента = СформироватьЗаголовокДокумента(МассивОбъектов[0]);
		Иначе
			ПредставлениеЗаголовкаДокумента = "Документы: ";
			Для Каждого ОбъектДляПечати Из МассивОбъектов Цикл
				ПредставлениеЗаголовкаДокумента = ПредставлениеЗаголовкаДокумента + ?(ПредставлениеЗаголовкаДокумента = "Документы: ", "", "; ")
					+ СформироватьЗаголовокДокумента(ОбъектДляПечати);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураТиповОбъектыПечати = РазложитьСписокПоТипамОбъектов(МассивОбъектов);
	
	ОрганизацияПоПисьму = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Организация", ОписаниеТиповИзСтроки("Организации"));
	КонтрагентПоПисьму  = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Контрагент",  ОписаниеТиповИзСтроки("Контрагенты"));
	
	Если ЗначениеЗаполнено(КонтрагентПоПисьму) Тогда
		ПредставлениеДляКого = "для " + ПолучитьПредставлениеУчастника(КонтрагентПоПисьму);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияПоПисьму) Тогда
		ПредставлениеОтКого = "от " + ПолучитьПредставлениеУчастника(ОрганизацияПоПисьму);
	КонецЕсли;
	
	ДопустимаяДлинаТемы = Метаданные.Документы.Событие.Реквизиты.Тема.Тип.КвалификаторыСтроки.Длина;
	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
		ПредставлениеОтКого = "";
	КонецЕсли;
	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
		ПредставлениеДляКого = "";
	КонецЕсли;
	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
		ПредставлениеЗаголовкаДокумента = "";
		Если ПечатаютсяДокументы Тогда
			ПредставлениеЗаголовкаДокумента = "Документы: ";
			Для каждого КлючИЗначение Из СтруктураТиповОбъектыПечати Цикл
				ПредставлениеЗаголовкаДокумента = ПредставлениеЗаголовкаДокумента + ?(ПредставлениеЗаголовкаДокумента = "Документы: ", "", "; ")
					+ ?(ПустаяСтрока(КлючИЗначение.Ключ.ПредставлениеСписка), КлючИЗначение.Ключ.Синоним, КлючИЗначение.Ключ.ПредставлениеСписка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"),
		ПредставлениеЗаголовкаДокумента,
		ПредставлениеДляКого,
		ПредставлениеОтКого
		);
		
	Если НЕ (ПараметрыОтправки.Свойство("Тема") И ЗначениеЗаполнено(ПараметрыОтправки.Тема)) Тогда
		ПараметрыОтправки.Вставить("Тема", СократитьДвойныеПробелы(Тема));
	КонецЕсли;
	
	Если НЕ (ПараметрыОтправки.Свойство("Текст") И ЗначениеЗаполнено(ПараметрыОтправки.Текст)) Тогда
		ПараметрыОтправки.Вставить("Текст", СократитьДвойныеПробелы(Текст));
	КонецЕсли;
	
КонецПроцедуры

// Функция получает значение основного печатаемого реквизита для участников электронного письма.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Контрагенты, СправочникСсылка.Организации	 - Ссылка на участника для которого необходимо получить представление
// Возвращаемое значение:
//  Строка - значение представления
Функция ПолучитьПредставлениеУчастника(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ИменаРеквизитовОбъекта = Новый Соответствие;
	
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Контрагенты"), "НаименованиеПолное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Организации"), "Наименование");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИменаРеквизитовОбъекта[ТипЗнч(Ссылка)]);
	
КонецФункции 

// Функция заменяет двойные пробелы одинарными.
//
// Параметры:
//  ИсходнаяСтрока	 - Строка
// Возвращаемое значение:
//  Строка - Строка без двойных пробелов
Функция СократитьДвойныеПробелы(ИсходнаяСтрока)

	Пока СтрНайти(ИсходнаяСтрока, "  ") > 0  Цикл
	
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "  ", " ");
	
	КонецЦикла; 
	
	Возврат СокрП(ИсходнаяСтрока);

КонецФункции 

// Функция формирует представление заголовка документа.
//
// Возвращаемое значение:
//  Строка - представление документа в виде номера и даты в кратком формате
Функция СформироватьЗаголовокДокумента(ДокументСсылка)

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат "";
	Иначе
		Возврат ДокументСсылка.Метаданные().Синоним + " № "
			//+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументСсылка.Номер, Истина, Истина)
			+ ДокументСсылка.Номер
			+ " от " + Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;

КонецФункции // СформироватьЗаголовокДокумента()

// Функция возвращает описание ссылочных типов по входящей строке.
//
// Параметры:
//  СтрокаОписанияТипов	 - Строка	 - Строка с именами справочников, разделенных запятыми
// Возвращаемое значение:
//  ОписаниеТипов
Функция ОписаниеТиповИзСтроки(СтрокаОписанияТипов)

	СтруктураДопустимыхТипов 	= Новый Структура(СтрокаОписанияТипов);
	МассивДопустимыхТипов 		= Новый Массив;
	
	Для каждого ЭлементСтруктуры Из СтруктураДопустимыхТипов Цикл
		
		МассивДопустимыхТипов.Добавить(Тип("СправочникСсылка."+ЭлементСтруктуры.Ключ));
		
	КонецЦикла; 
	
	Возврат Новый ОписаниеТипов(МассивДопустимыхТипов);
	
КонецФункции 

// Функция раскладывает список значений на соотвествие по типам значений.
//
// Параметры:
//  МассивОбъектов - <СписокЗначений> - список объектов различного вида
//
// Возвращаемое значение:
//   Соответствие   - соответствие в котором Ключ = Метаданные типа, Значение = массив объектов этого типа
Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов)
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеДокумента = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеДокумента) = Неопределено Тогда
			МассивДокументов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеДокумента, МассивДокументов);
		КонецЕсли;
		
		СтруктураТипов[МетаданныеДокумента].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

// Возвращает ссылку на значение реквизита который должен быть одинаков во всех объектах списка. 
// Если значение реквизита в документах списка различается, то возвращается Неопределено
//
// Параметры:
//  ОбъектыПечати  - <СписокЗначений> - список объектов, в которых ищем контрагента
//
// Возвращаемое значение:
//   <СправочникСсылка>, Неопределено - ссылка-значение реквизита, которая содержится во всех объектах, Неопределено - иначе
//
Функция ПолучитьЗначениеОбщегоРеквизита(СтруктураТипов, ИмяРеквизита, ОписаниеДопустимыхТипов)
	Перем ТекстЗапроса;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоОбъекту = "
	|	%ИмяОбъекта%.%ИмяРеквизита% КАК %ИмяРеквизита%
	|ИЗ
	|	%ТипОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
	|ГДЕ
	|	%ИмяОбъекта%.Ссылка В(&СписокОбъектов%ИмяОбъекта%)";
	
	ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "%ИмяРеквизита%", ИмяРеквизита);
	
	Для каждого КлючИЗначение Из СтруктураТипов Цикл
		
		Если ЕстьРеквизитДокумента(ИмяРеквизита, КлючИЗначение.Ключ) Тогда
			
			Если ОбщегоНазначения.ЭтоДокумент(КлючИЗначение.Ключ) Тогда
				ТипОбъекта = "Документ";
			ИначеЕсли ОбщегоНазначения.ЭтоСправочник(КлючИЗначение.Ключ) Тогда
				ТипОбъекта = "Справочник";
			Иначе
				Продолжить;
			КонецЕсли;
			
			ИмяОбъекта = КлючИЗначение.Ключ.Имя;
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				
				ТекстЗапроса = ТекстЗапроса+"
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ";
				
			Иначе
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаПоОбъекту, "%ТипОбъекта%", ТипОбъекта);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ИмяОбъекта);
			
			Запрос.УстановитьПараметр("СписокОбъектов" + ИмяОбъекта, КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Если Выборка.Следующий() Тогда
				Возврат ОписаниеДопустимыхТипов.ПривестиЗначение(Выборка[ИмяРеквизита]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДелегированиеФункцийМодуляОбщегоНазначенияТребующихВызовСервера

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ТестНастроекСертификата() формы элемента справочника СертификатыЭП
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОбъектИлиСсылка, 
		"ПарольПользователя, ЗапомнитьПарольКСертификату, Отпечаток, Ссылка"
		);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработкаКоманды() команды ТестНастроекСоглашения справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОбъектИлиСсылка,
		"Ссылка, СтатусСоглашения, СпособОбменаЭД, РесурсВходящихДокументов, СертификатАбонента, СертификатОрганизацииДляРасшифровки"
		);
		
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры Добавить() формы обработки Прайс-лист
//
Функция ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "Владелец");
	
КонецФункции // ПрочитатьЗначениеРеквизита_ОбработкаПрайсЛистФормаОбработки()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ДеревоПодчиненныеЭДВыбор() формы ДеревоЭД обработки ЭлектронныеДокументы
//
Функция ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "Соглашение");
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "СертификатАбонента");
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "ЗапомнитьПарольКСертификату");
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "ПарольПользователя");
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработатьОтклонениеЭД() формы ФормаПросмотраЭД справочника ЭДПрисоединенныеФайлы
//
Функция ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "СпособОбменаЭД");
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииПодсистемБСП

// Функция очищает разделенные данные созданные при первом запуске.
// Используется перед загрузкой данных из сервиса.
//
Функция ОчиститьДанныеВБазе() Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение(НСтр("ru = 'Не достаточно прав для выполнения операции'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ОбщегоНазначения.ЗаблокироватьИБ();
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить монопольный режим (%1)'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		
		МДОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные;
		
		// Переберем все метаданные
		
		// Константы
		Для каждого МетаданныеКонстанты Из Метаданные.Константы Цикл
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МетаданныеКонстанты, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерЗначения = Константы[МетаданныеКонстанты.Имя].СоздатьМенеджерЗначения();
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			МенеджерЗначения.Значение = МетаданныеКонстанты.Тип.ПривестиЗначение();
			МенеджерЗначения.Записать();
		КонецЦикла;
		
		// Ссылочные типы
		
		ВидыОбъектов = Новый Массив;
		ВидыОбъектов.Добавить("Справочники");
		ВидыОбъектов.Добавить("Документы");
		ВидыОбъектов.Добавить("ПланыВидовХарактеристик");
		ВидыОбъектов.Добавить("ПланыСчетов");
		ВидыОбъектов.Добавить("ПланыВидовРасчета");
		ВидыОбъектов.Добавить("БизнесПроцессы");
		ВидыОбъектов.Добавить("Задачи");
		
		Для каждого ВидОбъекта Из ВидыОбъектов Цикл
			МетаданныеКоллекция = Метаданные[ВидОбъекта];
			Для каждого МДОбъекта Из МетаданныеКоллекция Цикл
				Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДОбъекта, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	" + МДОбъекта.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
				Если ВидОбъекта = "Справочники"
					ИЛИ ВидОбъекта = "ПланыВидовХарактеристик"
					ИЛИ ВидОбъекта = "ПланыСчетов"
					ИЛИ ВидОбъекта = "ПланыВидовРасчета" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|ГДЕ
					|	_XMLВыгрузка_Таблица.Предопределенный = ЛОЖЬ";
				КонецЕсли;
				
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
					Удаление.ОбменДанными.Загрузка = Истина;
					Удаление.Записать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Регистры кроме независимых регистров сведений и последовательности
		ВидыТаблиц = Новый Массив;
		ВидыТаблиц.Добавить("РегистрыНакопления");
		ВидыТаблиц.Добавить("РегистрыРасчета");
		ВидыТаблиц.Добавить("РегистрыБухгалтерии");
		ВидыТаблиц.Добавить("РегистрыСведений");
		ВидыТаблиц.Добавить("Последовательности");
		Для каждого ВидТаблицы Из ВидыТаблиц Цикл
			МетаданныеКоллекция = Метаданные[ВидТаблицы];
			МенеджерВида = Вычислить(ВидТаблицы);
			Для каждого МДРегистра Из МетаданныеКоллекция Цикл
				
				Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВидТаблицы = "РегистрыСведений"
					И МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					Продолжить;
				КонецЕсли;
				
				МенеджерТипа = МенеджерВида[МДРегистра.Имя];
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	_XMLВыгрузка_Таблица.Регистратор КАК Регистратор
				|ИЗ
				|	" + МДРегистра.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Независимые регистры сведений
		Для каждого МДРегистра Из Метаданные.РегистрыСведений Цикл
			
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				
				Продолжить;
			КонецЕсли;
			
			МенеджерТипа = РегистрыСведений[МДРегистра.Имя];
			
			НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		// Планы обмена
		
		Для каждого МДПланаОбмена Из Метаданные.ПланыОбмена Цикл
			
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДПланаОбмена, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерТипа = ПланыОбмена[МДПланаОбмена.Имя];
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	" + МДПланаОбмена.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица
			|ГДЕ
			|	_XMLВыгрузка_Таблица.Ссылка <> &ЭтотУзел";
			Запрос.УстановитьПараметр("ЭтотУзел", МенеджерТипа.ЭтотУзел());
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
				Удаление.ОбменДанными.Загрузка = Истина;
				Удаление.Записать();
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОбщегоНазначения.РазблокироватьИБ();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОчиститьДанныеВБазе()

#КонецОбласти

#Область ПроцедурыИФункцииПечатиКонтактнойИнформацииКонтрагентов

// Функция возвращает результат запроса по видам контактной информации которые могут использоваться при печати
//
Функция ПолучитьДоступныеДляПечатиВидыКИ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		|	1 КАК ИндексВладельцаКИ,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = &КИСправочникКонтрагенты
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Наименование,
		|	2,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = &КИСправочникКонтактныеЛица
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Наименование,
		|	3,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = &КИСправочникФизическиеЛица
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.Тип = &ТипТелефон
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИндексВладельцаКИ,
		|	РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("КИСправочникКонтрагенты", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);	
	Запрос.УстановитьПараметр("КИСправочникКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);	
	Запрос.УстановитьПараметр("КИСправочникФизическиеЛица", Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);	
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция задает начальное значение использования вида контактной информации
//
// Параметры:
//  ВидКИ	 - Справочник.ВидыКонтактнойИнформации	 - Проверяемый вид контактной информации
// Возвращаемое значение:
//  Булево - Вид контакной информации печатается по умолчанию
Функция УстановитьПечатьВидаКИПоУмолчанию(ВидКИ) Экспорт
	
	Если ВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента 
		Или ВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента
		Или ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента
		Тогда
			Возврат Ложь;
	КонецЕсли;
	
	Возврат ВидКИ.Предопределенный;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииМониторовРуководителя

// Функция создает компоновщик настроек отчета и переопределяет заданные параметры и отборы
//
// Параметры:
//  СвойстваОтчета			 - Структура	 - ключи: "ИмяОтчета" - имя отчета как задано в конфигураторе, "КлючВарианта" (необязательный) - имя варианта отчета
//  ПараметрыИОтборы	 - Массив - массив структур для задания изменяемых параметров и отборов. Ключи структуры:
//									"ИмяПоля" (обязательный) - имя параметра или поле компоновки данных по которому задается отбор,
//									"ПравоеЗначение" (обязательный) - устанавливаемое значение параметра или отбора,
//									"ВидНастройки" (необязательный) - определяет контейнер для помещения параметра или отбора, варианты: "Настройки", "ФиксированныеНастройки",
//									прочие ключи структуры являются необязательными и задают свойства элемента отбора.
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек с измененными параметрами и отборами.
Функция ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы) Экспорт
	Перем ИмяОтчета, КлючВарианта;
	
	СвойстваОтчета.Свойство("ИмяОтчета", ИмяОтчета);
	СвойстваОтчета.Свойство("КлючВарианта", КлючВарианта);
	
	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Если КлючВарианта <> Неопределено И НЕ ПустаяСтрока(КлючВарианта) Тогда
		ИскомыйВариантОтчета = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючВарианта);
		Если ИскомыйВариантОтчета <> Неопределено Тогда
			Настройки = ИскомыйВариантОтчета.Настройки;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Настройки);
	
	Для Каждого ПараметрОтбор Из ПараметрыИОтборы Цикл
		
		Если ПараметрОтбор.Свойство("ВидНастройки") Тогда
			Если ПараметрОтбор.ВидНастройки = "Настройки" Тогда
				Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
			ИначеЕсли ПараметрОтбор.ВидНастройки = "ФиксированныеНастройки" Тогда
				Контейнер = КомпоновщикНастроекКомпоновкиДанных.ФиксированныеНастройки;
			КонецЕсли;
		Иначе
			Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
		КонецЕсли;
		
		НайденныйПараметр = Контейнер.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ПараметрОтбор.ИмяПоля));
		Если НайденныйПараметр <> Неопределено Тогда
			Контейнер.ПараметрыДанных.УстановитьЗначениеПараметра(НайденныйПараметр.Параметр, ПараметрОтбор.ПравоеЗначение);
		КонецЕсли;
		
		НайденныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Контейнер.Отбор, ПараметрОтбор.ИмяПоля);
		Для Каждого НайденныйОтбор Из НайденныеОтборы Цикл
			
			Если ТипЗнч(НайденныйОтбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НайденныйОтбор, ПараметрОтбор);
			
			Если НЕ ПараметрОтбор.Свойство("ВидСравнения") Тогда
				НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			Если НЕ ПараметрОтбор.Свойство("Использование") Тогда
				НайденныйОтбор.Использование = Истина;
			КонецЕсли;
			Если НЕ ПараметрОтбор.Свойство("РежимОтображения") Тогда
				НайденныйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеОтборы.Количество() = 0 И НайденныйПараметр = Неопределено Тогда
			ДобавленныйЭлемент = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Контейнер.Отбор, ПараметрОтбор.ИмяПоля, ВидСравненияКомпоновкиДанных.Равно);
			ЗаполнитьЗначенияСвойств(ДобавленныйЭлемент, ПараметрОтбор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКомпоновкиДанных;
	
КонецФункции // ПолучитьПользовательскиеНастройки()

// Функция возвращает используемые для мониторов цвета.
//
// Параметры:
//  ИмяЦвета - Строка - Название цвета
Функция ЦветДляМониторов(ИмяЦвета) Экспорт
	
	Цвет = Новый Цвет();
	
	Если ИмяЦвета = "Зеленый" Тогда
		Цвет = Новый Цвет(25, 204, 25);
	ИначеЕсли ИмяЦвета = "Темно-зеленый" Тогда
		Цвет = Новый Цвет(29, 150, 66);
	ИначеЕсли ИмяЦвета = "Желтый" Тогда
		Цвет = Новый Цвет(254, 225, 1);
	ИначеЕсли ИмяЦвета = "Оранжевый" Тогда
		Цвет = WebЦвета.Оранжевый;
	ИначеЕсли ИмяЦвета = "Коралловый" Тогда
		Цвет = WebЦвета.Коралловый;
	ИначеЕсли ИмяЦвета = "Красный" Тогда
		Цвет = Новый Цвет(208, 42, 53);
	ИначеЕсли ИмяЦвета = "Пурпурный" Тогда
		Цвет = WebЦвета.Пурпурный;
	ИначеЕсли ИмяЦвета = "Синий" Тогда
		Цвет = WebЦвета.НасыщенноНебесноГолубой;
	ИначеЕсли ИмяЦвета = "Светло-серый" Тогда
		Цвет = WebЦвета.СеребристоСерый;
	ИначеЕсли ИмяЦвета = "Серый" Тогда
		Цвет = WebЦвета.Серый;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

// Функция возвращает результирующую форматированную строку.
//
// Параметры:
//  ЭлементыСтроки - Массив структур с ключом "Строка" и значением выводимой строки,
//    остальные ключи соответствуют параметрам конструктора форматированной строки
//
Функция СкомпоноватьФорматированнуюСтроку(ЭлементыСтроки) Экспорт
	
	Строка = "";
	Шрифт = Неопределено;
	ЦветТекста = Неопределено;
	ЦветФона = Неопределено;
	МассивФорматированныхСтрок = Новый Массив;
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Элемент.Свойство("Строка", Строка);
		Элемент.Свойство("Шрифт", Шрифт);
		Элемент.Свойство("ЦветТекста", ЦветТекста);
		Элемент.Свойство("ЦветФона", ЦветФона);
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(Строка, Шрифт, ЦветТекста, ЦветФона)); 
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
КонецФункции

// Функция формирует заголовок в виде форматированной строки для элементов в шапке виджетов.
//
// Параметры:
//  ИсходнаяСумма - Число - значение из которого формируется заголовок
// Возвращаемое значение:
//  ФорматированнаяСтрока - Строка заголовка
Функция СформироватьЗаголовок(знач ИсходнаяСумма) Экспорт
	
	ФорматированнаяСумма = Формат(ИсходнаяСумма, "ЧДЦ=2; ЧРГ=' '; ЧН=—; ЧГ=3,0");
	Разделитель = СтрНайти(ФорматированнаяСумма, ",");
	СтрокаРазрядТысячи = Лев(ФорматированнаяСумма, Разделитель-4);
	СтрокаРазрядЕдиницы = Сред(ФорматированнаяСумма, Разделитель-3);
	
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить(Новый Структура("Строка, Шрифт", СтрокаРазрядТысячи, Новый Шрифт(ШрифтыСтиля.ОченьКрупныйШрифтТекста)));
	ЭлементыСтроки.Добавить(Новый Структура("Строка, Шрифт", СтрокаРазрядЕдиницы, Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста)));
	
	Возврат СкомпоноватьФорматированнуюСтроку(ЭлементыСтроки);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФункцииУправленияРабочимСтолом

// Определяет состав форм рабочего стола в зависимости от прав доступа пользователя.
//
Процедура УстановитьРабочийСтолПользователя(СоставФормИзменен = Ложь) Экспорт
	
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	Если РежимРаботы.МодельСервиса
		И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("Общее/НастройкиНачальнойСтраницы", "");
	
	Если НастройкиНачальнойСтраницы = Неопределено Тогда
		
		УстановитьСоставФорм(СоставФормИзменен);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет состав форм рабочего стола в зависимости от прав доступа пользователя.
//
Процедура УстановитьСоставФорм(СоставФормИзменен = Ложь, ИмяПользователя = "") Экспорт
	
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	СоставФорм.ЛеваяКолонка.Очистить();
		
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы,, ИмяПользователя);
	Иначе
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
	КонецЕсли;
	
	СоставФормИзменен = Истина;

КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектомСхемаЗапроса

// Функция - Найти поле доступной таблицы схемы запроса
//
// Параметры:
//  ДоступнаяТаблица - ДоступнаяТаблицаСхемыЗапроса	 - таблица в которой выполняется поиск
//  ИмяПоля			 - Строка - имя искомого поля
//  ТипПоля			 - Тип - возможные значения "ДоступноеПолеСхемыЗапроса", "ДоступнаяВложеннаяТаблицаСхемыЗапроса".
//  					Если параметр задан, то поиск выполняется только по полям указанного типа
// Возвращаемое значение:
//  ДоступноеПолеСхемыЗапроса,ДоступнаяВложеннаяТаблицаСхемыЗапроса - найденное поле
Функция НайтиПолеДоступнойТаблицыСхемыЗапроса(ДоступнаяТаблица, ИмяПоля, ТипПоля = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого Поле Из ДоступнаяТаблица.Поля Цикл
		Если Поле.Имя = ИмяПоля И (ТипПоля = Неопределено Или (ТипЗнч(Поле) = ТипПоля)) Тогда
			Результат = Поле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Найти источник схемы запроса
//
// Параметры:
//  Источники		 - ИсточникиСхемыЗапроса 	 - источники в которых выполняется поиск
//  ПсевдонимТаблицы - Строка	 - псевдоним искомой таблицы
//  ТипТаблицы		 - Тип - возможные значения "ТаблицаСхемыЗапроса", "ВложенныйЗапросСхемыЗапроса", "ОписаниеВременнойТаблицыСхемыЗапроса".
//  					Если параметр задан, то поиск выполняется только по источникам указанного типа
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - найденный источник
Функция НайтиИсточникСхемыЗапроса(Источники, ПсевдонимТаблицы, ТипТаблицы = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого Источник Из Источники Цикл
		Если Источник.Источник.Псевдоним = ПсевдонимТаблицы И (ТипТаблицы = Неопределено Или (ТипЗнч(Источник.Источник) = ТипТаблицы)) Тогда
			Результат = Источник;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

// Запускает выполнение процедуры в фоновом задании.
// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
//                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой)
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, ОжидатьЗавершения = Истина) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыЭкспортнойПроцедуры,, НаименованиеЗадания);
		
		Если ОжидатьЗавершения Тогда
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
		КонецЕсли;
		
		Результат.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Эквайринг

// Процедура выполняет движения регистра накопления ДоходыИРасходыКассовыйМетод.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыКассовыйМетодЭквайринг;
	
	Если Отказ
	 ИЛИ ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыКассовыйМетодЭквайринг = Движения.ДоходыИРасходыКассовыйМетодЭквайринг;
	ДоходыИРасходыКассовыйМетодЭквайринг.Записывать = Истина;
	ДоходыИРасходыКассовыйМетодЭквайринг.Загрузить(ТаблицаДоходыИРасходыКассовыйМетодЭквайринг);
	
КонецПроцедуры // ОтразитьДоходыИРасходыКассовыйМетод()

// Выполняет движения регистра накопления КонтрольОперацийЭквайринга.
//
Процедура ОтразитьКонтрольОперацийЭквайринга(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаКонтрольОперацийЭквайринга = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКонтрольОперацийЭквайринга;
	
	Если Отказ
	 ИЛИ ТаблицаКонтрольОперацийЭквайринга.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияКонтрольОперацийЭквайринга = Движения.КонтрольОперацийЭквайринга;
	ДвиженияКонтрольОперацийЭквайринга.Записывать = Истина;
	ДвиженияКонтрольОперацийЭквайринга.Загрузить(ТаблицаКонтрольОперацийЭквайринга);
	
КонецПроцедуры

// Выполняет движения регистра накопления ОплатаПлатежнымиКартами.
//
Процедура ОтразитьОплатаПлатежнымиКартами(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОплатаПлатежнымиКартами = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаПлатежнымиКартами;
	
	Если Отказ
	 ИЛИ ТаблицаОплатаПлатежнымиКартами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОплатаПлатежнымиКартами = Движения.ОплатаПлатежнымиКартами;
	ДвиженияОплатаПлатежнымиКартами.Записывать = Истина;
	ДвиженияОплатаПлатежнымиКартами.Загрузить(ТаблицаОплатаПлатежнымиКартами);
	
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыПоЭквайрингу.
//
Процедура ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ
	 ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыПоЭквайрингу = Движения.РасчетыПоЭквайрингу;
	ДвиженияРасчетыПоЭквайрингу.Записывать = Истина;
	ДвиженияРасчетыПоЭквайрингу.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры

// Выполняет движения регистра накопления ОперацииЭквайрингаОжидающиеОплаты.
//
Процедура ОтразитьОперацииЭквайрингаОжидающиеОплаты(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОперацииЭквайрингаОжидающиеОплаты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОперацииЭквайрингаОжидающиеОплаты;
	
	Если Отказ
	 ИЛИ ТаблицаОперацииЭквайрингаОжидающиеОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОперацииЭквайрингаОжидающиеОплаты = Движения.ОперацииЭквайрингаОжидающиеОплаты;
	ДвиженияОперацииЭквайрингаОжидающиеОплаты.Записывать = Истина;
	ДвиженияОперацииЭквайрингаОжидающиеОплаты.Загрузить(ТаблицаОперацииЭквайрингаОжидающиеОплаты);
	
КонецПроцедуры

// Процедура сообщает об ошибках проведения по регистру Расчеты по эквайрингу.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыПоЭквайрингу(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям") Тогда
		ПоказатьСообщениеОбОшибки = Истина;
		ПоказатьИнформационноеСообщение = Истина;
	Иначе
		ЗаголовокОшибки = НСтр("ru = 'Информация:'");
		Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнымКартам") Тогда
			ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Обнаружен отрицательный остаток в расчетах по платежным картам'");
		Иначе
			ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Есть остаток в расчетах по платежным картам'");
		КОнецЕсли;
		СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , );
		
		ПоказатьСообщениеОбОшибки = Ложь;
		ПоказатьИнформационноеСообщение = Ложь;
	КонецЕсли;
		
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыборкаЗаписей.СуммаВалОстаток < 0 Или ВыборкаЗаписей.КомиссияВалОстаток < 0 Тогда
			Если ПоказатьСообщениеОбОшибки Тогда
				ПоказатьСообщениеОбОшибки = Ложь;
				
				ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
				ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет возможности зафиксировать расчеты по платежным картам'");
				СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			КонецЕсли;
			
			ТекстСообщения = НСтр(
				"ru = '%ПредставлениеОперацииОплаты%
				|Разнесенная сумма платежа: %СуммаВалПриЗаписи% %ВалютаПредставление% (комиссия %КомиссияВалПриЗаписи%).
				|Остаток суммы операции оплаты: %СуммаОстаткаЗадолженности% %ВалютаПредставление% (комиссия %СуммаОстаткаКомиссии%).'"
			);
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(ВыборкаЗаписей.СуммаВалПриЗаписи));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаЗадолженности%", Строка(ВыборкаЗаписей.СуммаОстаткаЗадолженности));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КомиссияВалПриЗаписи%", Строка(ВыборкаЗаписей.КомиссияВалПриЗаписи));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаКомиссии%", Строка(ВыборкаЗаписей.СуммаОстаткаКомиссии));
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
			
			Если ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям") Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", ""+ВыборкаЗаписей.ДокументПредставление+". "+
									ВыборкаЗаписей.ВидПлатежнойКартыПредставление+" "+ВыборкаЗаписей.НомерПлатежнойКартыПредставление+
									" - остаток суммы по операции оплаты меньше разнесенной суммы платежа.");
									
				СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", "Остаток суммы по операции оплаты меньше разнесенной суммы платежа.");
				СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , );
			КонецЕсли;
			
		ИначеЕсли ВыборкаЗаписей.СуммаВалОстаток > 0 Или ВыборкаЗаписей.КомиссияВалОстаток > 0 Тогда
			Если ПоказатьИнформационноеСообщение Тогда
				ПоказатьИнформационноеСообщение = Ложь;
				
				ЗаголовокОшибки = НСтр("ru = 'Информация:'");
				Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнымКартам") Тогда
					ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Обнаружен отрицательный остаток в расчетах по платежным картам'");
				Иначе
					ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Есть остаток в расчетах по платежным картам'");
				КОнецЕсли;
				СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , );
			КонецЕсли;
			
			ТекстСообщения = НСтр(
				"ru = '%ПредставлениеОперацииОплаты%
				|После проведения остаток долга банка составил: %СуммаВалОстаток% %ВалютаПредставление%.
				|Остаток суммы операции оплаты: %КомиссияВалОстаток% %ВалютаПредставление%.'"
			);
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалОстаток%", Строка(ВыборкаЗаписей.СуммаВалОстаток));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КомиссияВалОстаток%", Строка(ВыборкаЗаписей.КомиссияВалОстаток));
			
			Если ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям") Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", "Информация. "+ВыборкаЗаписей.ДокументПредставление+". "+
									ВыборкаЗаписей.ВидПлатежнойКартыПредставление+" "+ВыборкаЗаписей.НомерПлатежнойКартыПредставление+
									" - остаток взаиморасчетов после проведения отличен от 0.");
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", "Информация. Остаток взаиморасчетов после проведения отличен от 0.");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
			
			СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , );
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями()

// Процедура сообщает об ошибках проведения по регистру Контроль операций эквайринга.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструКонтрольОперацийЭквайринга(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет возможности зафиксировать расчеты по платежным картам'");
	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
		
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		ТекстСообщения = НСтр(
			"ru = '%ВидПлатежнойКартыПредставление% %НомерПлатежнойКартыПредставление% (%ДатаПлатежаПредставление%) - остаток суммы по карте меньше разнесенной суммы платежа.
			|Разнесенная сумма платежа: %СуммаВалПриЗаписи% %ВалютаПредставление%.
			|Остаток суммы по карте: %СуммаОстаткаЗадолженности% %ВалютаПредставление%.'"
		);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(-ВыборкаЗаписей.СуммаВалПриЗаписи));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаЗадолженности%", Строка(ВыборкаЗаписей.СуммаОстаткаЗадолженности));
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидПлатежнойКартыПредставление%", СокрЛП(ВыборкаЗаписей.ВидПлатежнойКартыПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерПлатежнойКартыПредставление%", СокрЛП(ВыборкаЗаписей.НомерПлатежнойКартыПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПлатежаПредставление%", СокрЛП(ВыборкаЗаписей.ДатаПлатежаПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями()

#КонецОбласти

#Область УстановкаКурсовВалютВЗаголовокФормы

// Добавляет в конец заголовка приложения текущие курсы валют.
//
// Параметры:
//  ЗаголовокПриложения - Строка - текст заголовка приложения;
//  ПриЗапуске          - Булево - Истина, если вызывается при начале работы программы.
//
Процедура ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КурсыВалютЗаголовок = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	КурсыВалютСрезПоследних.Период КАК Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Период,
	|			НЕ Валюта.ПометкаУдаления
	|				И Валюта <> &НациональнаяВалюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДатаСеанса()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(КурсыВалютЗаголовок) Тогда
			КурсыВалютЗаголовок = КурсыВалютЗаголовок + " / ";
		КонецЕсли;
		КурсыВалютЗаголовок = КурсыВалютЗаголовок + Выборка.Валюта.Наименование + " " + Формат(Выборка.Курс/Выборка.Кратность, "ЧДЦ=2");
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КурсыВалютЗаголовок) Тогда
		
		ЗаголовокПриложения = ЗаголовокПриложения + " / " + КурсыВалютЗаголовок;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеПечатью

// Процедура переопределяет отображение подменю "Печать" в формах
//
// Параметры:
//  ГруппаФормыПечать	 - ГруппаФормы	 - элемент формы, содержащий команды печати
//
Процедура УстановитьОтображаниеПодменюПечати(ГруппаФормыПечать) Экспорт
	
	ГруппаФормыПечать.Вид			= ВидГруппыФормы.Подменю;
	ГруппаФормыПечать.Отображение	= ОтображениеКнопки.Картинка;
	ГруппаФормыПечать.Картинка		= БиблиотекаКартинок.Печать;
	ГруппаФормыПечать.Подсказка		= НСтр("ru='Печать с предварительным просмотром'");
	ГруппаФормыПечать.Заголовок		= НСтр("ru='Печать'");
	
КонецПроцедуры

// Функция проверяет возможность выполнения команды печати в серверном контексте
//
// Параметры:
//  ОписаниеКомандыПечати	 - СтрокаТаблицыЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати()
// 
// Возвращаемое значение:
//  булево - истина означает, что для команды печати определен вывод в табличный документ с использованием процедуры Печать() в модуле менеджера печати
//
Функция КомандаПечатаетсяВСерверномКонтексте(знач ОписаниеКомандыПечати) Экспорт
	
	Если ОписаниеКомандыПечати.Представление = НСтр("ru='Настраиваемый комплект документов'") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КомандыИсключения = Новый Массив;
	КомандыИсключения.Добавить("БланкДоговора");
	КомандыИсключения.Добавить("Конверт");
	КомандыИсключения.Добавить("ТН");
	КомандыИсключения.Добавить("УниверсальныйПередаточныйДокумент");
	КомандыИсключения.Добавить("УниверсальныйКорректировочныйДокумент");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзОприходованиеЗапасов");
	КомандыИсключения.Добавить("ПечатьЦенниковИзОприходованиеЗапасов");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзПеремещенияТоваров");
	КомандыИсключения.Добавить("ПечатьЦенниковИзПеремещенияТоваров");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзПриходнойНакладной");
	КомандыИсключения.Добавить("ПечатьЦенниковИзПриходнойНакладной");
	
	Возврат КомандыИсключения.Найти(ОписаниеКомандыПечати.Идентификатор) = Неопределено;
	
КонецФункции

Функция ОтображатьКомандуПриВыключеннойФО(ОписаниеКомандыПечати) Экспорт
	
	КомандыИсключения = Новый Массив;
	КомандыИсключения.Добавить("ДоговорКонтрагента_DOC");
	КомандыИсключения.Добавить("ДоговорКонтрагента_HTML");
	
	Возврат НЕ КомандыИсключения.Найти(ОписаниеКомандыПечати.Идентификатор) = Неопределено;
	
КонецФункции

#КонецОбласти
