////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АутентификацияВСервисахИнтернетПоддержки

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//	Структура - структура, содержащая логин и пароль пользователя
//		Интернет-поддержки:
//		* Логин - Строка - логин пользователя Интернет-поддержки;
//		* Пароль - Строка - пароль пользователя Интернет-поддержки.
//	Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы(),
		"login,password");

	Если ДанныеВБезопасномХранилище.login <> Неопределено
		И ДанныеВБезопасномХранилище.password <> Неопределено Тогда
		Возврат Новый Структура(
			"Логин, Пароль",
			ДанныеВБезопасномХранилище.login,
			ДанныеВБезопасномХранилище.password);
	КонецЕсли;

КонецФункции

// Возвращает тикет аутентификации пользователя на портале поддержки.
// Возвращенный тикет может быть проверен вызовом операции checkTicket()
// сервиса https://login.1c.ru/api/public/ticket?wsdl или
// https://login.1c.eu/api/public/ticket?wsdl.
// Получение тикета выполняется в соответствии с настройками
// библиотеки:
//	- доменная зона серверов (1c.ru или 1c.eu);
//
// Параметры:
//	ВладелецТикета - Строка - произвольное имя сервиса, для которого
//		выполняется аутентификация пользователя. Это же имя должно
//		использоваться при вызове операции checkTicket();
//		Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//	Структура - результат получения тикета. Поля структуры:
//		* Тикет - Строка - полученный тикет аутентификации. Если при получении
//			тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//			значение поля - пустая строка.
//		* КодОшибки - Строка - строковый код возникшей ошибки, который
//			может быть обработан вызывающим функционалом:
//				- <Пустая строка> - получение тикета выполнено успешно;
//				- "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//				- "ПревышеноКоличествоПопыток" - превышено количество попыток
//					получения тикета с некорректным логином и паролем;
//				- "ОшибкаПодключения" - ошибка при подключении к сервису;
//				- "ОшибкаСервиса" - внутренняя ошибка сервиса;
//				- "НеизвестнаяОшибка" - при получении тикета возникла
//					неизвестная (не обрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//			может быть отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//			может быть записано в журнал регистрации.
//
Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт

	Если Не ЗначениеЗаполнено(ВладелецТикета) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ВладелецТикета""'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Работа в модели сервиса.
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		Результат = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			ВладелецТикета);
		
	Иначе
		
		НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
		Результат = СлужебнаяТикетАутентификации(
			,
			,
			ВладелецТикета,
			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами());
		
	КонецЕсли;
	
	Если Результат.КодОшибки = "ОперацияНеПоддерживается" Тогда
		// Для внешней функциональности ошибка
		// интерпретируется как ошибка подключения к сервису.
		Результат.КодОшибки = "ОшибкаПодключения";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнение данных аутентификации пользователя
// Интернет-поддержки.
//
// Возвращаемое значение:
//	Булево - признак заполнения данных аутентификации.
//		Истина - данные аутентификации заполнены,
//		Ложь - в противном случае.
//
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат (ДанныеАутентификацииПользователяИнтернетПоддержки() <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	РежимРаботыЛокальный = Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.РазделениеВключено();
	РежимРаботыЭтоАдминистраторСистемы =
		Пользователи.ЭтоПолноправныйПользователь(, Истина);
	
	Элементы.БИПГруппаНастройки.Видимость = Истина;
	Элементы.ГруппаПодключениеИПП.Видимость = ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки();
	Элементы.БИПСообщениеВСлужбуТехническойПоддержки.Видимость = РежимРаботыЛокальный;
	
	Элементы.БИППодключатьсяКСерверамВЗонеEu.Видимость =
		ИнтернетПоддержкаПользователейВызовСервера.ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке();
	Если Элементы.БИППодключатьсяКСерверамВЗонеEu.Видимость Тогда
		Форма.БИППодключатьсяКСерверамВЗонеEu = (Константы.ДоменРасположенияСерверовИПП.Получить() = 1);
	КонецЕсли;
	
	// Состояние подключения Интернет-поддержки
	Если Элементы.ГруппаПодключениеИПП.Видимость Тогда
		УстановитьПривилегированныйРежим(Истина);
		Форма.БИПДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Форма.БИПДанныеАутентификации <> Неопределено
			И Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			Форма.БИПДанныеАутентификации.Пароль = "";
		КонецЕсли;
		ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(Форма);
	КонецЕсли;
	// Конец Состояние подключения Интернет-поддержки
	
	// МониторИнтернетПоддержки
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		МодульМониторИнтернетПоддержки = ОбщегоНазначения.ОбщийМодуль("МониторИнтернетПоддержки");
		Элементы.БИПМониторИнтернетПоддержки.Видимость = МодульМониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки();
	Иначе
		Элементы.БИПМониторИнтернетПоддержки.Видимость = Ложь;
	КонецЕсли;
	// Конец МониторИнтернетПоддержки
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаНовости.Видимость = Ложь;
	КонецЕсли;
	// Конец Новости
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаОбновлениеПрограммы.Видимость = Ложь;
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаПроверкаКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#Область БСПБазоваяФункциональность

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Параметры.Свойство("ИнтернетПоддержкаПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИПП = Новый Структура;
	
	ОписаниеОбработчиков = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	
	Для каждого ИмяМодуля Из ОписаниеОбработчиков.Сервер.ПараметрыРаботыКлиентаПриЗапуске Цикл
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыИПП.Вставить("ПриНачалеРаботыСистемы", ОписаниеОбработчиков.Клиент.ПриНачалеРаботыСистемы);
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Если Параметры.Свойство("ИнтернетПоддержкаПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИПП = Новый Структура;

	ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
	ПараметрыИПП.Вставить("ИмяПрограммы"             , ИмяПрограммы());
	ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);
	ПараметрыИПП.Вставить("КодЛокализации"           , ТекущийКодЛокализации());
	ПараметрыИПП.Вставить("ВерсияОбработкиОбновления", ВерсияОбработкиОбновления());

	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	ПараметрыИПП.Вставить("ДоменРасположенияСерверовИПП", НастройкиСоединения.ДоменРасположенияСерверовИПП);

	ПараметрыИПП.Вставить(
		"ДоступноПодключениеИнтернетПоддержки",
		ДоступноПодключениеИнтернетПоддержки());

	// Обработчики бизнес-процессов
	ПараметрыИПП.Вставить("КлиентскиеОбработчикиБизнесПроцессов",
		ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Клиент.БизнесПроцессы);
	
	// Добавление параметров подсистем.
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриДобавленииПараметровРаботыКлиента(ПараметрыИПП);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	// Базовая функциональность БИП
	// 2.1.2.1
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.1.2.1",
		"Роль.ИспользованиеИПП",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса().
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПараметрыКлиентаНаСервереБИП", "ИнтернетПоддержкаПользователей.УстановкаПараметровСеанса");
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец Новости
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда

		НовыеРазрешения = Новый Массив;

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"webits.1c.ru",
			443,
			НСтр("ru = 'Интернет-поддержка пользователей (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.ru",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.eu",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.ru",
			443,
			НСтр("ru = 'Сервисы службы технической поддержки (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.eu",
			443,
			НСтр("ru = 'Сервисы службы технической поддержки (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);

		ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));

		// ПолучениеОбновленийПрограммы
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
			МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
			МодульПолучениеОбновленийПрограммы.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
		// Конец ПолучениеОбновленийПрограммы

	КонецЕсли;
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРК
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец СПАРК
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец Новости
	
КонецПроцедуры

#КонецОбласти

#Область БСППользователи

// См. процедуру
// ПользователиПереопределяемый.ПриОпределенииНазначенияРолей().
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

#КонецОбласти

#Область БСПТекущиеДела

// См. процедуру
// ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел().
//
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт

	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		Обработчики.Добавить(МодульПолучениеОбновленийПрограммы);
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		Обработчики.Добавить(МодульСПАРКРиски);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		Обработчики.Добавить(МодульОблачныйАрхив);
	КонецЕсли;
	// Конец ОблачныйАрхив

КонецПроцедуры

// См. процедуру
// ТекущиеДелаПереопределяемый.ПриОпределенииПорядкаРазделовКомандногоИнтерфейса().
//
Процедура ПриОпределенииПорядкаРазделовКомандногоИнтерфейса(Разделы) Экспорт

	Разделы.Добавить(Метаданные.Подсистемы.ИнтернетПоддержкаПользователей);

КонецПроцедуры

#КонецОбласти

#Область БСПВариантыОтчетов

// Интеграция с подсистемой СтандартныеПодсистемы.ВариантыОтчетов.
//
// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоПредопределенных().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#Область БСПЦентрМониторинга

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриПолученииСпискаШаблонов(Шаблоны);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ПоставляемыеДанныеПереопределяемый.
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		СтрОбработчик = Обработчики.Добавить();
		СтрОбработчик.ВидДанных      = "ТипыСобытийМониторинга1СПАРКРиски";
		СтрОбработчик.КодОбработчика = "ТипыСобытийМониторинга1СПАРКРиски";
		СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке().
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки().
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец СПАРКРиски

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец Новости

	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец ОблачныйАрхив

КонецПроцедуры

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных().
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. процедуру ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	Услуги = Новый Массив;
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	// Конец СПАРКРиски
	
	Если Услуги.Количество() > 0 Тогда
		// Поставщик добавляет только при наличии услуг.
		ПоставщикПортал1СИТС = ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоставщикПортал1СИТС.Услуги, Услуги);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание поставщика "Портал 1С:ИТС" для заполнения списка услуг
// в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
// Поставщик добавляется в список поставщиков.
//
// Параметры:
//	ПоставщикиУслуг - Массив - массив элементов типа Структура - описание поставщиков.
//		Подробное описание параметра см. в процедуре ПриФормированииСпискаУслуг.
//
// Возвращаемое значение:
//	Структура - см. процедуру ПриФормированииСпискаУслуг,
//		описание параметра ПоставщикиУслуг.
//
// Пример:
//	// Использование в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//	ПоставщикПортал1СИТС =
//		ИнтернетПоддержкаПользователей.ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
//	НоваяУслуга = Новый Структура;
//	НоваяУслуга.Вставить("Идентификатор", <Идентификатор услуги>);
//	НоваяУслуга.Вставить("Наименование" , <Наименование услуги>);
//	НоваяУслуга.Вставить("ТипУслуги"    , <Тип услуги>);
//	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
//
Функция ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для Каждого ТекущийПоставщик Из ПоставщикиУслуг Цикл
		Если ТекущийПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			Возврат ТекущийПоставщик;
		КонецЕсли;
	КонецЦикла;
	
	// Поставщика еще нет в списке - добавить нового поставщика.
	ПоставщикПортал1СИТС = Новый Структура;
	ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
	ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
	ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
	ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	
	Возврат ПоставщикПортал1СИТС;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВнедренияПодсистемБИП

// Производит проверку внедрения Интернет-поддержка пользователей в конфигурацию потребитель,
// путем сравнения настроек текущей конфигурации с эталонными настройками.
// В функцию необходимо вставлять вызовы проверок подсистем Интернет-поддержка пользователей.
//
/// Возвращаемое значение:
//  ТаблицаЗначений - содержит описания ошибок внедрения см. функцию НовыйОписательОшибокПроверкиВнедрения().
//
Функция ПроверитьПравильностьВнедренияПодсистемБИП() Экспорт
	
	ОписательОшибок = НовыйОписательОшибокПроверкиВнедрения();
	ОбъектыБИП      = ОбъектыПодсистемБИП(2);
	
	ПроверитьВерсиюСтандартныхПодсистем(ОписательОшибок);
	
	Если ОписательОшибок.Количество() <> 0 Тогда
		Возврат ОписательОшибок;
	КонецЕсли;
	
	ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	
	// ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		МодульМониторИнтернетПоддержки = ОбщегоНазначения.ОбщийМодуль("МониторИнтернетПоддержки");
		МодульМониторИнтернетПоддержки.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
	
	// ИнтернетПоддержкаПользователей.ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ОблачныйАрхив
	
	// ИнтернетПоддержкаПользователей.РаботаВМоделиСервиса
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаВМоделиСервиса
	
	// ИнтернетПоддержкаПользователей.Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// ИнтернетПоддержкаПользователей.Подключение1СТакском
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакском = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакском");
		МодульПодключение1СТакском.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Подключение1СТакском
	
	// ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Возврат ОписательОшибок;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей редакции библиотеки.
// Следует использовать процедуру
// ПриДобавленииПараметровРаботыКлиентаПриЗапуске().
//
// Параметры:
//	Параметры - см. процедуру ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	
КонецПроцедуры

// Устарела. Будет удалена в следующей редакции библиотеки.
// Следует использовать процедуру
// ПриДобавленииПараметровРаботыКлиента().
//
// Параметры:
//	Параметры - см. процедуру ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента.
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	ПриДобавленииПараметровРаботыКлиента(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// В вызывающем коде перед записью данных необходимо проверить права
// и установить привилегированный режим.
// Сохраняет логин и пароль пользователя в подсистеме Интернет-поддержки.
//
Функция СохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт

	Если ДанныеАутентификации = Неопределено Тогда

		// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());
		ПриУдаленииЛогинаИПароляИзИБ();

	Иначе

		// Запись данных в безопасное хранилище
		ИДПодсистемы = ИдентификаторПодсистемы();
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Логин,
				"login");

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Пароль,
				"password");
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		ПриСохраненииЛогинаИПароляВИБ(ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);

	КонецЕсли;

КонецФункции

// Возвращает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя получаемого свойства;
//	ЗначениеПоУмолчанию - Произвольный - значение свойства,
//		которое необходимо возвратить при отсутствии сохраненного свойства.
//
// Возвращаемое значение:
//	Произвольный - значение свойства.
//
Функция ЗначениеСвойстваБИП(Имя, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	СвойстваБИП = Константы.СвойстваБИП.Получить().Получить();
	Если ТипЗнч(СвойстваБИП) <> Тип("Соответствие") Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = СвойстваБИП.Получить(Имя);
	Если Результат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя устанавливаемого свойства;
//	Значение - - Произвольный - значение устанавливаемого свойства.
//
Процедура УстановитьЗначениеСвойстваБИП(Имя, Значение) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.СвойстваБИП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Блокировка.Заблокировать();
	Попытка
		
		СвойстваБИП = Константы.СвойстваБИП.Получить().Получить();
		Если ТипЗнч(СвойстваБИП) <> Тип("Соответствие") Тогда
			СвойстваБИП = Новый Соответствие;
		КонецЕсли;
		
		СвойстваБИП.Вставить(Имя, Значение);
		Константы.СвойстваБИП.Установить(Новый ХранилищеЗначения(СвойстваБИП));
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет, доступно ли текущему пользователю выполнение интерактивной
// авторизации в на портале 1С:ИТС в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - интерактивная авторизация доступна,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;

	// Проверка функциональности, дающей возможность подключения ИПП
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		МодульМониторИнтернетПоддержки = ОбщегоНазначения.ОбщийМодуль("МониторИнтернетПоддержки");
		Если МодульМониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакскомВызовСервера = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакскомВызовСервера");
		Если МодульПодключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Выполняет проверку, что переданный объект имеет тип СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
Функция ЭтоИдентификаторОбъектаМетаданных(Объект) Экспорт
	
	Возврат ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		СообщениеОбОшибке);
	
КонецПроцедуры

// Записывает в журнал регистрации сообщение информации
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	Сообщение - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(),
		УровеньЖурналаРегистрации.Информация,
		,
		Данные,
		Сообщение);
	
КонецПроцедуры

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
//   Булево - Истина, если это разделенная конфигурация.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ЭтоРазделеннаяКонфигурация();
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
//   Булево - Истина, если сеанс запущен без разделителей.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.СеансЗапущенБезРазделителей();
	
КонецФункции

// Возвращает значение разделителя сеанса.
//
Функция ЗначениеРазделителяСеанса() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Возврат МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
КонецФункции

// Возвращает имя программы в сервисах Интернет-поддержки.
//
Функция ИмяПрограммы() Экспорт

	Результат = "";
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы(Результат);
	Если ПустаяСтрока(Результат) Тогда
		Результат = "Unknown";
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция СинонимКонфигурации() Экспорт

	Возврат Метаданные.Синоним;

КонецФункции

// Возвращает Истина, если у текущего пользователя есть право записи параметров ИПП.
// Ложь - в противном случае.
//
Функция ПравоЗаписиПараметровИПП() Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь)
		Или Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки")
		И Пользователи.РолиДоступны("ИспользованиеМонитораИПП", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском")
		И Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь);

КонецФункции

#Область Тарификация

Функция УслугаПодключена(ИдентификаторУслуги, ЗначениеРазделителя = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		// В локальном режиме нет функциональности
		// для проверки по данным ИБ.
		Возврат Истина;
	Иначе
		
		ТребуетсяРазделение = Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		Если ТребуетсяРазделение Тогда
			Если ЗначениеРазделителя = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ЗначениеРазделителя"".'");
			КонецЕсли;
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МодульРаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
		КонецЕсли;
		
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		Результат = МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
			ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
			ИдентификаторУслуги);
		
		Если ТребуетсяРазделение Тогда
			МодульРаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		Если Не Результат Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Услуга с идентификатором %1 не подключена.'"),
					ИдентификаторУслуги));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервисов

Функция ДополнительныеПараметрыВызоваОперацииСервиса() Экспорт
	
	Результат = Новый Соответствие;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ClientPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ClientOSVersion", СистИнфо.ВерсияОС);
		
	Иначе
		
		ПараметрыКлиента = ПараметрыКлиента();
		Если ПараметрыКлиента <> Неопределено Тогда
			
			Если ПараметрыКлиента.Свойство("ТипПлатформы") Тогда
				Результат.Вставить("ClientPlatformType", ПараметрыКлиента.ТипПлатформы);
			КонецЕсли;
			
			Если ПараметрыКлиента.Свойство("ВерсияОС") Тогда
				Результат.Вставить("ClientOSVersion", ПараметрыКлиента.ВерсияОС);
			КонецЕсли;
			
		КонецЕсли;
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ServerPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ServerOSVersion", СистИнфо.ВерсияОС);
		
	КонецЕсли;
	
	Результат.Вставить("PlatformVersion", СистИнфо.ВерсияПриложения);
	
	Результат.Вставить("LibraryVersion",
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	Результат.Вставить("ConfigName",
		ИнтернетПоддержкаПользователейКлиентСервер.ИмяКонфигурации());
	Результат.Вставить("ConfigVersion",
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации());
	Результат.Вставить("Vendor", Метаданные.Поставщик);
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат.Вставить("IBID",
			СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	КонецЕсли;
	Результат.Вставить("ConfigLanguage", КодЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("ConfigMainLanguage", КодОсновногоЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("CurLocalizationCode", ТекущийКодЛокализации());
	Результат.Вставить("SystemLanguage", ТекущийЯзыкСистемы());
	Результат.Вставить("ClientTimeOffsetGMT",
		Формат((ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()), "ЧГ=0"));
	
	Результат.Вставить("countryId", "");
	
	Результат.Вставить(
		"IBIsSeparated",
		?(ОбщегоНазначения.РазделениеВключено(), "true", "false"));
	Результат.Вставить("IBUserName", Строка(ИмяПользователя()));
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	Если НастройкиСоединения.ДоменРасположенияСерверовИПП = 0 Тогда
		Результат.Вставить("DomainZone", "ru");
	ИначеЕсли НастройкиСоединения.ДоменРасположенияСерверовИПП = 1 Тогда
		Результат.Вставить("DomainZone", "eu");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры клиентского приложения.
// См. описание функции ПараметрыКлиента() в общем модуле
// ИнтернетПоддержкаПользователейКлиент.
//
Функция ПараметрыКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП;
	
КонецФункции

#КонецОбласти

#Область ЛогИОтладка

// Процедура записывает сообщение в журнал регистрации.
//
// Параметры:
//  ИмяСобытия                      - строка;
//  ИдентификаторШага               - строка;
//  УровеньРегистрации              - строковое представление константы УровеньЖурналаРегистрации;
//  ОбъектМетаданных                - строковое представление объекта метаданных;
//  Данные                          - данные;
//  Комментарий                     - строка - произвольный комментарий;
//  ВестиПодробныйЖурналРегистрации - Булево - признак записи незначащих событий (Информации и Примечания).
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации = "Ошибка", // Идентификатор.
			ОбъектМетаданных = "",
			Данные = Неопределено,
			Комментарий = "",
			ВестиПодробныйЖурналРегистрации = Ложь) Экспорт

	ОбъектМетаданныхЛокальный = Неопределено;
	Попытка
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			Если ПустаяСтрока(ОбъектМетаданных) Тогда
				ОбъектМетаданныхЛокальный = Неопределено;
			Иначе
				ОбъектМетаданныхЛокальный = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
			ОбъектМетаданныхЛокальный = ОбъектМетаданных;
		Иначе
			ОбъектМетаданныхЛокальный = Неопределено;
		КонецЕсли;
	Исключение
		ОбъектМетаданныхЛокальный = Неопределено;
	КонецПопытки;

	Если ВРег(УровеньРегистрации) = ВРег("Информация") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Предупреждение") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Примечание") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Примечание;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Ошибка") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ТипЗнч(УровеньРегистрации) = Тип("УровеньЖурналаРегистрации") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньРегистрации;
	Иначе
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;

	// Сообщения Информация, Примечание писать только если включена настройка "ЖурналРегистрации_ПодробнаяЗапись",
	//  которую можно получить ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации() или другим способом (для других подсистем).

	ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Ложь;
	Если УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли ВестиПодробныйЖурналРегистрации = Истина Тогда
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	КонецЕсли;

	Если ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина Тогда
		ИмяСобытияЛокальный = СтрЗаменить(ИмяСобытия, ". ", "."); // Точку с пробелом менять на точку
		КомментарийЛокальный = НСтр("ru='Идентификатор шага: %ИдентификаторШага%
			|%Комментарий%'");
		КомментарийЛокальный = СтрЗаменить(КомментарийЛокальный, "%ИдентификаторШага%", ИдентификаторШага);
		КомментарийЛокальный = СтрЗаменить(КомментарийЛокальный, "%Комментарий%", Комментарий);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЛокальный, // ИмяСобытия
			УровеньЖурналаРегистрацииЛокальный, // УровеньЖурналаРегистрации.*
			ОбъектМетаданныхЛокальный, // ОбъектМетаданных
			Данные, // Данные
			КомментарийЛокальный, // Комментарий
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;

КонецПроцедуры

// Выгружает журнал регистрации по событиям во временное хранилище.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий (см. [МодульПодсистемыКлиентСервер].ПолучитьСписокВсехСобытийЖурналаРегистрации).
//  ПараметрыФайлаВыгрузки - Структура, Неопределено - структура с ключами:
//   * Архивировать - Булево - Истина, если необходимо архивировать выгрузку.
//
// Возвращаемое значение:
//   Структура с ключами:
//    * АдресВременногоХранилищаФайла - Строка - Адрес выгруженных данных в хранилище;
//    * ТекстОшибки - Строка - Текст ошибки или пустая строка.
//
Функция ВыгрузитьВсеСобытияЖурналаРегистрации(ПараметрыОтбора, ПараметрыФайлаВыгрузки = Неопределено) Экспорт

	Результат = Новый Структура("АдресВременногоХранилищаФайла, ТекстОшибки", "", "");

	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаАрхива     = ПолучитьИмяВременногоФайла("zip");

	// Если действие - длительное (журнал регистрации очень большой), то возможна ситуация,
	//  когда управление будет передано другому рабочему процессу,
	//  находящемуся на другом сервере и тогда временный каталог может стать недоступен.
	// В этом случае у пользователя выскочит ошибка и надо будет снова попробовать выгрузить данные.

	Попытка

		УстановитьПривилегированныйРежим(Истина);

			Если ТипЗнч(ПараметрыОтбора) = ТипСтруктура Тогда
				ПараметрыОтбораПравильный = Новый Структура("ДатаНачала, ДатаОкончания, Событие");
				ЗаполнитьЗначенияСвойств(ПараметрыОтбораПравильный, ПараметрыОтбора);
				Если ПараметрыОтбораПравильный.ДатаНачала = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
				КонецЕсли;
				Если ПараметрыОтбораПравильный.ДатаОкончания = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
				КонецЕсли;
			КонецЕсли;

			ВыгрузитьЖурналРегистрации(
				ИмяВременногоФайла,
				ПараметрыОтбораПравильный);

			ФайлВременный = Новый Файл(ИмяВременногоФайла);
			Если ФайлВременный.Существует() Тогда
				Архивировать = Ложь;
				Если ТипЗнч(ПараметрыФайлаВыгрузки) = ТипСтруктура Тогда
					Если (ПараметрыФайлаВыгрузки.Свойство("Архивировать"))
							И (ПараметрыФайлаВыгрузки.Архивировать = Истина) Тогда
						Архив = Новый ЗаписьZipФайла(
							ИмяФайлаАрхива,
							, // Без пароля
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Выгрузка журнала регистраций библиотеки БИП за период %1...%2'"),
								Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
								Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")),
							МетодСжатияZIP.Сжатие,
							УровеньСжатияZIP.Максимальный);
						Архив.Добавить(ИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
						Архив.Записать();
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаАрхива)));
					Иначе
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла)));
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат.Вставить("ТекстОшибки",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Файл с выгрузкой событий журнала регистрации не существует.
							|Возможно, отсутствуют события за указанный период (%1...%2).'"),
						Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
						Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")));
			КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	Исключение

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось экспортировать события журнала регистрации в файл по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Результат.Вставить("ТекстОшибки", ТекстСообщения);

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия
			НСтр("ru='БазовыйФункционал. Отладка. Экспорт журнала регистрации'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения); // Комментарий

	КонецПопытки;

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки; 

	Попытка
		УдалитьФайлы(ИмяФайлаАрхива);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки; 

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроверкаВнедренияПодсистемБИП

// Добавляет описание настроек прав доступа для объекта метаданных.
//
// Параметры:
//  Состав  - Массив - содержит значения типа Структура, описывающие состав общего реквизита;
//  ОбъектМетаданных  - Метаданные - объект метаданных, для которого добавляется настройка;
//  Использование  - Строка - значение свойства "Использование" для состава общего реквизита;
//
Процедура ДобавитьНастройкуПроверкиОбщегоРеквизита(
		Состав,
		ОбъектМетаданных,
		Использование) Экспорт
	
	СвойстваСоставаОР = Новый Структура;
	СвойстваСоставаОР.Вставить("Использование", Использование);
	СвойстваСоставаОР.Вставить("Метаданные",    ОбъектМетаданных);
	
	Состав.Добавить(СвойстваСоставаОР);

КонецПроцедуры

// Добавляет описание настроек прав доступа для объекта метаданных.
//
// Параметры:
//  НастройкиРоли  - Массив - содержит значения типа Структура, описывающие настройки прав доступа на объекты метаданных;
//  ОбъектМетаданных  - Метаданные - объект метаданных, для которого добавляется настройка;
//  ПраваДоступа  - Строка - список прав через ",";
//  ЗначениеПравДоступа  - Булево - значение доступа для прав доступа.
//
Процедура ДобавитьНастройкуПроверкиРоли(
		НастройкиРоли,
		ОбъектМетаданных,
		Знач ПраваДоступа,
		ЗначениеПравДоступа) Экспорт
	
	ПраваДоступа = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПраваДоступа);
	
	ЗначенияПравДоступа = Новый Структура;
	Для каждого ПравоДоступа Из ПраваДоступа Цикл
		ЗначенияПравДоступа.Вставить(ПравоДоступа, ЗначениеПравДоступа);
	КонецЦикла;
	
	СвойстваРоли = Новый Структура;
	СвойстваРоли.Вставить("ОбъектМетаданных",    ОбъектМетаданных);
	СвойстваРоли.Вставить("ЗначенияПравДоступа", ЗначенияПравДоступа);
	
	НастройкиРоли.Добавить(СвойстваРоли);
	
КонецПроцедуры

// Производит проверку правильности настройки ролей, общих реквизитов и определяемых типов.
// При проверке текущие настройки конфигурации сравниваются с эталонными настройками БИП, которые
// формируются в функциях НовыйОписательЭталонныхНастроек(). Обнаруженные ошибки внедрения
// записываются в таблицу ОписательОшибок.
//
// Параметры:
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - подсистема для которой, производится проверка внедрения;
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//  ОбъектыБИП - Соответствие - метаданные БИП, см. функцию ИнтернетПоддержкаПользователей.ОбъектыПодсистемИИП().
//
Процедура ПроверитьВнедрениеОбъектов(
		ОписательОшибок,
		Подсистема,
		Знач ОписательСвойствОбъектовБИП,
		ОбъектыБИП) Экспорт
	
	ПроверитьВнедрениеОбщихРеквизитов(
		ОписательОшибок,
		Подсистема,
		ОписательСвойствОбъектовБИП,
		ОбъектыБИП);
	
	ПроверитьВнедрениеОпределяемыхТипов(
		ОписательОшибок,
		Подсистема,
		ОписательСвойствОбъектовБИП,
		ОбъектыБИП);
	
	ПроверитьВнедренияРолей(
		ОписательОшибок,
		Подсистема,
		ОписательСвойствОбъектовБИП,
		ОбъектыБИП);
	
КонецПроцедуры

// Возвращает соответствие подсистем и модулей, в которых должны располагаться
// обработчики проверки БИП.
//
// Возвращаемое значение:
//  Соответствие - содержит соответствие модуля подсистеме.
//
Функция МодулиПодсистемПроверкиВнедренияБИП() Экспорт
	
	ПодсистемаИПП = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей.Имя;
	
	МодулиПодсистем = Новый Соответствие;
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".БазоваяФункциональностьБИП",   "ИнтернетПоддержкаПользователей");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".МониторИнтернетПоддержки",     "МониторИнтернетПоддержки");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".Новости",                      "ОбработкаНовостей");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".ОблачныйАрхив",                "ОблачныйАрхив");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".Подключение1СТакском",         "Подключение1СТакском");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".ПолучениеОбновленийПрограммы", "ПолучениеОбновленийПрограммы");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".РаботаВМоделиСервиса",         "ИнтернетПоддержкаПользователейВМоделиСервиса");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".РаботаСКонтрагентами",         "РаботаСКонтрагентами");
	МодулиПодсистем.Вставить(ПодсистемаИПП + ".СПАРКРиски",                   "СПАРКРиски");
	
	Возврат МодулиПодсистем;
	
КонецФункции

// Возвращает минимальную версию БСП,
// с которой возможна работа БИП.
//
// Возвращаемое значение:
//   Строка - номер версии БСП
//
Функция МинимальнаяВерсияБСП() Экспорт
	
	Возврат "2.4.2.1";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления() Экспорт

	Возврат СтандартныеПодсистемыСервер.ВерсияБиблиотеки();

КонецФункции

// Возвращает имена модулей подсистем, реализующих обработку событий библиотеки.
//
// Возвращаемое значение:
//	Массив - массив элементов типа Строка - имена модулей подсистем,
//		реализующих заполнение описаний обработчиков событий.
//
// Описание модулей подсистем:
//
// Каждый модуль, имя которого возвращается функцией, должен реализовывать
// экспортную процедуру служебного программного интерфейса, реализующую
// заполнение описания обработчиков событий.
//
// Процедура ДобавитьОбработчикиСобытий(СерверныеОбработчики, КлиентскиеОбработчики) Экспорт
//
// КонецПроцедуры
//
// Подробную информацию по реализации процедур см. в описании функции
// ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().
//
Функция МодулиПодсистем() Экспорт

	Результат = Новый Массив;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		Результат.Добавить("МониторИнтернетПоддержки");
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		Результат.Добавить("Подключение1СТакском");
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Результат.Добавить("ПолучениеОбновленийПрограммы");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает серверный обработчик бизнес-процесса.
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс;
//	ИмяСобытия - Строка - имя обрабатываемого события.
//
// Возвращаемое значение:
//	ОбщийМодуль - модуль, содержащий заданный обработчик бизнес-процесса;
//	Неопределено - если обработчик бизнес-процесса неопределен.
//
Функция СерверныйОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия) Экспорт

	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОбработчикиСобытий = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	МодулиОбработчиковБизнесПроцессов = ОбработчикиСобытий.Сервер.БизнесПроцессы;
	ИмяМодуля = МодулиОбработчиковБизнесПроцессов[МестоЗапуска + "\" + ИмяСобытия];

	Если ИмяМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);

КонецФункции

// Возвращает сохраненный регистрационный номер программного продукта.
//
Функция РегистрационныйНомерПрограммногоПродукта() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы(), "regnumber");

КонецФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат "ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП";
	
КонецФункции

// Установка параметров сеанса базовой функциональности БИП.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ПараметрыКлиентаНаСервереБИП"
		И УстановленныеПараметры.Найти("ПараметрыКлиентаНаСервереБИП") = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП = Новый ФиксированнаяСтруктура(Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Ошибка'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращается имя события журнала регистрации для записи информационных
// сообщений Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события информационного сообщения Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Информация'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ВестиПодробныйЖурналРегистрации()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Аутентификация

Функция URLОперацииПолучитьТикет(ДоменРасположенияСерверовИПП)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/ticket/get";

КонецФункции

Функция URLСервисаПроверкиПаролей(ДоменРасположенияСерверовИПП)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/user/auth";

КонецФункции

Функция ПараметрыTicketGetJSON(Логин, Пароль, ВладелецТикета)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("serviceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВладелецТикета);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

// Внутренняя функция для получения тикетов аутентификации.
//
Функция СлужебнаяТикетАутентификации(
	Знач Логин,
	Знач Пароль,
	Знач ИмяСервиса,
	НастройкиСоединения,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Тикет"             , Неопределено);
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Логин  = ДанныеАутентификации.Логин;
			Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения =
			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	URLСервиса = URLОперацииПолучитьТикет(
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыTicketGetJSON(Логин, Пароль, ИмяСервиса));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);

	РезультатОперации = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Попытка
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОперации.Содержимое);
			ОтветОбъект = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Результат.Тикет = ОтветОбъект.ticket;
			
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			Результат.КодОшибки = "ОшибкаСервиса";
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
					|Некорректный ответ сервиса.
					|Ошибка при обработке ответа сервиса:
					|%2
					|Код состояния: %3;
					|Тело ответа: %4'"),
				URLСервиса,
				ПодробноеПредставлениеОшибки(ИнфОшибка),
				РезультатОперации.КодСостояния,
				Лев(РезультатОперации.Содержимое, 5120));
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации. Некорректный ответ сервиса.'");
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.
			|Повторите попытку позже.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 500 Тогда
		
		Результат.КодОшибки          = "ОшибкаСервиса";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Внутренняя ошибка сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Ошибка аутентификации. Внутренняя ошибка сервиса.
				|Подробнее см. в журнале регистрации.'");
		
	ИначеЕсли РезультатОперации.КодСостояния = 0 Тогда
		
		Результат.КодОшибки         = "ОшибкаПодключения";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|%2'"),
			URLСервиса,
			РезультатОперации.ИнформацияОбОшибке);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения к сервису.
			|Подробнее см. в журнале регистрации.'");
		
	Иначе
		
		Результат.КодОшибки = "НеизвестнаяОшибка";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Неизвестный код состояния ответа сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка аутентификации в сервисе (%1).
					|Подробнее см. в журнале регистрации.'"),
				РезультатОперации.КодСостояния);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПараметрыAuthJSON(Логин, Пароль)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция ПроверитьЛогинИПароль(Логин, Пароль) Экспорт

	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, Результат", "", "", Ложь);

	НастройкиСоединенияССерверами =
		ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	URLСервиса = URLСервисаПроверкиПаролей(НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыAuthJSON(Логин, Пароль));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	
	РезультатПолученияФайла =
		ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
			URLСервиса,
			,
			,
			ДопПараметрыЗапроса);

	Если РезультатПолученияФайла.КодСостояния = 200 Тогда

		Результат.Результат = Истина;

	ИначеЕсли РезультатПолученияФайла.КодСостояния = 403 Тогда

		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль.'");

	ИначеЕсли РезультатПолученияФайла.КодСостояния = 429 Тогда

		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Повторите попытку позже.'");

	Иначе

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось проверить логин и пароль в сервисе %1. %2'"),
				URLСервиса,
				РезультатПолученияФайла.ИнформацияОбОшибке));

		Результат.КодОшибки         = РезультатПолученияФайла.КодОшибки;
		Результат.СообщениеОбОшибке = РезультатПолученияФайла.СообщениеОбОшибке;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработкаСобытийБиблиотеки

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль)
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации(Логин, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// Переопределяемая обработка события.
	ИнтернетПоддержкаПользователейПереопределяемый.ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки(
		Новый Структура("Логин, Пароль", Логин, Пароль));

КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
// информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ()

	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации("", "");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// Переопределяемая обработка события
	ИнтернетПоддержкаПользователейПереопределяемый.ПриУдаленииДанныхАутентификацииПользователяИнтернетПоддержки();

КонецПроцедуры

// Вызывается при изменении настройки "Доменная зона расположения серверов ИПП".
//
Процедура ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона) Экспорт

	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Локализация

// Возвращается код текущего языка интерфейса конфигурации
// в формате ISO-639-1.
//
Функция КодЯзыкаИнтерфейсаКонфигурации()

	Язык = ТекущийЯзык();
	Если Язык = Неопределено Тогда
		// Для пользователя информационной базы не указан язык.
		Возврат КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	КонецЕсли;

	КодЯзыкаВМетаданных = ?(ТипЗнч(Язык) = Тип("Строка"), Язык, Язык.КодЯзыка);
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

// Возвращается код основного языка интерфейса конфигурации
// в формате ISO-639-1.
//
Функция КодОсновногоЯзыкаИнтерфейсаКонфигурации()

	КодЯзыкаВМетаданных = Метаданные.ОсновнойЯзык.КодЯзыка;
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

#КонецОбласти

#Область ОбработчикиБизнесПроцессов

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Выполняет запись общих стартовых параметров.
//
Процедура ЗаписатьОбщиеПараметрыИПП(Знач ОбщиеПараметры) Экспорт

	Логин  = Неопределено;
	Пароль = Неопределено;

	ИдентификаторПодсистемы = ИдентификаторПодсистемы();

	// Запись выполняется в транзакции, т.к. данные (например, пара Логин-Пароль)
	// должны зачитываться неделимо другими механизмами.
	НачатьТранзакцию();
	Попытка
		Для каждого КлючЗначение Из ОбщиеПараметры Цикл

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемы,
				КлючЗначение.Значение,
				КлючЗначение.Ключ);

			Если КлючЗначение.Ключ = "login" Тогда
				Логин = КлючЗначение.Значение;
			ИначеЕсли КлючЗначение.Ключ = "password" Тогда
				Пароль = КлючЗначение.Значение;
			КонецЕсли;

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

	Если Логин <> Неопределено И Пароль <> Неопределено Тогда
		ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;

КонецПроцедуры

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Удаление общих стартовых параметров.
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров.
//
Процедура УдалитьОбщиеПараметрыИПП(Знач УдаляемыеИзРС) Экспорт

	УдаленыДанныеАутентификации = Ложь;
	ИДПодсистемы = ИдентификаторПодсистемы();
	НачатьТранзакцию();
	Попытка
		Для каждого КлючЗначение Из УдаляемыеИзРС Цикл

			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы, КлючЗначение.Ключ);

			Если КлючЗначение.Ключ = "login" Или КлючЗначение.Ключ = "password" Тогда
				УдаленыДанныеАутентификации = Истина;
			КонецЕсли;

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

	Если УдаленыДанныеАутентификации Тогда
		ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НастройкиКлиентаЛицензирования

// Возвращает признак возможности работы с настройками клиента лицензирования
// в БИП.
//
// Версия платформы 1С:Предприятие 8.3.7 или выше и не работа в модели сервиса.
//
Функция ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Экспорт

	Возврат Не ОбщегоНазначения.РазделениеВключено();

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка общих данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, для каждой области данных. Установка разделенных данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	// Обработчики, выполняемые при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка общих данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка разделенных данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.7.1";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.8.14";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для общих данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбщиеДанные. ПервыйЗапуск'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для каждой области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	КодРезультатаПоШагам = 0;
	ОписаниеРезультатаПоШагам = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск_Переопределение", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск, Переопределение'"));

	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск();

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		КодРезультатаПоШагам, // Код результата.
		ОписаниеРезультатаПоШагам, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПервыйЗапуск'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для общих данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт

	// Код для заполнения информационной базы при переходе на новую версию.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПерейтиНаВерсию'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для каждой области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

	// Код для заполнения информационной базы при переходе на новую версию.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПерейтиНаВерсию'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса
		Возврат;
	КонецЕсли;

	ЗапросПараметровИПП = Новый Запрос;
	ЗапросПараметровИПП.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""login""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""password""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""regnumber""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор";

	ЗапросПараметровИПП.УстановитьПараметр(
		"ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПараметров = ЗапросПараметровИПП.Выполнить().Выбрать();

	// Запись данных в безопасное хранилище
	ИдентификаторПодсистемыБИП = ИдентификаторПодсистемы();
	Пока ВыборкаПараметров.Следующий() Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемыБИП,
			ВыборкаПараметров.ЗначениеПараметра,
			ВыборкаПараметров.ИмяПараметра);
	КонецЦикла;

	// Очистка неиспользуемого регистра параметров ИПП
	НаборЗаписей = РегистрыСведений.УдалитьПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса.
		Возврат;
	КонецЕсли;
	
	ИдентификаторПодсистемыБИПУстаревший =
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.БазоваяФункциональностьБИП");
	ДанныеВБезопасномХранилищеУстаревшие =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			ИдентификаторПодсистемыБИПУстаревший,
			"login,password,regnumber");
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	Для Каждого КлючЗначение Из ДанныеВБезопасномХранилищеУстаревшие Цикл
		Если КлючЗначение.Значение <> Неопределено Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемы,
				КлючЗначение.Значение,
				КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Удалить устаревшие данные после переноса.
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИПУстаревший);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВнедренияПодсистемы

// Возвращает описание настроек объектов конфигурации для проверки правильности внедрения библиотеки.
//
// Возвращаемое значение: 
//  Соответствие - описание настроек:
//    *Ключ - Строка - Имя объекта метаданных для проверки настроек;
//    *Значение - Структура - значения настроек:
//       **<Имя свойства> - Строка - имя настройки;
//       **<Значение свойства> - Строка - значение настройки.
//
// Пример:
//
//Функция НовыйОписательЭталонныхНастроек()
//
// // Обязательная строка.
// ОписательЭталонныхНастроек = Новый Соответствие;
//
// // Код заполнения настроек.
//
// // Обязательная строка.
// Возврат ОписательЭталонныхНастроек;
//
//КонецФункции
//
Функция НовыйОписательЭталонныхНастроек()
	
	ОписательЭталонныхНастроек = Новый Соответствие;
	
	// Заполнение эталонных настроек общего реквизита
	// ОбластьДанныхОсновныеДанные для проверки внедрения БИП.
	ОбщийРеквизитОбластьДанныхОсновныеДанные = Метаданные.ОбщиеРеквизиты.Найти("ОбластьДанныхОсновныеДанные");
	
	Если ОбщийРеквизитОбластьДанныхОсновныеДанные <> Неопределено Тогда
	
		НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
		Использовать   = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
		СоставОбластьДанныхОсновныеДанные = Новый Массив;
		
		ДобавитьНастройкуПроверкиОбщегоРеквизита(
			СоставОбластьДанныхОсновныеДанные,
			Метаданные.Константы.ДоменРасположенияСерверовИПП,
			НеИспользовать);
		
		СвойстваОбластьДанныхОсновныеДанные = Новый Структура;
		СвойстваОбластьДанныхОсновныеДанные.Вставить("АвтоИспользование", Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
		СвойстваОбластьДанныхОсновныеДанные.Вставить("Состав", СоставОбластьДанныхОсновныеДанные);
		
		ОписательЭталонныхНастроек.Вставить(ОбщийРеквизитОбластьДанныхОсновныеДанные, СвойстваОбластьДанныхОсновныеДанные);
		
	КонецЕсли;
	
	// Заполнение эталонных настроек общего реквизита
	// ОбластьДанныхВспомогательныеДанные для проверки внедрения БИП.
	ОбщийРеквизитОбластьДанныхВспомогательныеДанные = Метаданные.ОбщиеРеквизиты.Найти("ОбластьДанныхВспомогательныеДанные");
	
	Если ОбщийРеквизитОбластьДанныхВспомогательныеДанные <> Неопределено Тогда
		
		СвойстваОбластьДанныхВспомогательныеДанные = Новый Структура;
		СвойстваОбластьДанныхВспомогательныеДанные.Вставить("АвтоИспользование", Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать);
		СвойстваОбластьДанныхВспомогательныеДанные.Вставить("Состав", Неопределено);
		
	КонецЕсли;
	
	// Заполнение эталонных настроек ролей АдминистраторСистемы и ПолныеПрава
	// для проверки внедрения БИП.
	РольАдминистраторСистемы = Метаданные.Роли.Найти("АдминистраторСистемы");
	
	НастройкиРоли = Новый Массив;
	
	ДобавитьНастройкуПроверкиРоли(
		НастройкиРоли,
		Метаданные.Константы.ДоменРасположенияСерверовИПП,
		"Чт,Изм,Пр,Ред",
		Истина);
	
	СвойстваРолиАдминистраторСистемы = Новый Структура;
	СвойстваРолиАдминистраторСистемы.Вставить("НастройкиРоли",                   НастройкиРоли);
	СвойстваРолиАдминистраторСистемы.Вставить("УстанавливатьПраваНовыхОбъектов", Ложь);
	
	ОписательЭталонныхНастроек.Вставить(РольАдминистраторСистемы, СвойстваРолиАдминистраторСистемы);
	
	РольПолныеПрава = Метаданные.Роли.Найти("ПолныеПрава");
	
	НастройкиРоли = Новый Массив;
	
	ДобавитьНастройкуПроверкиРоли(
		НастройкиРоли,
		Метаданные.Константы.ДоменРасположенияСерверовИПП,
		"Изм,Ред",
		Ложь);
	
	ДобавитьНастройкуПроверкиРоли(
		НастройкиРоли,
		Метаданные.РегистрыСведений.УдалитьПараметрыИнтернетПоддержкиПользователей,
		"УпрИ",
		Ложь);
	
	СвойстваРолиПолныеПрава = Новый Структура;
	СвойстваРолиПолныеПрава.Вставить("НастройкиРоли",                   НастройкиРоли);
	СвойстваРолиПолныеПрава.Вставить("УстанавливатьПраваНовыхОбъектов", Истина);
	
	ОписательЭталонныхНастроек.Вставить(РольПолныеПрава, СвойстваРолиПолныеПрава);
	
	
	Возврат ОписательЭталонныхНастроек;
	
КонецФункции

// Производит проверку правильности внедрения подсистемы
// "БазоваяФункциональностьБИП". При проверке производится сравнение текущих
// настроек БИП с эталонным см. функцию НовыйОписательСвойствОбъектовБИП().
//
// Параметры:
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  ОбъектыБИП - Соответствие - метаданные БИП, см. функцию ИнтернетПоддержкаПользователей.ОбъектыПодсистемИИП().
//
Процедура ПроверитьПравильностьВнедрения(ОписательОшибок, ОбъектыБИП)
	
	Подсистема = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей.Подсистемы.БазоваяФункциональностьБИП;
	
	ОписательЭталонныхНастроек = НовыйОписательЭталонныхНастроек();
	
	Если ОписательЭталонныхНастроек.Количество() <> 0 Тогда
		ПроверитьВнедрениеОбъектов(
			ОписательОшибок,
			Подсистема,
			ОписательЭталонныхНастроек,
			ОбъектыБИП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами")
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		ПроверитьНастройкиОпределяемыхТиповКонтрагент(ОписательОшибок, Подсистема);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет настройки определяемых типов КонтрагентБИП, КонтрагентБИПОбъект.
//
Процедура ПроверитьНастройкиОпределяемыхТиповКонтрагент(ОписательОшибок, Подсистема)
	
	ПредставлениеПодсистемы = Подсистема.Синоним;
	
	ТипСсылкаИмя = Новый Соответствие;
	ТипОбъектИмя = Новый Соответствие;
	Для Каждого МетаданныеСправочника Из Метаданные.Справочники Цикл
		ТипСсылкаИмя.Вставить(Тип("СправочникСсылка." + МетаданныеСправочника.Имя), МетаданныеСправочника.Имя);
		ТипОбъектИмя.Вставить(Тип("СправочникОбъект." + МетаданныеСправочника.Имя), МетаданныеСправочника.Имя);
	КонецЦикла;
	
	ТипыКонтрагентСсылка = Метаданные.ОпределяемыеТипы.КонтрагентБИП.Тип.Типы();
	ТипыКонтрагентОбъект = Метаданные.ОпределяемыеТипы.КонтрагентБИПОбъект.Тип.Типы();
	ИмяСправочникаИдентификаторыОбъектовМетаданныхВРег = ВРег("ИдентификаторыОбъектовМетаданных");
	
	// Проверка состава ОпределяемыйТип.КонтрагентБИП.
	КоличествоТиповВСоставе = 0;
	ПредставлениеОбъекта    = "ОпределяемыйТип.КонтрагентБИП";
	Для Каждого ТипСсылка Из ТипыКонтрагентСсылка Цикл
		
		ИмяСправочника = ТипСсылкаИмя.Получить(ТипСсылка);
		Если ИмяСправочника = Неопределено Тогда
			// Не является справочником.
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный тип (%1) в составе определяемого типа.
					|Не допускается включение типов, отличных от СправочникСсылка.*.'"),
				Строка(ТипСсылка));
		КонецЕсли;
		
		Если ВРег(ИмяСправочника) = ИмяСправочникаИдентификаторыОбъектовМетаданныхВРег Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоТиповВСоставе = КоличествоТиповВСоставе + 1;
		
		Если ТипыКонтрагентОбъект.Найти(Тип("СправочникОбъект." + ИмяСправочника)) = Неопределено Тогда
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В составе определяемого типа КонтрагентБИПОбъект отсутствует парный тип СправочникОбъект.%1.'"),
					ИмяСправочника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоТиповВСоставе = 0 Тогда
		СтрокаОшибки = ОписательОшибок.Добавить();
		СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
		СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
		СтрокаОшибки.ОписаниеОшибки   = НСтр("ru = 'Не настроен состав определяемого типа.'");
	КонецЕсли;
	
	
	// Проверка состава ОпределяемыйТип.КонтрагентБИПОбъект.
	КоличествоТиповВСоставе = 0;
	ПредставлениеОбъекта    = "ОпределяемыйТип.КонтрагентБИПОбъект";
	Для Каждого ТипОбъект Из ТипыКонтрагентОбъект Цикл
		
		ИмяСправочника = ТипОбъектИмя.Получить(ТипОбъект);
		Если ИмяСправочника = Неопределено Тогда
			// Не является справочником.
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный тип (%1) в составе определяемого типа.
						|Не допускается включение типов, отличных от СправочникОбъект.*.'"),
					Строка(ТипСсылка));
		КонецЕсли;
		
		Если ВРег(ИмяСправочника) = ИмяСправочникаИдентификаторыОбъектовМетаданныхВРег Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоТиповВСоставе = КоличествоТиповВСоставе + 1;
		
		Если ТипыКонтрагентСсылка.Найти(Тип("СправочникСсылка." + ИмяСправочника)) = Неопределено Тогда
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В составе определяемого типа КонтрагентБИП отсутствует парный тип СправочникСсылка.%1.'"),
					ИмяСправочника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоТиповВСоставе = 0 Тогда
		СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
		СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
		СтрокаОшибки.ОписаниеОшибки   = НСтр("ru = 'Не настроен состав определяемого типа.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВнедренияОбъектовБИП

// Возвращает таблицу, которая используется для заполнения ошибками внедрения
// Интернет-поддержка пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание таблицы ошибок:
//   *Подсистема - Строка - имя подсистемы, в которой производится проверка;
//   *ОбъектМетаданных - Строка - объект метаданных, в котором выявлены ошибки;
//   *ОписаниеОшибки - Строка - подробное описание ошибки.
//
Функция НовыйОписательОшибокПроверкиВнедрения()
	
	ОписательОшибок = Новый ТаблицаЗначений;
	ОписательОшибок.Колонки.Добавить("Подсистема",       ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОписательОшибок.Колонки.Добавить("ОбъектМетаданных", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОписательОшибок.Колонки.Добавить("ОписаниеОшибки",   ОбщегоНазначения.ОписаниеТипаСтрока(450));
	
	Возврат ОписательОшибок;
	
КонецФункции

// Производит проверку номера версии БСП. Если номер версии БСП меньше чем указанный
// в функции МинимальнаяВерсияБСП(), в таблицу ОписательОшибок будет добавлена ошибка.
//
// Параметры:
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//
Процедура ПроверитьВерсиюСтандартныхПодсистем(ОписательОшибок)
	
	ТекущаяВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ТребуемаяВерсия  = МинимальнаяВерсияБСП();
	
	РезультатСравнения = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТребуемаяВерсия, ТекущаяВерсияБСП);
	
	Если РезультатСравнения > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Для использования функциональности ""Библиотека интернет-поддержки"" необходимо использовать
			|версию программы ""Библиотека стандартный подсистем"" не ниже: %1. Используемая сейчас версия: %2.'");
		
		СтрокаОшибки = ОписательОшибок.Добавить();
		СтрокаОшибки.Подсистема       = НСтр("ru = 'СтандартныеПодсистемы'");
		СтрокаОшибки.ОбъектМетаданных = НСтр("ru = 'ОбновлениеИнформационнойБазыБСП'");
		СтрокаОшибки.ОписаниеОшибки   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеОшибки,
			ТребуемаяВерсия,
			ТекущаяВерсияБСП);
		
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку правильности настройки общих реквизитов
// "ОбластьДанныхОсновныеДанные" и "ОбластьДанныхВспомогательныеДанные".
// у реквизитов проверяются свойства "АвтоИспользование" и "Состав"
// на соответствие с эталонными настройками Интернет-поддержка пользователей,
// см. функцию НовыйОписательСвойствОбъектовБИП().
// Обнаруженные ошибки внедрения записываются в таблицу ОписательОшибок.
//
// Параметры:
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - подсистема, для которой производится проверка;
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//
Процедура ПроверитьВнедрениеОбщихРеквизитов(
		ОписательОшибок,
		Подсистема,
		ОписательСвойствОбъектовБИП,
		ОбъектыБИП)
	
	Для каждого ОписательОбъекта Из ОписательСвойствОбъектовБИП Цикл
		Если Метаданные.ОбщиеРеквизиты.Содержит(ОписательОбъекта.Ключ) Тогда
			ПроверитьВнедрениеОбщегоРеквизита(
				ОписательОбъекта.Ключ,
				ОписательСвойствОбъектовБИП,
				ОписательОшибок,
				Подсистема,
				ОбъектыБИП);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит проверку правильности настройки общего реквизита
// у реквизита проверяются свойства "АвтоИспользование" и "Состав"
// на соответствие с эталонными настройками Интернет-поддержка пользователей,
// см. функцию НовыйОписательСвойствОбъектовБИП().
// Обнаруженные ошибки внедрения записываются в таблицу ОписательОшибок.
//
// Параметры:
//  ОбщийРеквизит - Метаданные.ОбщиеРеквизиты - общий реквизит, для которого производится проверка;
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - подсистема, для которой производится проверка;
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//  ОбъектыБИП - Соответствие - метаданные БИП, см. функцию ИнтернетПоддержкаПользователей.ОбъектыПодсистемИИП().
//
Процедура ПроверитьВнедрениеОбщегоРеквизита(
		ОбщийРеквизит,
		ОписательСвойствОбъектовБИП,
		ОписательОшибок,
		Подсистема,
		ОбъектыБИП)
	
	СвойстваОбъектаБИП      = ОписательСвойствОбъектовБИП.Получить(ОбщийРеквизит);
	Использование_Авто      = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	ОбъектыПодсистемы       = ОбъектыБИП.Получить(Подсистема);
	ПредставлениеПодсистемы = Подсистема.Синоним;
	ЭталонныеМетаданныеОР   = Новый Массив;
	
	ПредставлениеОбъекта  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ОбщиеРеквизиты.%1'"),
		ОбщийРеквизит.Имя);
	
	Если СвойстваОбъектаБИП <> Неопределено Тогда
	
		Если ОбщийРеквизит.АвтоИспользование <> СвойстваОбъектаБИП.АвтоИспользование Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Значение свойства ""Автоиспользование"" установлено неверно. Установлено: %1, ожидается: %2'");
			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеОшибки,
				ОбщийРеквизит.АвтоИспользование,
				СвойстваОбъектаБИП.АвтоИспользование);
			
			ПредставлениеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ОбщиеРеквизиты.%1'"),
				ОбщийРеквизит.Имя);
			
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки   = ОписаниеОшибки;
		
		КонецЕсли;
		
		// Проверка отличия свойств общего реквизита от эталонных настроек БИП,
		// которые задаются в функциях НовыйОписательЭталонныхНастроек().
		Для каждого ОбъектСостава Из СвойстваОбъектаБИП.Состав Цикл
			
			ОбъектМетаданныхОР = ОбщийРеквизит.Состав.Найти(ОбъектСостава.Метаданные);
			
			// Ошибка не будет сформирована если:
			// признак Использование = ПравильноеЗначениеИспользования.
			Ошибка = ?(ОбъектСостава.Использование <> ОбъектМетаданныхОР.Использование, Истина, Ложь);
			
			Если Ошибка Тогда
				
				ПредставлениеМетаданных = ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектСостава.Метаданные)
					+ "."
					+ ОбъектСостава.Метаданные.Имя;
				
				ОписаниеОшибки = НСтр("ru = '%1: Некорректное значение свойства ""Использование"", ожидается значение: %2.'");
				
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОписаниеОшибки,
					ПредставлениеМетаданных,
					ОбъектСостава.Использование);
				
				СтрокаОшибки = ОписательОшибок.Добавить();
				СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
				СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
				СтрокаОшибки.ОписаниеОшибки   = ОписаниеОшибки;
				
			КонецЕсли;
			
			ЭталонныеМетаданныеОР.Добавить(ОбъектСостава.Метаданные);
			
		КонецЦикла;
	КонецЕсли;
	
	// Эталонные настройки формируются только для элементов состава, у которых
	// свойство Использование не равно Авто. Элементы состава общего реквизита
	// не вошедшие в эталонные настройки должны иметь свойство Использование
	// равное Авто.
	Для каждого ЭлементСостава Из ОбщийРеквизит.Состав Цикл
		
		Если ЭлементСостава.Использование = Использование_Авто Тогда
			Продолжить;
		КонецЕсли;
		
		// Если объект принадлежит другой подсистеме, проверять нет необходимости.
		Если ОбъектыПодсистемы.Найти(ЭлементСостава.Метаданные) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭталонныеМетаданныеОР.Найти(ЭлементСостава.Метаданные) = Неопределено Тогда
			
			ПредставлениеМетаданных = ИмяБазовогоТипаПоОбъектуМетаданных(ЭлементСостава.Метаданные)
				+ "."
				+ ЭлементСостава.Метаданные.Имя;
			
			ОписаниеОшибки = НСтр("ru = '%1: Некорректное значение свойства ""Использование"", ожидается значение: Авто.'");
			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеОшибки,
				ПредставлениеМетаданных);
			
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки   = ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит проверку правильности настройки определяемого типа
// "МестоХраненияФункциональныхОпций".
// У определяемого типа проверяется свойство "Тип" на соответствие с эталонными настройками
// Интернет-поддержка пользователей, см. функцию НовыйОписательСвойствОбъектовБИП().
// Обнаруженные ошибки внедрения записываются в таблицу ОписательОшибок.
//
// Параметры:
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - подсистема, для которой производится проверка;
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//  ОбъектыБИП - Соответствие - список метаданных БИП, см. функцию ОбъектыПодсистемИИП().
//
Процедура ПроверитьВнедрениеОпределяемыхТипов(
		ОписательОшибок,
		Подсистема,
		ОписательСвойствОбъектовБИП,
		ОбъектыБИП)
	
	Для каждого ОписательОбъекта Из ОписательСвойствОбъектовБИП Цикл
		Если Метаданные.ОпределяемыеТипы.Содержит(ОписательОбъекта.Ключ) Тогда
			ПроверитьВнедрениеОпределяемогоТипа(
				ОписательОбъекта.Ключ,
				ОписательСвойствОбъектовБИП,
				ОписательОшибок,
				Подсистема,
				ОбъектыБИП);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит проверку правильности настройки определяемого типа.
// У определяемого типа проверяется свойство "Тип" на соответствие с эталонными настройками
// Интернет-поддержка пользователей, см. функцию НовыйОписательСвойствОбъектовБИП().
// Обнаруженные ошибки внедрения записываются в таблицу ОписательОшибок.
//
// Параметры:
//  ОпределяемыйТип - Метаданные.ОпределяемыеТипы - определяемый тип, для которой необходимо произвести проверку;
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - не заполнять используется для рекурсивного вызова
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//  ОбъектыБИП - Соответствие - см. функцию  ОбъектыПодсистемИИП().
//
Процедура ПроверитьВнедрениеОпределяемогоТипа(
		ОпределяемыйТип,
		ОписательСвойствОбъектовБИП,
		ОписательОшибок,
		Подсистема,
		ОбъектыБИП)
	
	СвойстваОбъектаБИП      = ОписательСвойствОбъектовБИП.Получить(ОпределяемыйТип);
	ОбъектыПодсистемы       = ОбъектыБИП.Получить(Подсистема);
	ТипыВнедренногоОбъекта  = ОпределяемыйТип.Тип.Типы();
	ПредставлениеПодсистемы = Подсистема.Синоним;
	РазрешенныеТипы         = Новый Массив;
	
	ПредставлениеОбъекта    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ОпределяемыеТипы.%1'"),
		ОпределяемыйТип.Имя);
	
	Если СвойстваОбъектаБИП <> Неопределено Тогда
		
		// Проверка отличия свойств определяемого типа  от эталонных настроек БИП,
		// которые задаются в функциях НовыйОписательЭталонныхНастроек().
		Для каждого Тип Из СвойстваОбъектаБИП.Типы Цикл
			
			РазрешенныеТипы.Добавить(Тип);
			
			Если ТипыВнедренногоОбъекта.Найти(Тип) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			ПредставлениеМетаданных = ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) 
				+ "."
				+ ОбъектМетаданных.Имя;
			
			ОписаниеОшибки = НСтр("ru = 'В составе отсутствует тип: %1.'");
			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеОшибки,
				ПредставлениеМетаданных);
			
			СтрокаОшибки = ОписательОшибок.Добавить();
			СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
			СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
			СтрокаОшибки.ОписаниеОшибки   = ОписаниеОшибки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Определяемый тип не должен содержать типы объектов подсистемы,
	// кроме тех, что определены в эталонных настройках.
	Для каждого Тип Из ТипыВнедренногоОбъекта Цикл
		
		Если РазрешенныеТипы.Найти(Тип) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		
		// Если объект принадлежит другой подсистеме, проверять нет необходимости.
		Если ОбъектыПодсистемы.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеМетаданных = ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) 
			+ "."
			+ ОбъектМетаданных.Имя;
		
		ОписаниеОшибки = НСтр("ru = 'В состав ошибочно включен тип: %1.'");
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеОшибки,
			ПредставлениеМетаданных);
		
		СтрокаОшибки = ОписательОшибок.Добавить();
		СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
		СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
		СтрокаОшибки.ОписаниеОшибки   = ОписаниеОшибки;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит проверку правильности настройки ролей "АдминистраторСистемы" и "ПолныеПрава".
// У ролей проверяются права на доступ к объектам метаданных. Эталонные права ролей задаются
// в функции НовыйОписательСвойствОбъектовБИП(). Обнаруженные ошибки внедрения записываются
// в таблицу ОписательОшибок.
//
// Параметры:
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - подсистема, для которой производится проверка;
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//  ОбъектыБИП - Соответствие - см. функцию  ОбъектыПодсистемИИП().
//
Процедура ПроверитьВнедренияРолей(
		ОписательОшибок,
		Подсистема,
		ОписательСвойствОбъектовБИП,
		ОбъектыБИП)
	
	Для каждого ОписательОбъекта Из ОписательСвойствОбъектовБИП Цикл
		Если Метаданные.Роли.Содержит(ОписательОбъекта.Ключ) Тогда
			ПроверитьВнедрениеРоли(
				ОписательОбъекта.Ключ,
				ОписательСвойствОбъектовБИП,
				ОписательОшибок,
				Подсистема,
				ОбъектыБИП);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит проверку правильности настройки ролей
// У роли проверяются права на доступ к объектам метаданных. Эталонные права ролей задаются
// в функции НовыйОписательСвойствОбъектовБИП(). Обнаруженные ошибки внедрения записываются
// в таблицу ОписательОшибок.
//
// Параметры:
//  Роль - Метаданные.Роли- роль, для которой необходимо произвести проверку;
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//  Подсистема - Метаданные.Подсистемы - не заполнять используется для рекурсивного вызова;
//  ОписательСвойствОбъектовБИП - Соответствие -  см. функцию НовыйОписательСвойствОбъектовБИП();
//  ОбъектыБИП - Соответствие - см. функцию  ОбъектыПодсистемИИП().
//
Процедура ПроверитьВнедрениеРоли(
		Роль,
		ОписательСвойствОбъектовБИП,
		ОписательОшибок,
		Подсистема,
		ОбъектыБИП)
	
	СвойстваОбъектаБИП              = ОписательСвойствОбъектовБИП.Получить(Роль);
	НастройкиРоли                   = СвойстваОбъектаБИП.НастройкиРоли;
	УстанавливатьПраваНовыхОбъектов = СвойстваОбъектаБИП.УстанавливатьПраваНовыхОбъектов;
	ПредставлениеПодсистемы         = Подсистема.Синоним;
	ПроверенныеОбъекты              = Новый Массив;
	
	ПредставлениеОбъекта    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Роль.%1'"),
		Роль.Имя);
	
	ТекстОшибок = "";
	Для каждого НастройкаПрав Из НастройкиРоли Цикл
		
		ПроверенныеПрава = Новый Массив;
		Для каждого ПраваДоступа Из НастройкаПрав.ЗначенияПравДоступа Цикл
			
			ИмяПрава = ИмяПраваПоСокращенномуИмени(ПраваДоступа.Ключ);
			Ошибка   = ?(Не УстанавливатьПраваНовыхОбъектов,
				Не ПравоДоступа(ИмяПрава, НастройкаПрав.ОбъектМетаданных, Роль),
				ПравоДоступа(ИмяПрава, НастройкаПрав.ОбъектМетаданных, Роль));
			
			Если Ошибка Тогда
				ДобавитьОшибкуПравДоступа(
					Роль,
					ПредставлениеПодсистемы,
					ПредставлениеОбъекта,
					ИмяПрава,
					ПраваДоступа.Значение,
					НастройкаПрав.ОбъектМетаданных,
					ОписательОшибок);
			КонецЕсли;
			
			ПроверенныеПрава.Добавить(ИмяПрава);
			
		КонецЦикла;
		
		// Определяется массив прав доступа, которые еще не были проверены.
		ДоступныеПраваОбъекта = ПраваПоОбъектуМетаданных(НастройкаПрав.ОбъектМетаданных);
		ДоступныеПраваОбъекта = ОбщегоНазначенияКлиентСервер.СократитьМассив(
			ДоступныеПраваОбъекта,
			ПроверенныеПрава);
		
		Для каждого ПравоДоступа Из ДоступныеПраваОбъекта Цикл
			
			Ошибка = ?(УстанавливатьПраваНовыхОбъектов,
				Не ПравоДоступа(ПравоДоступа, НастройкаПрав.ОбъектМетаданных, Роль),
				ПравоДоступа(ПравоДоступа, НастройкаПрав.ОбъектМетаданных, Роль));
			
			Если Ошибка Тогда
				ДобавитьОшибкуПравДоступа(
					Роль,
					ПредставлениеПодсистемы,
					ПредставлениеОбъекта,
					ПравоДоступа,
					Не ПраваДоступа.Значение,
					НастройкаПрав.ОбъектМетаданных,
					ОписательОшибок);
			КонецЕсли;
			
		КонецЦикла;
		
		ПроверенныеОбъекты.Добавить(НастройкаПрав.ОбъектМетаданных);
		
	КонецЦикла;
	
	ОбъектыПодсистемы = ОбъектыБИП.Получить(Подсистема);
	
	Для каждого ОбъектМетаданных Из ОбъектыПодсистемы Цикл
		
		Если ПроверенныеОбъекты.Найти(ОбъектМетаданных) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступныеПраваОбъекта = ПраваПоОбъектуМетаданных(ОбъектМетаданных);
		
		Для каждого ПравоДоступа Из ДоступныеПраваОбъекта Цикл
			
			Ошибка = ?(Не УстанавливатьПраваНовыхОбъектов,
				ПравоДоступа(ПравоДоступа, ОбъектМетаданных, Роль),
				Не ПравоДоступа(ПравоДоступа, ОбъектМетаданных, Роль));
			
			Если Ошибка Тогда
				ДобавитьОшибкуПравДоступа(
					Роль,
					ПредставлениеПодсистемы,
					ПредставлениеОбъекта,
					ПравоДоступа,
					УстанавливатьПраваНовыхОбъектов,
					ОбъектМетаданных,
					ОписательОшибок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описание ошибки настройки роли в таблицу ошибок.
//
// Параметры:
//  Роль - Метаданные.Роли- роль, для которой производится проверка;
//  ПредставлениеПодсистемы - Строка - синоним подсистемы, к которой принадлежит объект;
//  ПредставлениеОбъекта - Строка - полное имя объекта метаданных;
//  ИмяПрава  - Строка - Имя права;
//  ЗначениеПрава  - Булево - значение права;
//  ОбъектМетаданных - Метаданные - проверяемый объект;
//  ОписательОшибок - ТаблицаЗначений - содержит описание ошибок внедрения
//                                      см. функцию НовыйОписательОшибокПроверкиВнедрения();
//
Процедура ДобавитьОшибкуПравДоступа(
		Роль,
		ПредставлениеПодсистемы,
		ПредставлениеОбъекта,
		ИмяПрава,
		ЗначениеПрава,
		ОбъектМетаданных,
		ОписательОшибок)
	
	ПредставлениеМетаданных = ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных)
		+ "."
		+ ОбъектМетаданных.Имя;
	
	ОписаниеОшибки = НСтр("ru = '%1: Некорректная настройка права %2, ожидается значение: %3'");
	
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеОшибки,
		ПредставлениеМетаданных,
		ИмяПрава,
		ЗначениеПрава);
	
	СтрокаОшибки = ОписательОшибок.Добавить();
	СтрокаОшибки.Подсистема       = ПредставлениеПодсистемы;
	СтрокаОшибки.ОбъектМетаданных = ПредставлениеОбъекта;
	СтрокаОшибки.ОписаниеОшибки   = ОписаниеОшибки;
	
КонецПроцедуры

// Определяем права доступа для объекта метаданных
//
// Параметры:
//  ОбъектМетаданных  - ОбъектМетаданных:<ИмяОбъекта> - содержит объект, для которого
//                      необходимо определить все возможные права доступа.
//
// Возвращаемое значение:
//   Массив   - права доступа объекта метаданных.
//
Функция ПраваПоОбъектуМетаданных(ОбъектМетаданных = Неопределено)
	
	ДоступныеПрава = Новый Массив;
	
	Если ОбъектМетаданных = Неопределено Тогда
		
		ДоступныеПрава.Добавить("Администрирование");
		ДоступныеПрава.Добавить("АдминистрированиеДанных");
		ДоступныеПрава.Добавить("МонопольныйРежим");
		ДоступныеПрава.Добавить("АктивныеПользователи");
		ДоступныеПрава.Добавить("ЖурналРегистрации");
		ДоступныеПрава.Добавить("ТонкийКлиент");
		ДоступныеПрава.Добавить("ВебКлиент");
		ДоступныеПрава.Добавить("ТолстыйКлиент");
		ДоступныеПрава.Добавить("ВнешнееСоединение");
		ДоступныеПрава.Добавить("Automation");
		ДоступныеПрава.Добавить("РежимВсеФункции");
		ДоступныеПрава.Добавить("РегистрацияИнформационнойБазыСистемыВзаимодействия");
		ДоступныеПрава.Добавить("СохранениеДанныхПользователя");
		ДоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
		ДоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок");
		ДоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов");
		ДоступныеПрава.Добавить("Вывод");
		
		Возврат ДоступныеПрава;
		
	КонецЕсли;
	
	Если Метаданные.WebСервисы.Содержит(ОбъектМетаданных)
		Или Метаданные.HTTPСервисы.Содержит(ОбъектМетаданных) Тогда
		Возврат ДоступныеПрава;
	КонецЕсли;
	
	Если Метаданные.Подсистемы.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Просмотр");
		
	ИначеЕсли Метаданные.ПараметрыСеанса.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Получение");
		ДоступныеПрава.Добавить("Установка");
		
	ИначеЕсли Метаданные.ОбщиеРеквизиты.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("Редактирование");
		
	ИначеЕсли Метаданные.Подсистемы.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Добавление");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Удаление");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("ИнтерактивноеДобавление");
		ДоступныеПрава.Добавить("Редактирование");
		ДоступныеПрава.Добавить("ИнтерактивноеУдаление");
		ДоступныеПрава.Добавить("ИнтерактивнаяПометкаУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПомеченных");
		ДоступныеПрава.Добавить("ВводПоСтроке");
		
	ИначеЕсли Метаданные.КритерииОтбора.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Просмотр");
		
	ИначеЕсли Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Просмотр");
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("Редактирование");
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Добавление");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Удаление");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("ИнтерактивноеДобавление");
		ДоступныеПрава.Добавить("Редактирование");
		ДоступныеПрава.Добавить("ИнтерактивноеУдаление");
		ДоступныеПрава.Добавить("ИнтерактивнаяПометкаУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПомеченных");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПредопределенныхДанных");
		ДоступныеПрава.Добавить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
		ДоступныеПрава.Добавить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
		ДоступныеПрава.Добавить("ВводПоСтроке");
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Добавление");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Удаление");
		ДоступныеПрава.Добавить("Проведение");
		ДоступныеПрава.Добавить("ОтменаПроведения");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("ИнтерактивноеДобавление");
		ДоступныеПрава.Добавить("Редактирование");
		ДоступныеПрава.Добавить("ИнтерактивноеУдаление");
		ДоступныеПрава.Добавить("ИнтерактивнаяПометкаУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПомеченных");
		ДоступныеПрава.Добавить("ИнтерактивноеПроведение");
		ДоступныеПрава.Добавить("ИнтерактивноеПроведениеНеОперативное");
		ДоступныеПрава.Добавить("ИнтерактивнаяОтменаПроведения");
		ДоступныеПрава.Добавить("ИнтерактивноеИзменениеПроведенных");
		ДоступныеПрава.Добавить("ВводПоСтроке");
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Просмотр");
		
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Использование");
		ДоступныеПрава.Добавить("Просмотр");
		
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Использование");
		ДоступныеПрава.Добавить("Просмотр");
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или  Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
			Или  Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("Редактирование");
		ДоступныеПрава.Добавить("УправлениеИтогами");
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("Редактирование");
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Добавление");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Удаление");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("ИнтерактивноеДобавление");
		ДоступныеПрава.Добавить("Редактирование");
		ДоступныеПрава.Добавить("ИнтерактивноеУдаление");
		ДоступныеПрава.Добавить("ИнтерактивнаяПометкаУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПомеченных");
		ДоступныеПрава.Добавить("ИнтерактивнаяАктивация");
		ДоступныеПрава.Добавить("Старт");
		ДоступныеПрава.Добавить("ИнтерактивныйСтарт");
		ДоступныеПрава.Добавить("ВводПоСтроке");
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Чтение");
		ДоступныеПрава.Добавить("Добавление");
		ДоступныеПрава.Добавить("Изменение");
		ДоступныеПрава.Добавить("Удаление");
		ДоступныеПрава.Добавить("Просмотр");
		ДоступныеПрава.Добавить("ИнтерактивноеДобавление");
		ДоступныеПрава.Добавить("Редактирование");
		ДоступныеПрава.Добавить("ИнтерактивноеУдаление");
		ДоступныеПрава.Добавить("ИнтерактивнаяПометкаУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
		ДоступныеПрава.Добавить("ИнтерактивноеУдалениеПомеченных");
		ДоступныеПрава.Добавить("ИнтерактивнаяАктивация");
		ДоступныеПрава.Добавить("Выполнение");
		ДоступныеПрава.Добавить("ИнтерактивноеВыполнение");
		ДоступныеПрава.Добавить("ВводПоСтроке");
		
	ИначеЕсли Метаданные.ВнешниеИсточникиДанных.Содержит(ОбъектМетаданных) Тогда
		
		ДоступныеПрава.Добавить("Использование");
		ДоступныеПрава.Добавить("Администрирование");
		ДоступныеПрава.Добавить("ИзменениеСтандартнойАутентификации");
		ДоступныеПрава.Добавить("ИзменениеСтандартнойАутентификацииСеанса");
		ДоступныеПрава.Добавить("ИзменениеАутентификацииОССеанса ");
		
	КонецЕсли;
	
	Возврат ДоступныеПрава;
	
КонецФункции

// Формирует соответствие, в котором содержатся объекты Интернет-поддержки пользователей.
//
// Параметры:
//  Уровень - Число - уровень подсистем для отнесения объектов. Т.е. если существует три
//                    уровня подсистем, а параметр равен 2, все подсистемы третьего уровня
//                    будут отнесены к подсистемам второго уровня;
//  ОбъектыПодсистем - Соответствие - не заполнять, используется для рекурсивного вызова;
//  Подсистема - Метаданные.Подсистемы - не заполнять, используется для рекурсивного вызова.
//
// Возвращаемое значение:
//  Соответствие - содержит объекты метаданных БИП по подсистемам:
//    Ключ - Метаданные.Подсистемы - имя подсистемы;
//    Значение - Массив - содержит метаданные, относящиеся к подсистеме;
//
Функция ОбъектыПодсистемБИП(Уровень, ОбъектыПодсистем = Неопределено, Подсистема = Неопределено)
	
	Если ОбъектыПодсистем = Неопределено Тогда
		ОбъектыПодсистем  = Новый Соответствие;
		ОбъектыМетаданных = Новый Массив;
		Подсистема        = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;
		Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
			ОбъектыМетаданных.Добавить(ОбъектМетаданных);
		КонецЦикла;
		ОбъектыПодсистем.Вставить(Подсистема, ОбъектыМетаданных)
	КонецЕсли;
	
	СчетчикУровней = 2;
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ОбъектыМетаданных = Новый Массив;
		Для Каждого ОбъектМетаданных Из ПодчиненнаяПодсистема.Состав Цикл
			ОбъектыМетаданных.Добавить(ОбъектМетаданных);
		КонецЦикла;
		Если СчетчикУровней < Уровень Тогда
			ОбъектыПодсистемБИП(ОбъектыПодсистем, ПодчиненнаяПодсистема);
		Иначе
			ОбъектыПодчиненныхПодсистем = Новый Соответствие;
			ОбъектыПодсистемБИП(0, ОбъектыПодчиненныхПодсистем, ПодчиненнаяПодсистема);
			ОбъектыПодчиненныхПодсистем = Новый ФиксированноеСоответствие(ОбъектыПодчиненныхПодсистем);
			Для каждого КлючЗначение Из ОбъектыПодчиненныхПодсистем Цикл
					Для Каждого ОбъектМетаданных Из КлючЗначение.Значение Цикл
						ОбъектыМетаданных.Добавить(ОбъектМетаданных);
					КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ОбъектыПодсистем.Вставить(ПодчиненнаяПодсистема, ОбъектыМетаданных);
	КонецЦикла;
	
	Возврат ОбъектыПодсистем;
	
КонецФункции

// Преобразует сокращенное наименование права в полное.
//
// Параметры:
//  СокращенноеИмяПрава  - Строка - сокращенное имя права.
//
// Возвращаемое значение:
//  Строка - полное имя права.
//
Функция ИмяПраваПоСокращенномуИмени(СокращенноеИмяПрава)
	
	Если СокращенноеИмяПрава = "Чт" Тогда
		Возврат "Чтение";
		
	ИначеЕсли СокращенноеИмяПрава = "Доб" Тогда
		Возврат "Добавление";
		
	ИначеЕсли СокращенноеИмяПрава = "Пр" Тогда
		Возврат "Просмотр";
		
	ИначеЕсли СокращенноеИмяПрава = "Изм" Тогда
		Возврат "Изменение";
		
	ИначеЕсли СокращенноеИмяПрава = "Уд" Тогда
		Возврат "Удаление";
		
	ИначеЕсли СокращенноеИмяПрава = "Пров" Тогда
		Возврат "Проведение";
		
	ИначеЕсли СокращенноеИмяПрава = "ОтмПров" Тогда
		Возврат "ОтменаПроведения";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтДоб" Тогда
		Возврат "ИнтерактивноеДобавление";
		
	ИначеЕсли СокращенноеИмяПрава = "Ред" Тогда
		Возврат "Редактирование";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтПомУд" Тогда
		Возврат "ИнтерактивнаяПометкаУдаления";
		
	ИначеЕсли СокращенноеИмяПрава = "ИСПУ" Тогда
		Возврат "ИнтерактивноеСнятиеПометкиУдаления";
		
	ИначеЕсли СокращенноеИмяПрава = "ИУП" Тогда
		Возврат "ИнтерактивноеУдалениеПомеченных";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтПров" Тогда
		Возврат "ИнтерактивноеПроведение";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтПровНеОпер" Тогда
		Возврат "ИнтерактивноеПроведениеНеОперативное";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтОтмПров" Тогда
		Возврат "ИнтерактивнаяОтменаПроведения";
		
	ИначеЕсли СокращенноеИмяПрава = "ВПС" Тогда
		Возврат "ВводПоСтроке";
		
	ИначеЕсли СокращенноеИмяПрава = "УпрИ" Тогда
		Возврат "УправлениеИтогами";
		
	ИначеЕсли СокращенноеИмяПрава = "Исп" Тогда
		Возврат "Использование";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтУд" Тогда
		Возврат "ИнтерактивноеУдаление";
		
	ИначеЕсли СокращенноеИмяПрава = "Адм" Тогда
		Возврат "Администрирование";
		
	ИначеЕсли СокращенноеИмяПрава = "АдмДан" Тогда
		Возврат "АдминистрированиеДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "МР" Тогда
		Возврат "МонопольныйРежим";
		
	ИначеЕсли СокращенноеИмяПрава = "АП" Тогда
		Возврат "АктивныеПользователи";
		
	ИначеЕсли СокращенноеИмяПрава = "ЖР" Тогда
		Возврат "ЖурналРегистрации";
		
	ИначеЕсли СокращенноеИмяПрава = "ВС" Тогда
		Возврат "ВнешнееСоединение";
		
	ИначеЕсли СокращенноеИмяПрава = "Auto" Тогда
		Возврат "Automation";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтОткрВнешОбр" Тогда
		Возврат "ИнтерактивноеОткрытиеВнешнихОбработок";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтОткрВнешОтч" Тогда
		Возврат "ИнтерактивноеОткрытиеВнешнихОтчетов";
		
	ИначеЕсли СокращенноеИмяПрава = "Пол" Тогда
		Возврат "Получение";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтАкт" Тогда
		Возврат "ИнтерактивнаяАктивация";
		
	ИначеЕсли СокращенноеИмяПрава = "Старт" Тогда
		Возврат "Старт";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтСтарт" Тогда
		Возврат "ИнтерактивныйСтарт";
		
	ИначеЕсли СокращенноеИмяПрава = "Вып" Тогда
		Возврат "Выполнение";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтВып" Тогда
		Возврат "ИнтерактивноеВыполнение";
		
	ИначеЕсли СокращенноеИмяПрава = "Вывод" Тогда
		Возврат "Вывод";
		
	ИначеЕсли СокращенноеИмяПрава = "ОбнКонфБД" Тогда
		Возврат "ОбновлениеКонфигурацииБазыДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ТонкК" Тогда
		Возврат "ТонкийКлиент";
		
	ИначеЕсли СокращенноеИмяПрава = "ВебК" Тогда
		Возврат "ВебКлиент";
		
	ИначеЕсли СокращенноеИмяПрава = "ТолсК" Тогда
		Возврат "ТолстыйКлиент";
		
	ИначеЕсли СокращенноеИмяПрава = "РежВФ" Тогда
		Возврат "РежимВсеФункции";
		
	ИначеЕсли СокращенноеИмяПрава = "СохрДП" Тогда
		Возврат "СохранениеДанныхПользователя";
		
	ИначеЕсли СокращенноеИмяПрава = "ИзмСА" Тогда
		Возврат "ИзменениеСтандартнойАутентификации";
		
	ИначеЕсли СокращенноеИмяПрава = "ИзмСАС" Тогда
		Возврат "ИзменениеСтандартнойАутентификацииСеанса";
		
	ИначеЕсли СокращенноеИмяПрава = "ИзмАОСС" Тогда
		Возврат "ИзменениеАутентификацииОССеанса";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтУПД" Тогда
		Возврат "ИнтерактивноеУдалениеПредопределенныхДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтПУПД" Тогда
		Возврат "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтСПУПД" Тогда
		Возврат "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ИнтУППД" Тогда
		Возврат "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "АдмРК" Тогда
		Возврат "АдминистрированиеРасширенийКонфигурации";
		
	ИначеЕсли СокращенноеИмяПрава = "ЧтИД" Тогда
		Возврат "ЧтениеИсторииДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ЧтИОД" Тогда
		Возврат "ЧтениеИсторииОтсутствующихДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ИзмИОД" Тогда
		Возврат "ИзменениеИсторииОтсутствующихДанных ";
		
	ИначеЕсли СокращенноеИмяПрава = "ИзмНИД" Тогда
		Возврат "ИзменениеНастроекИсторииДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "ИзмКИД" Тогда
		Возврат "ИзменениеКомментарияИсторииДанных";
		
	ИначеЕсли СокращенноеИмяПрава = "РБСВ" Тогда
		Возврат "РегистрацияИнформационнойБазыСистемыВзаимодействия";
		
	ИначеЕсли СокращенноеИмяПрава = "Получ" Тогда
		Возврат "Получение";
		
	ИначеЕсли СокращенноеИмяПрава = "Устан" Тогда
		Возврат "Установка";
		
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение параметра СокращенноеИмяПрава (%1)'"),
			СокращенноеИмяПрава);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
// Пример:
//  ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.Справочники.Номенклатура); = "Справочники".
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных)
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочники";
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат "Перечисления";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыРасчета";
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыОбмена";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовХарактеристик";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцессы";
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "Задачи";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыСчетов";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовРасчета";
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Константы";
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЖурналыДокументов";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат "Последовательности";
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегламентныеЗадания";
		
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		Возврат "Обработки";
		
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		Возврат "Отчеты";
		
	ИначеЕсли Метаданные.Подсистемы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Подсистемы";
		
	ИначеЕсли Метаданные.ПараметрыСеанса.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПараметрыСеанса";
	
	ИначеЕсли Метаданные.ОбщиеРеквизиты.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеРеквизиты";
		
	ИначеЕсли Метаданные.ОбщиеКоманды.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеКоманды";
		
	ИначеЕсли Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеФормы";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
		И ОбъектМетаданных.Родитель().Перерасчеты.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных Тогда
		Возврат "Перерасчеты";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
