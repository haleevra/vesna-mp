
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьОбъекты(УзелОбмена, Объекты) Экспорт
	
	ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
	ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
	ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
	
	НачатьТранзакцию();
	
	Если Объекты <> Неопределено Тогда
		Для каждого ОбъектXDTO Из Объекты.объекты Цикл
			Если ОбъектXDTO.Тип().Имя = "Контрагенты" Тогда
				НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "КонтактныеЛица" Тогда
				НайтиСоздатьКонтактныеЛица(УзелОбмена, ОбъектXDTO);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Визиты" Тогда
				НайтиСоздатьВизит(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Мероприятия" Тогда
				НайтиСоздатьМероприятие(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "УдалениеОбъекта" Тогда
				ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры // ЗагрузитьОбъекты()

#КонецОбласти

#Область Справочники

Функция НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ЭтоГруппа Тогда
			Объект = Справочники.Контрагенты.СоздатьГруппу();
		Иначе
			Объект = Справочники.Контрагенты.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
		
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Наименование Тогда
		Объект.Наименование = ОбъектXDTO.Наименование;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Родитель);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Комментарий <> ОбъектXDTO.Комментарий
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Комментарий = ОбъектXDTO.Комментарий;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			Объект.НаименованиеПолное = Объект.Наименование;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.БизнесРегион) Тогда
			Объект.БизнесРегион = Пользователи.ТекущийПользователь().БизнесРегион;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТипКонтрагента) Тогда
			Объект.ТипКонтрагента = Перечисления.ТипыКонтрагентов.ЮридическоеЛицо;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если Объект.Сеть <> ОбъектXDTO.Сеть
			И НЕ Объект.ЭтоГруппа Тогда
			Объект.Сеть = ОбъектXDTO.Сеть;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		ВидКонтрагента = НайтиВидыКонтрагентов(ОбъектXDTO.ВидКонтрагента);
		Если Объект.ВидКонтрагента <> ВидКонтрагента Тогда
			Объект.ВидКонтрагента = ВидКонтрагента;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Адрес) Тогда
			НайденаСтрокаАдреса = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					НайденаСтрокаАдреса = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Адрес Тогда
						ТекСтрока.Представление = ОбъектXDTO.Адрес;
						ТекСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ТекСтрока.Представление, ТекСтрока.Вид);
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрокаАдреса Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Адрес;
				НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Телефон) Тогда
			НайденаСтрока = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					НайденаСтрока = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Телефон Тогда
						ТекСтрока.Представление = ОбъектXDTO.Телефон;
						ТекСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ТекСтрока.Представление, ТекСтрока.Вид);
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрока Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Телефон;
				НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.АдресЭП) Тогда
			НайденаСтрока = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					НайденаСтрока = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.АдресЭП Тогда
						ТекСтрока.Представление = ОбъектXDTO.АдресЭП;
						ТекСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ТекСтрока.Представление, ТекСтрока.Вид);
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрока Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.АдресЭП;
				НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.ПометкаУдаления Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.ПометкаУдаления, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьКонтрагенты()

Функция НайтиСоздатьКонтактныеЛица(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники.КонтактныеЛица.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Владелец = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Владелец);
	Если Объект = Неопределено Тогда
		Объект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Владелец = Владелец;
		Объект.Записать();
		ЭтоНовый = Истина;
	ИначеЕсли Объект.Владелец <> Владелец Тогда
		Объект.Владелец = Владелец;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Наименование Тогда
		Объект.Наименование = ОбъектXDTO.Наименование;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Комментарий <> ОбъектXDTO.Комментарий Тогда
		Объект.Комментарий = ОбъектXDTO.Комментарий;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СпециализацияВрача = НайтиСпециализацияВрача(ОбъектXDTO.СпециализацияВрача);
	Если Объект.СпециализацияВрача <> СпециализацияВрача Тогда
		Объект.СпециализацияВрача = СпециализацияВрача;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбъектXDTO.Телефон) Тогда
		НайденаСтрока = Ложь;
		Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
			Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон
				И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
				НайденаСтрока = Истина;
				Если ТекСтрока.Представление <> ОбъектXDTO.Телефон Тогда
					ТекСтрока.Представление = ОбъектXDTO.Телефон;
					ТекСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ТекСтрока.Представление, ТекСтрока.Вид);
					НужноЗаписыватьОбъект = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НайденаСтрока Тогда
			НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
			НоваяСтрока.Представление = ОбъектXDTO.Телефон;
			НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектXDTO.АдресЭП) Тогда
		НайденаСтрока = Ложь;
		Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
			Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
				И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
				НайденаСтрока = Истина;
				Если ТекСтрока.Представление <> ОбъектXDTO.АдресЭП Тогда
					ТекСтрока.Представление = ОбъектXDTO.АдресЭП;
					ТекСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ТекСтрока.Представление, ТекСтрока.Вид);
					НужноЗаписыватьОбъект = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НайденаСтрока Тогда
			НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			НоваяСтрока.Представление = ОбъектXDTO.АдресЭП;
			НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.ПометкаУдаления Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.ПометкаУдаления, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьКонтрагенты()

Функция НайтиТовары(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники.Товары.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции // НайтиТовары()

Функция НайтиПроекты(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники.Проекты.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции // НайтиПроекты()

Функция НайтиСпециализацияВрача(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СпециализацияВрача.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники.СпециализацияВрача.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции // НайтиСпециализацияВрача()

Функция НайтиВидыМероприятий(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.ВидыМероприятий.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники.ВидыМероприятий.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции // НайтиСпециализацияВрача()

#КонецОбласти

#Область Документы

Функция НайтиСоздатьВизит(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.Визит.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("Визит", ОбъектXDTO);
		
	НужноЗаписыватьОбъект = Ложь;
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
		
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) Тогда
		Объект.Операция = УзелОбмена.Профиль;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Проект = НайтиПроекты(ОбъектXDTO.Проект);
	Если Объект.Проект <> Проект Тогда
		Объект.Проект = Проект;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;	
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Контрагент);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	КонтактноеЛицо = НайтиСоздатьКонтактныеЛица(УзелОбмена, ОбъектXDTO.КонтактноеЛицо);
	Если Объект.КонтактноеЛицо <> КонтактноеЛицо Тогда
		Объект.КонтактноеЛицо = КонтактноеЛицо;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СостояниеВизита = НайтиСостоянияВизитов(ОбъектXDTO.СостояниеВизита);
	Если Объект.СостояниеВизита <> СостояниеВизита Тогда
		Объект.СостояниеВизита = СостояниеВизита;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ВидВизита = НайтиВидыВизитов(ОбъектXDTO.ВидВизита);
	Если Объект.ВидВизита <> ВидВизита Тогда
		Объект.ВидВизита = ВидВизита;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ГеоМеткаНачало = Объект.ГеоМеткаНачало.Получить();
	Если ГеоМеткаНачало <> ОбъектXDTO.ГеоМеткаНачало Тогда
		Объект.ГеоМеткаНачало = Новый ХранилищеЗначения(ПолучитьКоординаты(ОбъектXDTO.ГеоМеткаНачало));
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.ДатаНачало <> ОбъектXDTO.ДатаНачало Тогда
		Объект.ДатаНачало = ОбъектXDTO.ДатаНачало;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ГеоМеткаОкончание = Объект.ГеоМеткаОкончание.Получить();
	Если Объект.ГеоМеткаОкончание <> ОбъектXDTO.ГеоМеткаОкончание Тогда
		Объект.ГеоМеткаОкончание = Новый ХранилищеЗначения(ПолучитьКоординаты(ОбъектXDTO.ГеоМеткаОкончание));
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.ДатаОкончание <> ОбъектXDTO.ДатаОкончание Тогда
		Объект.ДатаОкончание = ОбъектXDTO.ДатаОкончание;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
			
	Если Объект.Оценка <> ОбъектXDTO.Оценка Тогда
		Объект.Оценка = ОбъектXDTO.Оценка;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЧекЛист.Количество() > 0 Тогда
		Объект.ЧекЛист.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.ЧекЛист <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.ЧекЛист.СтрокаЧекЛист Цикл
			НоваяСтрока = Объект.ЧекЛист.Добавить();
			НоваяСтрока.Пункт = ТекСтрока.Пункт;			
			НоваяСтрока.ТипЗначения = ТекСтрока.ТипЗначения;
			НоваяСтрока.Значение = Вычислить("ТекСтрока.Значение"+НоваяСтрока.ТипЗначения);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Препараты.Количество() > 0 Тогда
		Объект.Препараты.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Препараты <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Препараты.СтрокаПрепараты Цикл
			НоваяСтрока = Объект.Препараты.Добавить();
			НоваяСтрока.Товар = НайтиТовары(ТекСтрока.Товар);			
			НоваяСтрока.Матрица = ТекСтрока.Матрица;
			НоваяСтрока.Наличие = ТекСтрока.Наличие;
			НоваяСтрока.Заказ = ТекСтрока.Заказ;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Цены.Количество() > 0 Тогда
		Объект.Цены.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Цены <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Цены.СтрокаЦены Цикл
			НоваяСтрока = Объект.Цены.Добавить();
			НоваяСтрока.Товар = НайтиТовары(ТекСтрока.Товар);			
			НоваяСтрока.Цена = ТекСтрока.Цена;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Комментарий") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Комментарий Тогда
		Объект.Комментарий = ОбъектXDTO.Комментарий;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Картинка") <> Неопределено
		И Объект.Картинка.Получить() <> ОбъектXDTO.Картинка Тогда
			Объект.Картинка = Новый ХранилищеЗначения(ОбъектXDTO.Картинка);
			НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.Номер = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЗаказПокупателя()

Функция НайтиСоздатьМероприятие(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.Мероприятие.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("Мероприятие", ОбъектXDTO);
		
	НужноЗаписыватьОбъект = Ложь;
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
		
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Проект = НайтиПроекты(ОбъектXDTO.Проект);
	Если Объект.Проект <> Проект Тогда
		Объект.Проект = Проект;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;	
	
	ВидМероприятия = НайтиВидыМероприятий(ОбъектXDTO.ВидМероприятия);
	Если Объект.ВидМероприятия <> ВидМероприятия Тогда
		Объект.ВидМероприятия = ВидМероприятия;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если ОбъектXDTO.Свойства().Получить("Комментарий") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Комментарий Тогда
		Объект.Комментарий = ОбъектXDTO.Комментарий;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.Номер = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЗаказПокупателя()

#КонецОбласти

#Область РегистрыСведений

#КонецОбласти

#Область Перечисления

Функция НайтиСостоянияВизитов(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Перечисления.СостоянияВизитов.ПустаяСсылка();
	КонецЕсли;
	
	Объект = Перечисления.СостоянияВизитов[ОбъектXDTO];
	
	Возврат Объект;
	
КонецФункции // НайтиСостоянияЗаказовПокупателей()

Функция НайтиВидыВизитов(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Перечисления.ВидыВизитов.ПустаяСсылка();
	КонецЕсли;
	
	Объект = Перечисления.ВидыВизитов[ОбъектXDTO];
	
	Возврат Объект;
	
КонецФункции // НайтиСостоянияЗаказовПокупателей()

Функция НайтиВидыКонтрагентов(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Перечисления.ВидыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Объект = Перечисления.ВидыКонтрагентов[ОбъектXDTO];
	
	Возврат Объект;
		
КонецФункции // НайтиСостоянияЗаказовПокупателей()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьДокумент(ИмяДокумента, ОбъектXDTO)
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы[ИмяДокумента].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

Процедура ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения)
	
	Если НужноЗаписыватьОбъект Тогда
		
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если Не ОбъектXDTO.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления
			И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
			Объект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			
			Если Не Объект.Проведен Тогда
				Объект.Записать();
			Иначе
				// отменяем проведение документа
				Объект.Проведен = Ложь;
				Объект.Записать();
				УдалитьДвиженияУДокумента(Объект);
			КонецЕсли;
			
		Исключение
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если ДокументыДляОтложенногоПроведения.Найти(Объект.Ссылка, "ДокументСсылка") = Неопределено Тогда
				СтрокаТаблицы = ДокументыДляОтложенногоПроведения.Добавить();
				СтрокаТаблицы.ДокументСсылка = Объект.Ссылка;
				СтрокаТаблицы.ДокументТип = Объект.Метаданные().Имя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДокумент()

Процедура ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект)
	
	Если Объект.Дата <> ОбъектXDTO.Дата Тогда
		Объект.Дата = ОбъектXDTO.Дата;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновныеРеквизитыДокумента()

Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры // УдалитьДвиженияУДокумента()

Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьНаличиеДвиженийПоДокументу()

Функция ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	
	Если ОбъектXDTO.Тип = "Контрагенты" Тогда
		Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "КонтактныеЛица" Тогда
		Ссылка = Справочники.КонтактныеЛица.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "СпециализацияВрача" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Тип = "Товары" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Тип = "ВидыМероприятий" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Тип = "Проекты" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Тип = "Визит" Тогда
		Ссылка = Документы.Визит.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "Мероприятие" Тогда
		Ссылка = Документы.Мероприятие.ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	Исключение
	КонецПопытки;
	
КонецФункции // ПометитьОбъектНаУдаление()

Процедура ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения)

	ДокументыДляОтложенногоПроведения.Сортировать("ДокументТип");
	
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдалятьРегистрациюИзменений = Не ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, Объект);
		Объект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			Объект.ПроверитьЗаполнение();
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если УдалятьРегистрациюИзменений Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

// Получает координаты.
//
Функция ПолучитьКоординаты(КоординатыXDTO)
	
	СериализиаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Попытка
		Координаты = СериализиаторXDTO.ПрочитатьXDTO(КоординатыXDTO);
	Исключение
		Координаты = Неопределено;
	КонецПопытки;
	
	Возврат Координаты;
	
КонецФункции

#КонецОбласти