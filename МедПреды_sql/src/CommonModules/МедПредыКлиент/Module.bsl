//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ОбъектСОшибкой, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	
	Если ОбъектСОшибкой <> Неопределено Тогда
		Сообщение.УстановитьДанные(ОбъектСОшибкой);
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обновляет состояние документа.
//
Процедура ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение) Экспорт
	
	Если Объект.Проведен Тогда
		СостояниеДокумента = "Проведен";
		КартинкаСостоянияДокумента = 1;
	ИначеЕсли РазрешеноПроведение Тогда
		СостояниеДокумента = "Не проведен";
		КартинкаСостоянияДокумента = 0;
	Иначе
		СостояниеДокумента = "Записан";
		КартинкаСостоянияДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

// Функция возвращает представление дня недели.
//
Функция ПолучитьПредставлениеДняНедели(ДеньНеделиКалендаря) Экспорт
	
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		
		Возврат НСтр("ru = 'Пн'");
		
	ИначеЕсли НомерДняНедели = 2 Тогда
		
		Возврат НСтр("ru = 'Вт'");
		
	ИначеЕсли НомерДняНедели = 3 Тогда
		
		Возврат НСтр("ru = 'Ср'");
		
	ИначеЕсли НомерДняНедели = 4 Тогда
		
		Возврат НСтр("ru = 'Чт'");
		
	ИначеЕсли НомерДняНедели = 5 Тогда
		
		Возврат НСтр("ru = 'Пт'");
		
	ИначеЕсли НомерДняНедели = 6 Тогда
		
		Возврат НСтр("ru = 'Сб'");
		
	Иначе
		
		Возврат НСтр("ru = 'Вс'");
		
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеДняНедели()

// Заполняет структуру данных для открытии формы выбора календаря
//
Функция ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии, 
		ЗакрыватьПриВыборе = Истина, 
		МножественныйВыбор = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить(
		"ДатаКалендаря", 
			ДатаКалендаряПриОткрытии
		);
		
	СтруктураПараметров.Вставить(
		"ЗакрыватьПриВыборе", 
			ЗакрыватьПриВыборе
		);
		
	СтруктураПараметров.Вставить(
		"МножественныйВыбор", 
			МножественныйВыбор
		);
		
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыОткрытияФормыКалендаря()

// Помещает переданное значение в СписокЗначений
// 
Функция ЗначениеВСписокЗначенийНаКлиенте(Значение, СписокЗначений = Неопределено, ДобавлятьДубликаты = Ложь) Экспорт
	
	Если ТипЗнч(СписокЗначений) = Тип("СписокЗначений") Тогда
		
		Если ДобавлятьДубликаты Тогда
			
			СписокЗначений.Добавить(Значение);
			
		ИначеЕсли СписокЗначений.НайтиПоЗначению(Значение) = Неопределено Тогда
			
			СписокЗначений.Добавить(Значение);
			
		КонецЕсли;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Значение);
		
	КонецЕсли;
	
	Возврат СписокЗначений;
	
КонецФункции // ЗначениеВСписокЗначенийНаКлиенте()

// Заполняет список значеий Приемник из списка значений Источник
//
Процедура ЗаполнитьСписокИзСписка(Источник,Приемник) Экспорт

	Приемник.Очистить();
	Для каждого ЭлСписка Из Источник Цикл
		Приемник.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДЧИНЕННЫМИ ТАБЛИЧНЫМИ ЧАСТЯМИ

// Процедура добавляет ключ связи в табличную часть.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//
Процедура ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ФормаДокумента, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КлючСвязи = СоздатьНовыйКлючСвязи(ФормаДокумента);
	
КонецПроцедуры // ДобавитьКлючСвязиВСтрокуТабличнойЧасти()

// Процедура добавляет ключ связи в подчиненную табличную часть.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти];
	
	Если Строка = Неопределено Тогда
		СтрокаПодчиненнойТабличнойЧасти = ПодчиненнаяТабличнаяЧасть.ТекущиеДанные;
	Иначе
		СтрокаПодчиненнойТабличнойЧасти = Строка;
	КонецЕсли;
	СтрокаПодчиненнойТабличнойЧасти.КлючСвязи = ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"];
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"]);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;

КонецПроцедуры // ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти()

// Процедура запрещает добавление новой строки, если не выбрана строка в основной табличной части.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Функция ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт

	Если ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции // ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть()

// Процедура удаляет строки из подчиненной табличной части.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура УдалитьСтрокиПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Объект[ИмяПодчиненнойТабличнойЧасти];
	
	РезультатПоиска = ПодчиненнаяТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
	Для каждого СтрокаПоиска Из  РезультатПоиска Цикл
		ИндексУдаления = ПодчиненнаяТабличнаяЧасть.Индекс(СтрокаПоиска);
		ПодчиненнаяТабличнаяЧасть.Удалить(ИндексУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПодчиненнойТабличнойЧасти()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Процедура устанавливает отбор на подчиненную табличную часть.
//
Процедура УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
КонецПроцедуры //УстановитьОтборНаПодчиненнуюТабличнуюЧасть()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ СПИСКА И ВЫБОРА СПРАВОЧНИКА КОНТРАГЕНТЫ

// Функция проверяет корректность позиционирования при активизации строки.
//
Функция ПозиционированиеКорректно(Форма) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы.Список.ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы.Список.ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПозиционированиеКорректно()

// Процедура заполняет надпись подвала: Основание выбора справочника Контрагенты.
//
Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Контрагент", Форма.Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуОснования()

// Процедура восстанваливает отображение списка после полнотекстового поиска.
//
Процедура ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Иерархический список" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Дерево" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМ СПИСКА (ИНФОРМАЦИОННАЯ ПАНЕЛЬ)

// Обрабатывает событие активизации строки списка документов.
//
Процедура ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнфПанели) Экспорт
	
	ТекущиеДанныеСписка = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено
		И ТекущиеДанныеСписка.Свойство(ПараметрыИнфПанели.РеквизитКИ) Тогда
		
		ТекущийРеквизитКИ = ТекущиеДанныеСписка[ПараметрыИнфПанели.РеквизитКИ];
		
		Если Форма.ИнформацияСсылка <> ТекущийРеквизитКИ Тогда
			
			Если ЗначениеЗаполнено(ТекущийРеквизитКИ) Тогда
				
				ДанныеИП = МедПредыФирмойСервер.ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели);
				ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП);
				
				Форма.ИнформацияСсылка = ТекущийРеквизитКИ;
				
			Иначе
				
				ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

// Процедура заполняет данные информационной панели списка.
//
Процедура ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП = Неопределено)
	
	Если ДанныеИП = Неопределено Тогда
	
		Форма.ИнформацияСсылка = Неопределено;
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон = "";
			Форма.ИнформацияКонтрагентЭП = "";
			Форма.ИнформацияКонтрагентФакс = "";
			
			Форма.ИнформацияКонтрагентФактАдрес = "";
			Если Форма.Элементы.Найти("ИнформацияКонтрагентАдресДоставки") <> Неопределено
				ИЛИ Форма.Элементы.Найти("РасшифровкаСпискаКонтрагентАдресДоставки") <> Неопределено Тогда
				
				Форма.ИнформацияКонтрагентАдресДоставки = "";
				
			КонецЕсли;
			Форма.ИнформацияКонтрагентЮрАдрес = "";
			
			Форма.ИнформацияКонтрагентПочтовыйАдрес = "";
			Форма.ИнформацияКонтрагентДругаяИнформация = "";
			
			// Взаиморасчеты.
			Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
				
				Форма.ИнформацияДолгКонтрагента = 0;
				Форма.ИнформацияНашДолг = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контактная информация контактных лиц.
		Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
			
			Форма.ИнформацияКонтактноеЛицоТелефон = "";
			Форма.ИнформацияКонтактноеЛицоЭП = "";
			
		КонецЕсли;
		
	Иначе
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон 	= ДанныеИП.Телефон;
			Форма.ИнформацияКонтрагентЭП 		= ДанныеИП.ЭлПочта;
			Форма.ИнформацияКонтрагентФакс 		= ДанныеИП.Факс;
			
			Форма.ИнформацияКонтрагентФактАдрес = ДанныеИП.ФактАдрес;
			Если Форма.Элементы.Найти("ИнформацияКонтрагентАдресДоставки") <> Неопределено
				ИЛИ Форма.Элементы.Найти("РасшифровкаСпискаКонтрагентАдресДоставки") <> Неопределено Тогда
				
				Форма.ИнформацияКонтрагентАдресДоставки = ДанныеИП.АдресДоставки;
				
			КонецЕсли;
			Форма.ИнформацияКонтрагентЮрАдрес 	= ДанныеИП.ЮрАдрес;
			
			Форма.ИнформацияКонтрагентПочтовыйАдрес 	= ДанныеИП.ПочтовыйАдрес;
			Форма.ИнформацияКонтрагентДругаяИнформация 	= ДанныеИП.ДругаяИнформация;
			
			// Взаиморасчеты.
			Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
				
				Форма.ИнформацияДолгКонтрагента = ДанныеИП.Долг;
				Форма.ИнформацияНашДолг 		= ДанныеИП.НашДолг;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контактная информация контактных лиц.
		Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
			
			Форма.ИнформацияКонтактноеЛицоТелефон 	= ДанныеИП.ТелефонКЛ;
			Форма.ИнформацияКонтактноеЛицоЭП 		= ДанныеИП.ЭлПочтаКЛ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельЗаполнить()

#Область ДисконтныеКарты

// Обрабатывает событие активизации строки списка документов.
//
Процедура ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнфПанели) Экспорт
	
	ТекущиеДанныеСписка = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено
		И ТекущиеДанныеСписка.Свойство(ПараметрыИнфПанели.РеквизитКИ) Тогда
		
		ТекущийРеквизитКИ = ТекущиеДанныеСписка[ПараметрыИнфПанели.РеквизитКИ];
		
		Если Форма.ИнформацияСсылка <> ПараметрыИнфПанели.ДисконтнаяКарта Тогда
			
			Если ЗначениеЗаполнено(ПараметрыИнфПанели.ДисконтнаяКарта) Тогда
				
				ДанныеИП = МедПредыФирмойСервер.ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели);
				ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП);
				
				Форма.ИнформацияСсылка = ТекущийРеквизитКИ;
				
			Иначе
				
				ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

// Процедура заполняет данные информационной панели списка.
//
Процедура ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП = Неопределено)
	
	Если ДанныеИП = Неопределено Тогда
	
		Форма.ИнформацияСсылка = Неопределено;
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон = "";
			Форма.ИнформацияКонтрагентЭП = "";
			Форма.ИнформацияПроцентСкидкиПоДисконтнойКарте = "";
			Форма.ИнформацияСуммаПродажПоДисконтнойКарте = "";
			
		КонецЕсли;
		
	Иначе
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон 				= ДанныеИП.Телефон;
			Форма.ИнформацияКонтрагентЭП 					= ДанныеИП.ЭлПочта;
			Форма.ИнформацияПроцентСкидкиПоДисконтнойКарте 	= ДанныеИП.ПроцентСкидкиПоДисконтнойКарте;
			Форма.ИнформацияСуммаПродажПоДисконтнойКарте	= ДанныеИП.СуммаПродажПоДисконтнойКарте;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельЗаполнить()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ

// Процедура разворачивает дерево значений на форме.
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	
	Для каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Процедура обработчик события ПередУдалением.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Процедура обработчик события ПриНачалеРедактирования.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Процедура изменения элемента отбора в группе элементов отбора.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);		
		Иначе
		    УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Функция считывает значения элементов отбора динамического списка
//
Функция ПрочитатьЗначенияОтбораДинамическогоСписка(Список) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ТипЗнч(Список) = Тип("ДинамическийСписок") Тогда
		
		Для каждого ЭлементОтбораДинамическогоСписка Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			ИмяОтбора = Строка(ЭлементОтбораДинамическогоСписка.ЛевоеЗначение);
			ЗначениеОтбора = ЭлементОтбораДинамическогоСписка.ПравоеЗначение;
			
			Если Найти(ИмяОтбора, ".") > 0 ИЛИ НЕ ЭлементОтбораДинамическогоСписка.Использование Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить(ИмяОтбора, ЗначениеОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции // ПрочитатьЗначенияОтбораДинамическогоСписка()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ РАСЧЕТАМИ ИТОГОВ

// Процедура открывает форму самостоятельного управления расчетами итогов
//
Процедура УправлениеИтогами() Экспорт
	
КонецПроцедуры //УправлениеИтогами()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПЕЧАТЬЮ

// Функция формирует заголовок для общей формы "Печать".
// ПараметрКоманды - параметр команды печати.
//
Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") 
		И ПараметрКоманды.Количество() = 1 Тогда 
		
		Возврат Новый Структура("ЗаголовокФормы", ПараметрКоманды[0]);
		
	КонецЕсли;

	Возврат Новый Структура;
	
КонецФункции // ПолучитьЗаголовокПечатнойФормы()

Функция ПечатьСчетовФактур(ПараметрКоманды) Экспорт
	
	ПараметрыПечати = ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды);
	
	Если ПараметрКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ПараметрКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	СписокМакетов = МедПредыФирмойСервер.ПолучитьСписокМакетовСчетовФактур(ПараметрКоманды.ОбъектыПечати);
	Если СписокМакетов <> "" Тогда 
		
		Если ПараметрКоманды.ОбъектыПечати.Количество() > 0
			И ТипЗнч(ПараметрКоманды.ОбъектыПечати[0]) = Тип("ДокументСсылка.СчетФактура") Тогда
			ИмяМенеджераПечати = "Документ.СчетФактура";
		Иначе
			ИмяМенеджераПечати = "Документ.СчетФактураПолученный";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяМенеджераПечати,
			СписокМакетов,
			ПараметрКоманды.ОбъектыПечати,
			ПараметрКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
КонецФункции

// Функция формирования УПД
//
Функция ПечатьУПД(ПараметрКоманды) Экспорт
	Перем Ошибки;
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	МедПредыФирмойСервер.ПроверитьВидОперации(МассивОбъектовПечати, Ошибки);
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		МедПредыКлиент.СформироватьПечатныеФормыУПД(МассивОбъектовПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СформироватьПечатныеФормыУПД()

// Функция формирования УКД
//
Функция ПечатьУКД(ПараметрКоманды) Экспорт
	Перем Ошибки;
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	МедПредыФирмойСервер.ПроверитьВозможностьПечатиУКД(МассивОбъектовПечати, Ошибки);
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		МедПредыКлиент.СформироватьПечатныеФормыУКД(МассивОбъектовПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция формирования Приложения 4 (ТН)
//
Функция ПечатьТН(ПараметрКоманды) Экспорт
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		ОткрытьФорму("Обработка.ПечатьТН.Форма", Новый Структура("Документ", МассивОбъектовПечати[0]));
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьТН()

// Процедура обработки команды "ПечатьЭтикетки" или "ПечатьЦенника" из документов 
// - Перемещения товаров
// - Приходная накладная
//
Функция ПечатьЭтикетокИЦенниковИзДокументов(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Количество() > 0 Тогда
		
		МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
		ЭтоЦенники = СтрНайти(ПараметрКоманды.Идентификатор, "ПечатьЦенников") > 0;
		АдресВХранилище = МедПредыФирмойСервер.ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(МассивОбъектовПечати, ЭтоЦенники);
		СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.Форма", СтруктураПараметры, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьЭтикетокИзПеремещенияТоваров()

Функция СформироватьБланкиДоговоров(ПараметрКоманды) Экспорт
	
	Для каждого ОбъектПечати Из ПараметрКоманды.ОбъектыПечати Цикл
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", МедПредыФирмойСервер.ПолучитьДоговорДокумента(ОбъектПечати));
		Параметры.Вставить("Документ", ОбъектПечати);
		ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Параметры);
		ОткрытьФорму(ФормаДоговора);
		ФормаДоговора.Элементы.Страницы.ТекущаяСтраница = ФормаДоговора.Элементы.СтраницаТекстДоговора;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьДоговорКонтрагента(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда 
		ИсточникПечати = ПараметрКоманды.Форма;
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ПараметрКоманды.Форма.Элементы.Список.ТекущиеДанные.Ссылка);
		ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы);
		ОткрытьФорму(ФормаДоговора);
		ИсточникПечати = ФормаДоговора;
	КонецЕсли;
	
	ИсточникПечати.Элементы.Страницы.ТекущаяСтраница = ИсточникПечати.Элементы.СтраницаТекстДоговора;
	
	Если ПараметрКоманды.Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда
		
		Объект = ПараметрКоманды.Форма.Объект;
		Договор = ИсточникПечати.ДоговорHTMLДокумент;
		
		Если НЕ ЗначениеЗаполнено(Объект.БланкДоговора) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СсылкаБланка", Объект.БланкДоговора);
		
		МассивРедактируемыхПараметров = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		ВсеРедактируемыеПараметрыЗаполнены = Истина;
		Для Каждого Строка Из МассивРедактируемыхПараметров Цикл 
			Если СтрНайти(Договор, Строка.Идентификатор) <> 0 Тогда
				Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда 
					ВсеРедактируемыеПараметрыЗаполнены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВсеРедактируемыеПараметрыЗаполнены Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПечатьДоговорКонтрагентаВопрос", ЭтотОбъект,
			               Новый Структура("ИсточникПечати", ИсточникПечати)),
			               НСтр("ru='Не все редактируемые вручную поля заполнены, продолжить печать?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьДоговорКонтрагентаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	ИсточникПечати = ДополнительныеПараметры.ИсточникПечати;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати);
	КонецЕсли;
	
КонецФункции

Функция ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати)
	
	document = ИсточникПечати.Элементы.ДоговорHTMLДокумент.Документ;
	Если document.execCommand("Print") = Ложь Тогда 
		document.defaultView.print();
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////// 
// ПЕРЕОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОТПРАВКИ ЭЛЕКТРОННОЙ ПОЧТЫ

// Интерфейсная клиентская процедура, поддерживающая вызов формы редактирования нового письма.
// При отправке письма через стандартную общую форму ОтправкаСообщения сообщения не сохраняются в информационной базе.
//
// Параметры см. в описании функции РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(Отправитель, Получатель, Тема, Текст, СписокФайлов, ДокументыОснования, УдалятьФайлыПослеОтправки, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("ЗначенияЗаполнения", Новый Структура("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо")));
	
	ПараметрыПисьма.Вставить("УчетнаяЗапись", Отправитель);
	ПараметрыПисьма.Вставить("Кому", Получатель);
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Вложения", СписокФайлов);
	ПараметрыПисьма.Вставить("ДокументыОснования", ДокументыОснования);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", УдалятьФайлыПослеОтправки);
	
	ОткрытьФорму("Документ.Событие.Форма.ФормаЭлектронногоПисьма", ПараметрыПисьма, , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Создает письмо по контактной информации.
// При формировании письма стандартной процедурой в форму отправки не передается информация об объекте-контакте
//
// Параметры см. в описании функции УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо.
//
Процедура СоздатьЭлектронноеПисьмо(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено, ОбъектФормы) Экспорт
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
		
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Нельзя создать письмо по контактной информацию с типом ""%1""'"),
			"%1", ТипИнформации);
	КонецЕсли;
	
	XMLДанные = КонтактнаяИнформация.ДанныеXML;
	АдресПочты = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	Если ТипЗнч(АдресПочты) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения адреса электронной почты, неверный тип контактной информации'");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		// УНФ. Начало
		ОбъектКонтакт = Неопределено;
		ОбъектФормы.Свойство("Ссылка", ОбъектКонтакт);
		СтруктураПолучателя = Новый Структура("Представление, Адрес", ОбъектКонтакт, АдресПочты);
		АдресПочты = Новый Массив;
		АдресПочты.Добавить(СтруктураПолучателя);
		// УНФ. Конец
		
		ПараметрыОтправки = Новый Структура("Получатель", АдресПочты);
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
		Возврат; 
	КонецЕсли;
	
	// Нет подсистемы почты, запускаем системное
	Оповещение = Новый ОписаниеОповещения("СоздатьПисьмоПоКонтактнойИнформацииЗавершение", ЭтотОбъект, АдресПочты);
	ТекстПредложения = НСтр("ru = 'Для отправки письма необходимо установить расширение для работы с файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// Общий модуль ОбщегоНазначения больше не поддерживает "Вызов сервера".
// Исправления и поддержка нового поведения
//

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ТестНастроекСертификата() формы элемента справочника СертификатыЭП
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработкаКоманды() команды ТестНастроекСоглашения справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры Добавить() формы обработки Прайс-лист
//
Функция ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_ОбработкаПрайсЛистФормаОбработки()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ДеревоПодчиненныеЭДВыбор() формы ДеревоЭД обработки ЭлектронныеДокументы
//
Функция ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработатьОтклонениеЭД() формы ФормаПросмотраЭД справочника ЭДПрисоединенныеФайлы
//
Функция ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка) Экспорт
	
	Возврат МедПредыФирмойСервер.ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

///////////////////////////////////////////////////////////////////////////////// 
// РАБОТА С ФОРМАМИ

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода.
//                              Может быть установлена пост-обрабокта в месте вызова после выбора периода.
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли;
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли;
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод()
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли;
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли;
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет параметры формы из параметров выбора элемента.
// Используется, например, когда следует заполнить реквизиты "Покупатель", "Поставщик"
// в открывшейся форме создания контрагенента из классификатора контактов.
//
// Параметры:
//  ПараметрыФормы	 - Структура - параметры формы, которые следует дополнить,
//  Элемент			 - ЭлементФормы - элемент формы, для которого вызвается процедура.
//
Процедура ДополнитьПараметрыФормыИзПараметровВыбораЭлемента(ПараметрыФормы, Знач Элемент) Экспорт
	
	Для Каждого ТекПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		
		КомпонентыИмени = СтрРазделить(ТекПараметрВыбора.Имя, ".", Ложь);
		
		Если КомпонентыИмени.Количество() = 1 Тогда
			ПараметрыФормы.Вставить(КомпонентыИмени[0], ТекПараметрВыбора.Значение);
			Продолжить;
		КонецЕсли;
		
		Если КомпонентыИмени[0] <> "Отбор" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
		КонецЕсли;
		
		ПараметрыФормы.ЗначенияЗаполнения.Вставить(КомпонентыИмени[1], ТекПараметрВыбора.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПечатьПоШаблонуОфисногоДокумента(ПараметрКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШаблонПечати", ПараметрКоманды.ДополнительныеПараметры.ШаблонПечатиОфисныхДокументов);
	ПараметрыФормы.Вставить("ОбъектыПечати", ПараметрКоманды.ОбъектыПечати);
	
	ОткрытьФорму("Справочник.ШаблоныПечатиОфисныхДокументов.Форма.ФормаПечати", ПараметрыФормы);
	
КонецФункции
