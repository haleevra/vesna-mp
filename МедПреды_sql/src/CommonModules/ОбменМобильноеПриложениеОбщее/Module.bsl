
#Область ВыгрузкаВМобильноеПриложение

Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
	
	Перенос = Истина;
	
	//Если ТипЗнч(Данные) = Тип("ДокументОбъект.Визит")
	//	ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.Мероприятие") Тогда
	//	
	//	Если УзелОбмена.Профиль = Перечисления.ПрофилиМобильногоПриложения.МедПредставитель Тогда
	//		Перенос = Ложь;
	//	Иначе
	//		//! условие что супервайзер имеет доступ к этому проекту
	//	КонецЕсли;
	//					
	//КонецЕсли;
	
	Возврат Перенос;
	
КонецФункции // НуженПереносДанных()

Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			//Если УзелОбмена.Профиль = Перечисления.ПрофилиМобильногоПриложения.Супервайзер Тогда
			//	
				ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
				Если ПолноеИмяОбъекта = "Документ.Визит" Тогда
					Выборка = ПолучитьВыборкуВизитовДляРегистрации(УзелОбмена);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
						
					КонецЦикла;
				ИначеЕсли ПолноеИмяОбъекта = "Документ.Мероприятие" Тогда
					Выборка = ПолучитьВыборкуМероприятийДляРегистрации(УзелОбмена);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
						
					КонецЦикла;
				КонецЕсли;
			//	
			//КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Если ПолноеИмяОбъекта = "Справочник.Проекты" Тогда
				Выборка = ПолучитьВыборкуПроектовДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
										
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
				
			ИначеЕсли ПолноеИмяОбъекта = "Справочник.Контрагенты" Тогда
				Выборка = ПолучитьВыборкуКонтрагентовДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
										
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
				
			ИначеЕсли ПолноеИмяОбъекта = "Справочник.КонтактныеЛица" Тогда
				Выборка = ПолучитьВыборкуКонтактныхЛицДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
										
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
				
			ИначеЕсли ПолноеИмяОбъекта = "Справочник.Товары" Тогда
				Выборка = ПолучитьВыборкуТоваровДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
										
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
				
			ИначеЕсли ПолноеИмяОбъекта = "Справочник.ВидыМероприятий" Тогда
				Выборка = ПолучитьВыборкуВидовМероприятийДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
										
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
				
			КонецЕсли;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

Функция ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ПериодВыгрузкиВМобильноеПриложение = МедПредыПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ПериодВыгрузкиВМобильноеПриложение"
	);
	
	Если ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийКвартал Тогда
		ДатаНачалаВыгрузки = НачалоКвартала(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц Тогда
		ДатаНачалаВыгрузки = ДобавитьМесяц(НачалоДня(ТекущаяДата()), -1);
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю Тогда
		ДатаНачалаВыгрузки = НачалоНедели(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень Тогда
		ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	Иначе
		ДатаНачалаВыгрузки = '00010101';
	КонецЕсли;
	
	ОтборыДляВыгрузкиДокументов = Новый Структура;
	
	ОтборыДляВыгрузкиДокументов.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	
	Возврат ОтборыДляВыгрузкиДокументов;
	
КонецФункции // ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()

Функция ПолучитьВыборкуВизитовДляРегистрации(УзелОбмена)
	
	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Визиты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Визиты
	|ИЗ
	|	Документ.Визит КАК Визиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Визиты.Проект = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.Супервайзер = &Пользователь)
	|			И (Визиты.Ответственный = ДоступныеПроекты.МедПредставитель
	|				ИЛИ Визиты.Ответственный = &Пользователь)
	|ГДЕ
	|	Визиты.Дата >= &ДатаНачалаВыгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Визиты.Ссылка
	|ИЗ
	|	Документ.Визит КАК Визиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Визиты.Проект = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.МедПредставитель = &Пользователь)
	|			И (Визиты.Ответственный = &Пользователь)
	|ГДЕ
	|	Визиты.Дата >= &ДатаНачалаВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Визиты.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Визиты КАК ВТ_Визиты"
	;
	
	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуВизитовДляРегистрации()

Функция ПолучитьВыборкуМероприятийДляРегистрации(УзелОбмена)
	
	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Мероприятие.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Мероприятия
	|ИЗ
	|	Документ.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Мероприятие.Проект = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.Супервайзер = &Пользователь)
	|			И (Мероприятие.Ответственный = ДоступныеПроекты.МедПредставитель
	|				ИЛИ Мероприятие.Ответственный = &Пользователь)
	|ГДЕ
	|	Мероприятие.Дата >= &ДатаНачалаВыгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Мероприятие.Ссылка
	|ИЗ
	|	Документ.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Мероприятие.Проект = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.МедПредставитель = &Пользователь)
	|			И (Мероприятие.Ответственный = &Пользователь)
	|ГДЕ
	|	Мероприятие.Дата >= &ДатаНачалаВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Мероприятия.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Мероприятия КАК ВТ_Мероприятия"
	;
	
	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуВизитовДляРегистрации()

Функция ПолучитьВыборкуПроектовДляРегистрации(УзелОбмена)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Проекты.Ссылка = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.МедПредставитель = &Пользователь
	|				ИЛИ ДоступныеПроекты.Супервайзер = &Пользователь)";

	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуПроектовДляРегистрации()

Функция ПолучитьВыборкуКонтрагентовДляРегистрации(УзелОбмена)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеБизнесРегионы КАК ДоступныеБизнесРегионы
	|		ПО Контрагенты.БизнесРегион = ДоступныеБизнесРегионы.БизнесРегион
	|			И (ДоступныеБизнесРегионы.Пользователь = &Пользователь)";

	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуКонтрагентовДляРегистрации()

Функция ПолучитьВыборкуКонтактныхЛицДляРегистрации(УзелОбмена)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеБизнесРегионы КАК ДоступныеБизнесРегионы
	|		ПО КонтактныеЛица.Владелец.БизнесРегион = ДоступныеБизнесРегионы.БизнесРегион
	|			И (ДоступныеБизнесРегионы.Пользователь = &Пользователь)";

	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуКонтактныхЛицДляРегистрации()

Функция ПолучитьВыборкуТоваровДляРегистрации(УзелОбмена)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПроектыПрепараты.Товар.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Проекты.Препараты КАК ПроектыПрепараты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО ПроектыПрепараты.Ссылка = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.МедПредставитель = &Пользователь
	|				ИЛИ ДоступныеПроекты.Супервайзер = &Пользователь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроектыКонкуренты.Товар.Ссылка
	|ИЗ
	|	Справочник.Проекты.Конкуренты КАК ПроектыКонкуренты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО ПроектыКонкуренты.Ссылка = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.МедПредставитель = &Пользователь
	|				ИЛИ ДоступныеПроекты.Супервайзер = &Пользователь)";

	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуТоваровДляРегистрации()

Функция ПолучитьВыборкуВидовМероприятийДляРегистрации(УзелОбмена)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыМероприятий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыМероприятий КАК ВидыМероприятий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО ВидыМероприятий.Владелец = ДоступныеПроекты.Проект
	|			И (ДоступныеПроекты.МедПредставитель = &Пользователь
	|				ИЛИ ДоступныеПроекты.Супервайзер = &Пользователь)";

	Запрос.УстановитьПараметр("Пользователь", УзелОбмена.Пользователь);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуТоваровДляРегистрации()

Процедура ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МобильныйКлиент.Установить(УзелОбмена);
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщенияОчереди);
	НаборЗаписей.Прочитать();
	
	// Если сообщение с таким номером уже есть в очереди, генерируем исключение.
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным клиентом.Добавление сообщения в очередь сообщений обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			УзелОбмена,
			НСтр("ru = 'Очередь сообщений обмена уже содержит сообщение с номером " + НомерСообщенияОчереди + ".'"));
			
		// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
		ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		
		ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Подробности см. в Журнале регистрации информационной базы.'"));
		
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.МобильныйКлиент = УзелОбмена;
	НоваяЗапись.НомерСообщения = НомерСообщенияОчереди;
	НоваяЗапись.СообщениеОбмена = СообщениеОбмена;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ДобавитьСообщениеВОчередьСообщенийОбмена()

Функция ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	Возврат ЗаписьXML;
	
КонецФункции

Процедура ПроверитьОчередьСообщенийОбмена(УзелОбмена, Знач НомерПринятого) Экспорт

	НомерСообщенияОчереди = НомерПринятого + 1;
	
	Отбор = Новый Структура("МобильныйКлиент", УзелОбмена);
	Порядок = "НомерСообщения Возр";
	ВыборкаСообщенийОбмена = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.Выбрать(Отбор, Порядок);
	
	Пока ВыборкаСообщенийОбмена.Следующий() Цикл
		
		Если ВыборкаСообщенийОбмена.НомерСообщения < НомерСообщенияОчереди Тогда
			
			Продолжить;
			
		ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > НомерСообщенияОчереди Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с мобильным клиентом.Проверка очереди сообщений обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ВыборкаСообщенийОбмена.МобильныйКлиент,
				НСтр("ru = 'Нарушен порядок следования сообщений обмена.'"));
				
			// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
			ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
			
			ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Подробности см. в Журнале регистрации информационной базы.'"));
			
		КонецЕсли;
		
		НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	КонецЦикла;

КонецПроцедуры

Функция СформироватьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого, НужнаИнициализацияУзла = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НужнаИнициализацияУзла Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
		ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена);
		ЗарегистрироватьИзмененияДанных(УзелОбмена);
	Иначе
		ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена, НомерПринятого);
	КонецЕсли;
	
	НомерСообщенияОчереди = УзелОбмена.НомерОтправленного;
	
	// Запись данных в очередь.
	СериализоватьИДобавитьДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди);
	
	// Проверка порядка следования сообщений обмена.
	ПроверитьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого);
	
	// Удаляем регистрацию изменений для сообщений обмена, помещенных в очередь.
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
	
КонецФункции // СформироватьОчередьСообщенийОбмена()

Процедура СериализоватьИДобавитьДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди) Экспорт
	
	ЗаписьСообщения = Неопределено;
	ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
	
	ВозвращаемыйСписок = ОбменМобильноеПриложениеПравилаВыгрузки.СоздатьОбъектXDTO("Объекты");
	
	КоличествоОбъектов = 0; // Счетчик объектов.
		
	// Запись настроек
	ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьНастройкиВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов);
	
	// Запись справочников и документов
	ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьСправочникиИДокументыВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
	НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);

КонецПроцедуры // СериализоватьИДобавитьДанныеВОчередьСообщенийОбмена()

Процедура ЗапуститьФормированиеОчередиСообщенийОбмена(УзелОбмена, КодМобильногоКомпьютера, НомерПринятого, НужнаИнициализацияУзла, ИдентификаторЗадания) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(УзелОбмена);
	МассивПараметров.Добавить(НомерПринятого);
	МассивПараметров.Добавить(НужнаИнициализацияУзла);
	
	ИмяФункции = "ОбменМобильноеПриложениеОбщее.СформироватьОчередьСообщенийОбмена";
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(
		ИмяФункции,
		МассивПараметров,
		,
		КодМобильногоКомпьютера);
		
	ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	
КонецПроцедуры

Функция ПолучитьСообщениеОбмена(УзелОбмена, НомерСообщенияОбмена, ИдентификаторЗадания) Экспорт

	СтруктураОтвета = Новый Структура("Подождать, ПродолжитьЗагрузку, ПрерватьЗагрузку, СообщениеОбмена", Ложь, Истина, Ложь, Неопределено);
	
	СообщениеОбмена = ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена);
	Если СообщениеОбмена <> Неопределено Тогда
		СтруктураОтвета.СообщениеОбмена = СообщениеОбмена;
		Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));
	КонецЕсли;
	
	// Если сообщения нет в очереди, проверим состояние выполнения фонового задания.
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОчередьСообщенийСформирована = ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки, СообщениеОбОшибке);
	
	НужноОчиститьОчередьСообщений = Ложь;
	// Если есть ошибки, сбрасываем счетчики сообщений для переотправки данных при следующем сеансе обмена.
	Если ЕстьОшибки Тогда
		ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		НужноОчиститьОчередьСообщений = Истина;
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;
	
	// Если нет сообщений и очередь была сформирована, считаем что все пакеты успешно получены, иначе ожидаем пакеты.
	Если ОчередьСообщенийСформирована Тогда
		СтруктураОтвета.Подождать = Ложь;
		СтруктураОтвета.ПродолжитьЗагрузку = Ложь;
		НужноОчиститьОчередьСообщений = Истина;
	Иначе
		СтруктураОтвета.Подождать = Истина;
		СтруктураОтвета.ПродолжитьЗагрузку = НЕ ЕстьОшибки;
	КонецЕсли;
	
	СтруктураОтвета.ПрерватьЗагрузку = ЕстьОшибки;
	
	Если НужноОчиститьОчередьСообщений Тогда
		
		ОтборЗадания = Новый Структура("Ключ", Строка(ИдентификаторЗадания));
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗадания);
		
		Если МассивЗаданий.Количество() = 0  Тогда // Если очистка не запускалась, то запустить.
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(УзелОбмена);
			
			ИмяФункции = "ОбменМобильноеПриложениеОбщее.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом";
			
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(
				ИмяФункции,
				МассивПараметров,
				Строка(ИдентификаторЗадания),
				НСтр("ru='Очистка очереди сообщений с мобильным клиентом'"));
				
			СтруктураОтвета.Подождать = Истина; // Подождем очистку.
			СтруктураОтвета.ПродолжитьЗагрузку = Истина;
			
		Иначе
			
			Если МассивЗаданий[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
				СтруктураОтвета.Подождать = Истина; // Подождем очистку.
				СтруктураОтвета.ПродолжитьЗагрузку = Истина;
			КонецЕсли;
			
		КонецЕСли;
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));

КонецФункции

Функция СформироватьЕдиныйПакетВыгрузки(УзелОбмена) Экспорт
	
	ЗаписьСообщения = Неопределено;
	ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
	
	ТипДанныхУдаления = Тип("УдалениеОбъекта");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	ВозвращаемыйСписок = ОбменМобильноеПриложениеПравилаВыгрузки.СоздатьОбъектXDTO("Объекты");
	КоличествоОбъектов = 0;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			ОбменМобильноеПриложениеПравилаВыгрузки.УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбъектXDTO = ОбменМобильноеПриложениеПравилаВыгрузки.ПолучитьОбъектXDTO(Данные, КоличествоОбъектов);
		Если ОбъектXDTO <> Неопределено Тогда
			ВозвращаемыйСписок.объекты.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьОстаткиЗапасовВЕдиныйПакетВыгрузки(ВозвращаемыйСписок, Данные);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции // СформироватьПакетОбмена()

#КонецОбласти

#Область ЗагрузкаИзМобильногоПриложения

Функция ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки, СообщениеОбОшибке = "") Экспорт

	ЗаписьЖурналаРегистрации("Отладка", УровеньЖурналаРегистрации.Информация,,, "Идентификатор задания " + Строка(ИдентификаторЗадания));
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		Возврат ЗаданиеВыполнено;
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибки = Истина;
		ЗаписьЖурналаРегистрации("Отладка", УровеньЖурналаРегистрации.Ошибка,,, "Идентификатор задания " + Строка(ИдентификаторЗадания));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ЗаданиеФормированияОчередиЗавершеноУспешно()

Функция ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.СообщениеОбмена
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения = &НомерСообщения";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", УзелОбмена);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщенияОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СообщениеОбмена;

КонецФункции // ПолучитьСообщениеОбменаПоНомеру()

Функция ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, ТабЧасть) Экспорт
	
	ПрерватьЗаполнение = Ложь;
	КолонкиТабЧасти= Объект[ТабЧасть].ВыгрузитьКолонки().Колонки;
	
	Для каждого ТекСтрока Из Объект[ТабЧасть] Цикл
		Если ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
			И ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Характеристика") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Характеристика)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Партия") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Партия)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СерийныеНомера") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СерийныеНомера)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Резерв") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Резерв)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("РезервОтгрузка") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.РезервОтгрузка)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Спецификация") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Спецификация)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("ПроцентАвтоматическойСкидки") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ПроцентАвтоматическойСкидки)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СуммаАвтоматическойСкидки") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СуммаАвтоматическойСкидки)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СправкаБ") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СправкаБ)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("НомерГТД") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.НомерГТД)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("ЗаказПоставщику") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СтруктурнаяЕдиница") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СтруктурнаяЕдиница)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("НаправлениеДеятельности") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.НаправлениеДеятельности)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПрерватьЗаполнение;
	
КонецФункции

Процедура ОбработатьПринятыйПакетЗагрузки(УзелОбмена, ДанныеОбмена, ОчиститьИзменения = Ложь) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ОчиститьИзменения Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	КонецЕсли;
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://www.prof-it.ru/ma/MobileExchange", "Объекты");
	
	Объекты = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	
	ОбменМобильноеПриложениеПравилаЗагрузки.ЗагрузитьОбъекты(УзелОбмена, Объекты);
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
КонецПроцедуры // ОбработатьПринятыйПакетЗагрузки()

#КонецОбласти

#Область Подписки

Процедура ОбменМобильноеПриложениеПриЗаписиДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	ПараметрыОтбора = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Визит") Тогда
		Визит = Источник.Ссылка;
		Если Визит.Дата >= ПараметрыОтбора.ДатаНачалаВыгрузки Тогда
			МассивУзловДляРегистрацииВизитов(Визит, МассивУзловДляРегистрации);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Мероприятие") Тогда
		Мероприятие = Источник.Ссылка;
		Если Мероприятие.Дата >= ПараметрыОтбора.ДатаНачалаВыгрузки Тогда
			МассивУзловДляРегистрацииМероприятий(Мероприятие, МассивУзловДляРегистрации);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПриЗаписиДокумента()

Процедура ОбменМобильноеПриложениеПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
		
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
		БизнесРегион = Источник.БизнесРегион;
		МассивУзловДляРегистрацииКонтрагентов(БизнесРегион, МассивУзловДляРегистрации);
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛица") Тогда
		БизнесРегион = Источник.Владелец.БизнесРегион;
		МассивУзловДляРегистрацииКонтрагентов(БизнесРегион, МассивУзловДляРегистрации);
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
		Проект = Источник;
		МассивУзловДляРегистрацииПроектов(Проект, МассивУзловДляРегистрации);
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Товары") Тогда
		Товар = Источник;
		МассивУзловДляРегистрацииТоваров(Товар, МассивУзловДляРегистрации);
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВидыМероприятий") Тогда
		ВидМероприятия = Источник;
		МассивУзловДляРегистрацииВидовМероприятий(ВидМероприятия, МассивУзловДляРегистрации);
	КонецЕсли;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура МассивУзловДляРегистрацииВизитов(Знач Визит, МассивУзловДляРегистрации)
	
	Перем Запрос, ТекстЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступныеПроекты.Супервайзер КАК Пользовтель
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	Документ.Визит КАК Визит
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Визит.Проект = ДоступныеПроекты.Проект
	|			И Визит.Ответственный = ДоступныеПроекты.МедПредставитель
	|ГДЕ
	|	Визит.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступныеПроекты.Супервайзер
	|ИЗ
	|	Документ.Визит КАК Визит
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Визит.Проект = ДоступныеПроекты.Проект
	|			И Визит.Ответственный = ДоступныеПроекты.Супервайзер
	|ГДЕ
	|	Визит.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Визит.Ответственный
	|ИЗ
	|	Документ.Визит КАК Визит
	|ГДЕ
	|	Визит.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МобильноеПриложение.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
	|		ПО МобильноеПриложение.Пользователь = ВТ_Пользователи.Пользовтель"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Визит);
	МассивУзловДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецПроцедуры

Процедура МассивУзловДляРегистрацииМероприятий(Знач Мероприятие, МассивУзловДляРегистрации)
	
	Перем Запрос, ТекстЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступныеПроекты.Супервайзер КАК Пользовтель
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	Документ.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Мероприятие.Проект = ДоступныеПроекты.Проект
	|			И Мероприятие.Ответственный = ДоступныеПроекты.МедПредставитель
	|ГДЕ
	|	Мероприятие.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступныеПроекты.Супервайзер
	|ИЗ
	|	Документ.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО Мероприятие.Проект = ДоступныеПроекты.Проект
	|			И Мероприятие.Ответственный = ДоступныеПроекты.Супервайзер
	|ГДЕ
	|	Мероприятие.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Мероприятие.Ответственный
	|ИЗ
	|	Документ.Мероприятие КАК Мероприятие
	|ГДЕ
	|	Мероприятие.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МобильноеПриложение.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
	|		ПО МобильноеПриложение.Пользователь = ВТ_Пользователи.Пользовтель"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Мероприятие);
	МассивУзловДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецПроцедуры

Процедура МассивУзловДляРегистрацииКонтрагентов(Знач БизнесРегион, МассивУзловДляРегистрации)
	
	Перем Запрос, ТекстЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МобильноеПриложение.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеБизнесРегионы КАК ДоступныеБизнесРегионы
	|		ПО МобильноеПриложение.Пользователь = ДоступныеБизнесРегионы.Пользователь
	|			И (ДоступныеБизнесРегионы.БизнесРегион = &БизнесРегион)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("БизнесРегион", БизнесРегион);
	МассивУзловДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецПроцедуры

Процедура МассивУзловДляРегистрацииПроектов(Знач Проект, МассивУзловДляРегистрации)
	
	Перем Запрос, ТекстЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МобильноеПриложение.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|		ПО (МобильноеПриложение.Пользователь = ДоступныеПроекты.Супервайзер
	|				ИЛИ МобильноеПриложение.Пользователь = ДоступныеПроекты.МедПредставитель)
	|			И (ДоступныеПроекты.Проект = &Проект)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект.Ссылка);
	МассивУзловДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецПроцедуры

Процедура МассивУзловДляРегистрацииТоваров(Знач Товар, МассивУзловДляРегистрации)
	
	Перем Запрос, ТекстЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПроектыПрепараты.Ссылка КАК Ссылка,
	|	ПроектыПрепараты.Товар КАК Товар
	|ПОМЕСТИТЬ ВТ_ТоварыПроекта
	|ИЗ
	|	Справочник.Проекты.Препараты КАК ПроектыПрепараты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроектыКонкуренты.Ссылка,
	|	ПроектыКонкуренты.Товар
	|ИЗ
	|	Справочник.Проекты.Конкуренты КАК ПроектыКонкуренты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МобильноеПриложение.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТоварыПроекта КАК ВТ_ТоварыПроекта
	|			ПО ДоступныеПроекты.Проект = ВТ_ТоварыПроекта.Ссылка
	|				И (ВТ_ТоварыПроекта.Товар = &Товар)
	|		ПО (МобильноеПриложение.Пользователь = ДоступныеПроекты.Супервайзер
	|				ИЛИ МобильноеПриложение.Пользователь = ДоступныеПроекты.МедПредставитель)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товар", Товар.Ссылка);
	МассивУзловДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецПроцедуры

Процедура МассивУзловДляРегистрацииВидовМероприятий(Знач ВидМероприятия, МассивУзловДляРегистрации)
	
	Перем Запрос, ТекстЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МобильноеПриложение.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеПроекты КАК ДоступныеПроекты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМероприятий КАК ВидыМероприятий
	|			ПО ДоступныеПроекты.Проект = ВидыМероприятий.Владелец
	|				И (ВидыМероприятий.Ссылка = &ВидМероприятия)
	|		ПО (МобильноеПриложение.Пользователь = ДоступныеПроекты.Супервайзер
	|				ИЛИ МобильноеПриложение.Пользователь = ДоступныеПроекты.МедПредставитель)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидМероприятия", ВидМероприятия.Ссылка);
	МассивУзловДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВерсияМобильногоПриложенияСПроизводством()
	
	Возврат "1.2.60.1";

КонецФункции

Функция ВерсияМобильногоПриложенияСРозницей()
	
	Возврат "1.2.80.1";

КонецФункции

//Функция НужноНакладыватьФильтр(УзелОбмена)
//	
//	Если НЕ Значениезаполнено(УзелОбмена) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Возврат УзелОбмена.ПоОтветственному;
//	
//КонецФункции

Процедура ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(МобильныйКлиент, НомерСообщения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И (&НомерСообщения = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения <= &НомерСообщения)";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаСообщений = Результат.Выбрать();
	Пока ВыборкаСообщений.Следующий() Цикл
		
		НаборЗаписей.Отбор.МобильныйКлиент.Установить(МобильныйКлиент);
		НаборЗаписей.Отбор.НомерСообщения.Установить(ВыборкаСообщений.НомерСообщения);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом()

Процедура ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.НомерПринятого = 0;
	УзелОбменаОбъект.НомерОтправленного = 0;
	УзелОбменаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена()

Функция ПолучитьКартинку(СсылкаНаОбъект) Экспорт
	
	Файл = СсылкаНаОбъект.ФайлКартинки;
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Файл);
	СериализиаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Попытка
		КартинкаXDTO = СериализиаторXDTO.ЗаписатьXDTO(ДвоичныеДанныеФайла);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат КартинкаXDTO;
	
КонецФункции

Функция ПолучитьДанныеАутентификации()
	
	Возврат "AIzaSyB75SosZcatLAMPFw17Zgs5MnxoH3AtBcI";
	
КонецФункции

Процедура ПозвонитьКонтрагенту(Телефон, Устройство) Экспорт
	
	Уведомление = Новый ДоставляемоеУведомление;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.Нет;
	
	ИДПодписчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Устройство, "ИДПодписчика");
	
	Если ЗначениеЗаполнено(ИДПодписчика) Тогда
		Получатель = ИДПодписчика.Получить();
	Иначе
		Получатель = Неопределено;
	КонецЕсли;

	Если Получатель <> Неопределено Тогда
		Уведомление.Получатели.Добавить(Получатель.Получить());
	КонецЕсли;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Данные = Телефон;
		Уведомление.Текст = "Звонок контрагенту";
		ДанныеАутентификации = ПолучитьДанныеАутентификации(); // пока только гугл
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

