#Область ОбработчикиСобытий

Функция SSL()
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Возврат ssl;
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
			
	//!!
	//Если Отгружен И Оплачен Тогда
	//	СостояниеВизита = Перечисления.СостоянияВизитов.Выполнен;
	//Иначе
	//	СостояниеВизита = Перечисления.СостоянияВизитов.ВРаботе;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	МассивУзловДляРегистрации = Новый Массив;
	
	//Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
	//		//Если НЕ ИзЦентральнойБазы Тогда
	//			МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
	//		//КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если МассивУзловДляРегистрации.Количество() > 0 Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Ссылка);
	//КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ДанныеВизитовДляОтчета 
	Движения.ДанныеВизитовДляОтчета.Записывать = Истина;
	Движение = Движения.ДанныеВизитовДляОтчета.Добавить();
	Движение.Период = Дата;
	Движение.Визит = Ссылка;
	Движение.Проект = Проект;
	Движение.Ответственный = Ответственный;
	Движение.Контрагент = Контрагент;
	Движение.КонтактноеЛицо = КонтактноеЛицо;
	Движение.Начало = ДатаНачало;
	Движение.Окончание = ДатаОкончание;

	КоординатыНачало = ГеоМеткаНачало.Получить();
	Если НЕ ЗначениеЗаполнено(КоординатыНачало) Тогда
		КоординатыНачало = Новый ГеографическиеКоординаты(0,0);
	КонецЕсли;
	КоординатыОкончание = ГеоМеткаОкончание.Получить();
	Если НЕ ЗначениеЗаполнено(КоординатыОкончание) Тогда
		КоординатыОкончание = Новый ГеографическиеКоординаты(0,0);
	КонецЕсли;
		
	
	Широта = ?(ЗначениеЗаполнено(ШиротаСупервайзер), ШиротаСупервайзер, МедПредыСервер.Среднее(КоординатыНачало.Широта, КоординатыОкончание.Широта));
	Долгота = ?(ЗначениеЗаполнено(ДолготаСупервайзер), ДолготаСупервайзер, МедПредыСервер.Среднее(КоординатыНачало.Долгота, КоординатыОкончание.Долгота)); 	
	
	Если НЕ (ЗначениеЗаполнено(Широта) Или ЗначениеЗаполнено(Долгота)) Тогда
		Соединение = Новый HTTPСоединение("geocode-maps.yandex.ru", , , , , , SSL());
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type","text/html");
		
		Запрос = Новый HTTPЗапрос(СтрШаблон("1.x/?format=json&geocode=%1", 
		МедПредыСервер.ПолучитьКонтактнуюИнформацию(Контрагент, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента)),
		Заголовки);
		
		Ответ = Соединение.Получить(Запрос);
		Если Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ТекстJSON = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON.УстановитьСтроку(ТекстJSON);
			СтруктураКоординат = ПрочитатьJSON(ЧтениеJSON);
			Попытка
				Координаты = СтруктураКоординат.response.GeoObjectCollection.featureMember[0].GeoObject.boundedBy.Envelope;
				КоординатыЭталон = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтруктураКоординат.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos, " ");
				Низ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Координаты.lowerCorner," ");
				Верх = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Координаты.upperCorner," ");
				ГСЧ = Новый ГенераторСлучайныхЧисел;
				Широта  = ГСЧ.СлучайноеЧисло(Число(Низ[1])*1000000, Число(Верх[1])*1000000)/1000000 + (ГСЧ.СлучайноеЧисло(0, 1000)-500)/1000000;
				Долгота = ГСЧ.СлучайноеЧисло(Число(Низ[0])*1000000, Число(Верх[0])*1000000)/1000000 + (ГСЧ.СлучайноеЧисло(0, 1000)-500)/1000000;
			Исключение
				Сообщить("Некорректно заполнен адрес контрагента!!!", СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Движение.Широта		= Широта;
	Движение.Долгота	= Долгота;
	
	Движение.Исправлено = ЗначениеЗаполнено(ШиротаСупервайзер) ИЛИ ЗначениеЗаполнено(ДолготаСупервайзер);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Визит.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Визит КАК Визит
	|ГДЕ
	|	Визит.Проведен
	|	И Визит.Контрагент = &Контрагент
	|	И Визит.КонтактноеЛицо = &КонтактноеЛицо
	|	И Визит.Проект = &Проект
	|	И Визит.Дата < &Дата
	|	И Визит.Операция = &Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Визит.Дата УБЫВ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("Контрагент", Ссылка.Контрагент);
	Запрос.УстановитьПараметр("КонтактноеЛицо", Ссылка.КонтактноеЛицо);
	Запрос.УстановитьПараметр("Проект", Ссылка.Проект);
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	Запрос.УстановитьПараметр("Операция", Ссылка.Операция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Движение.ПредыдущийВизит = Выборка.Ссылка;
	КонецЕсли;
	
	ДлительностьСекунд = Движение.Окончание-Движение.Начало;
	Часов = Цел(ДлительностьСекунд/3600);
	ДлительностьСекунд = ДлительностьСекунд-Часов*3600;
	Минут = Цел(ДлительностьСекунд/60);
	ДлительностьСекунд = ДлительностьСекунд-Минут*60;
	Секунд = ДлительностьСекунд;
	Движение.Время = Дата(1,1,1,Часов, Минут, Секунд);
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

#КонецОбласти
